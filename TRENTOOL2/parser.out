Created by PLY version 3.3 (http://www.dabeaz.com/ply)

Unused terminals:

    ENDFOR
    ENDIF
    ENDWHILE
    ENDFUNCTION

Grammar

Rule 0     S' -> top
Rule 1     top -> <empty>
Rule 2     top -> stmt_list
Rule 3     top -> top func_decl stmt_list_opt
Rule 4     top -> top func_decl stmt_list END_STMT semi_opt
Rule 5     semi_opt -> <empty>
Rule 6     semi_opt -> semi_opt SEMI
Rule 7     semi_opt -> semi_opt COMMA
Rule 8     stmt -> let
Rule 9     stmt -> continue_stmt
Rule 10    stmt -> break_stmt
Rule 11    stmt -> expr_stmt
Rule 12    stmt -> global_stmt
Rule 13    stmt -> command
Rule 14    stmt -> for_stmt
Rule 15    stmt -> if_stmt
Rule 16    stmt -> null_stmt
Rule 17    stmt -> return_stmt
Rule 18    stmt -> switch_stmt
Rule 19    stmt -> try_catch
Rule 20    stmt -> while_stmt
Rule 21    arg1 -> STRING
Rule 22    arg1 -> NUMBER
Rule 23    arg1 -> IDENT
Rule 24    arg1 -> GLOBAL
Rule 25    args -> arg1
Rule 26    args -> args arg1
Rule 27    command -> ident args SEMI
Rule 28    global_list -> ident
Rule 29    global_list -> global_list ident
Rule 30    global_stmt -> GLOBAL global_list SEMI
Rule 31    return_stmt -> RETURN SEMI
Rule 32    continue_stmt -> CONTINUE SEMI
Rule 33    break_stmt -> BREAK SEMI
Rule 34    switch_stmt -> SWITCH expr semi_opt case_list END_STMT
Rule 35    case_list -> <empty>
Rule 36    case_list -> CASE expr sep stmt_list_opt case_list
Rule 37    case_list -> OTHERWISE stmt_list
Rule 38    try_catch -> TRY stmt_list CATCH stmt_list END_STMT
Rule 39    null_stmt -> SEMI
Rule 40    null_stmt -> COMMA
Rule 41    func_decl -> FUNCTION ident args_opt SEMI
Rule 42    func_decl -> FUNCTION ret = ident args_opt SEMI
Rule 43    args_opt -> <empty>
Rule 44    args_opt -> LPAREN RPAREN
Rule 45    args_opt -> LPAREN arg_list RPAREN
Rule 46    arg_list -> ident
Rule 47    arg_list -> ident = expr
Rule 48    arg_list -> arg_list COMMA ident
Rule 49    arg_list -> arg_list COMMA ident = expr
Rule 50    ret -> ident
Rule 51    ret -> LBRACKET RBRACKET
Rule 52    ret -> LBRACKET expr_list RBRACKET
Rule 53    stmt_list_opt -> <empty>
Rule 54    stmt_list_opt -> stmt_list
Rule 55    stmt_list -> stmt
Rule 56    stmt_list -> stmt_list stmt
Rule 57    concat_list -> expr_list SEMI expr_list
Rule 58    concat_list -> concat_list SEMI expr_list
Rule 59    expr_list -> exprs
Rule 60    expr_list -> exprs COMMA
Rule 61    exprs -> expr
Rule 62    exprs -> exprs COMMA expr
Rule 63    expr_stmt -> expr_list SEMI
Rule 64    while_stmt -> WHILE expr SEMI stmt_list END_STMT
Rule 65    sep -> COMMA
Rule 66    sep -> SEMI
Rule 67    if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT
Rule 68    if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT
Rule 69    elseif_stmt -> <empty>
Rule 70    elseif_stmt -> ELSE stmt_list_opt
Rule 71    elseif_stmt -> ELSEIF expr sep stmt_list_opt elseif_stmt
Rule 72    let -> expr = expr SEMI
Rule 73    for_stmt -> FOR ident = expr SEMI stmt_list END_STMT
Rule 74    for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT
Rule 75    expr -> ident
Rule 76    expr -> end
Rule 77    expr -> number
Rule 78    expr -> string
Rule 79    expr -> colon
Rule 80    expr -> matrix
Rule 81    expr -> cellarray
Rule 82    expr -> expr2
Rule 83    expr -> expr1
Rule 84    expr -> lambda_expr
Rule 85    expr -> NE
Rule 86    lambda_args -> LPAREN RPAREN
Rule 87    lambda_args -> LPAREN arg_list RPAREN
Rule 88    lambda_expr -> HANDLE lambda_args expr
Rule 89    ident -> IDENT
Rule 90    number -> NUMBER
Rule 91    end -> END_EXPR
Rule 92    string -> STRING
Rule 93    colon -> COLON
Rule 94    expr1 -> MINUS expr
Rule 95    expr1 -> PLUS expr
Rule 96    expr1 -> NEG expr
Rule 97    expr1 -> HANDLE ident
Rule 98    cellarray -> LBRACE RBRACE
Rule 99    cellarray -> LBRACE expr_list RBRACE
Rule 100   matrix -> LBRACKET RBRACKET
Rule 101   matrix -> LBRACKET concat_list RBRACKET
Rule 102   matrix -> LBRACKET concat_list SEMI RBRACKET
Rule 103   matrix -> LBRACKET expr_list RBRACKET
Rule 104   matrix -> LBRACKET expr_list SEMI RBRACKET
Rule 105   expr -> LPAREN expr RPAREN
Rule 106   expr -> expr FIELD
Rule 107   expr -> expr TRANSPOSE
Rule 108   expr -> expr LBRACE expr_list RBRACE
Rule 109   expr -> expr LBRACE RBRACE
Rule 110   expr -> expr LPAREN expr_list RPAREN
Rule 111   expr -> expr LPAREN RPAREN
Rule 112   expr2 -> expr AND expr
Rule 113   expr2 -> expr ANDAND expr
Rule 114   expr2 -> expr BACKSLASH expr
Rule 115   expr2 -> expr COLON expr
Rule 116   expr2 -> expr DIV expr
Rule 117   expr2 -> expr DOT expr
Rule 118   expr2 -> expr DOTDIV expr
Rule 119   expr2 -> expr DOTEXP expr
Rule 120   expr2 -> expr DOTMUL expr
Rule 121   expr2 -> expr EQ expr
Rule 122   expr2 -> expr EXP expr
Rule 123   expr2 -> expr GE expr
Rule 124   expr2 -> expr GT expr
Rule 125   expr2 -> expr LE expr
Rule 126   expr2 -> expr LT expr
Rule 127   expr2 -> expr MINUS expr
Rule 128   expr2 -> expr MUL expr
Rule 129   expr2 -> expr NE expr
Rule 130   expr2 -> expr OR expr
Rule 131   expr2 -> expr OROR expr
Rule 132   expr2 -> expr PLUS expr

Terminals, with rules where they appear

=                    : 42 47 49 72 73 74
AND                  : 112
ANDAND               : 113
BACKSLASH            : 114
BREAK                : 33
CASE                 : 36
CATCH                : 38
COLON                : 93 115
COMMA                : 7 40 48 49 60 62 65
CONTINUE             : 32
DIV                  : 116
DOT                  : 117
DOTDIV               : 118
DOTEXP               : 119
DOTMUL               : 120
ELSE                 : 70
ELSEIF               : 71
ENDFOR               : 
ENDFUNCTION          : 
ENDIF                : 
ENDWHILE             : 
END_EXPR             : 91
END_STMT             : 4 34 38 64 67 68 73 74
EQ                   : 121
EXP                  : 122
FIELD                : 106
FOR                  : 73 74
FUNCTION             : 41 42
GE                   : 123
GLOBAL               : 24 30
GT                   : 124
HANDLE               : 88 97
IDENT                : 23 89
IF                   : 67 68
LBRACE               : 98 99 108 109
LBRACKET             : 51 52 100 101 102 103 104
LE                   : 125
LPAREN               : 44 45 74 86 87 105 110 111
LT                   : 126
MINUS                : 94 127
MUL                  : 128
NE                   : 85 129
NEG                  : 96
NUMBER               : 22 90
OR                   : 130
OROR                 : 131
OTHERWISE            : 37
PLUS                 : 95 132
RBRACE               : 98 99 108 109
RBRACKET             : 51 52 100 101 102 103 104
RETURN               : 31
RPAREN               : 44 45 74 86 87 105 110 111
SEMI                 : 6 27 30 31 32 33 39 41 42 57 58 63 64 66 72 73 74 102 104
STRING               : 21 92
SWITCH               : 34
TRANSPOSE            : 107
TRY                  : 38
WHILE                : 64
error                : 68

Nonterminals, with rules where they appear

arg1                 : 25 26
arg_list             : 45 48 49 87
args                 : 26 27
args_opt             : 41 42
break_stmt           : 10
case_list            : 34 36
cellarray            : 81
colon                : 79
command              : 13
concat_list          : 58 101 102
continue_stmt        : 9
elseif_stmt          : 67 68 71
end                  : 76
expr                 : 34 36 47 49 61 62 64 67 68 71 72 72 73 74 88 94 95 96 105 106 107 108 109 110 111 112 112 113 113 114 114 115 115 116 116 117 117 118 118 119 119 120 120 121 121 122 122 123 123 124 124 125 125 126 126 127 127 128 128 129 129 130 130 131 131 132 132
expr1                : 83
expr2                : 82
expr_list            : 52 57 57 58 63 99 103 104 108 110
expr_stmt            : 11
exprs                : 59 60 62
for_stmt             : 14
func_decl            : 3 4
global_list          : 29 30
global_stmt          : 12
ident                : 27 28 29 41 42 46 47 48 49 50 73 74 75 97
if_stmt              : 15
lambda_args          : 88
lambda_expr          : 84
let                  : 8
matrix               : 80
null_stmt            : 16
number               : 77
ret                  : 42
return_stmt          : 17
semi_opt             : 4 6 7 34
sep                  : 36 67 71
stmt                 : 55 56
stmt_list            : 2 4 37 38 38 54 56 64 73 74
stmt_list_opt        : 3 36 67 68 70 71
string               : 78
switch_stmt          : 18
top                  : 3 4 0
try_catch            : 19
while_stmt           : 20

Parsing method: LALR

state 0

    (0) S' -> . top
    (1) top -> .
    (2) top -> . stmt_list
    (3) top -> . top func_decl stmt_list_opt
    (4) top -> . top func_decl stmt_list END_STMT semi_opt
    (55) stmt_list -> . stmt
    (56) stmt_list -> . stmt_list stmt
    (8) stmt -> . let
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (72) let -> . expr = expr SEMI
    (32) continue_stmt -> . CONTINUE SEMI
    (33) break_stmt -> . BREAK SEMI
    (63) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (27) command -> . ident args SEMI
    (73) for_stmt -> . FOR ident = expr SEMI stmt_list END_STMT
    (74) for_stmt -> . FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT
    (67) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (68) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (39) null_stmt -> . SEMI
    (40) null_stmt -> . COMMA
    (31) return_stmt -> . RETURN SEMI
    (34) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (38) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (64) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (59) expr_list -> . exprs
    (60) expr_list -> . exprs COMMA
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr
    (61) exprs -> . expr
    (62) exprs -> . exprs COMMA expr

    FUNCTION        reduce using rule 1 (top -> .)
    $end            reduce using rule 1 (top -> .)
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 35
    GLOBAL          shift and go to state 22
    FOR             shift and go to state 13
    IF              shift and go to state 47
    SEMI            shift and go to state 41
    COMMA           shift and go to state 43
    RETURN          shift and go to state 8
    SWITCH          shift and go to state 31
    TRY             shift and go to state 15
    WHILE           shift and go to state 24
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    expr_list                      shift and go to state 9
    number                         shift and go to state 23
    return_stmt                    shift and go to state 25
    switch_stmt                    shift and go to state 26
    break_stmt                     shift and go to state 39
    lambda_expr                    shift and go to state 27
    end                            shift and go to state 40
    matrix                         shift and go to state 10
    continue_stmt                  shift and go to state 28
    top                            shift and go to state 29
    cellarray                      shift and go to state 18
    expr2                          shift and go to state 3
    expr1                          shift and go to state 42
    global_stmt                    shift and go to state 44
    string                         shift and go to state 38
    colon                          shift and go to state 7
    stmt                           shift and go to state 14
    for_stmt                       shift and go to state 49
    let                            shift and go to state 16
    expr_stmt                      shift and go to state 5
    stmt_list                      shift and go to state 48
    ident                          shift and go to state 32
    if_stmt                        shift and go to state 6
    expr                           shift and go to state 33
    try_catch                      shift and go to state 34
    exprs                          shift and go to state 50
    while_stmt                     shift and go to state 51
    command                        shift and go to state 52
    null_stmt                      shift and go to state 53

state 1

    (100) matrix -> LBRACKET . RBRACKET
    (101) matrix -> LBRACKET . concat_list RBRACKET
    (102) matrix -> LBRACKET . concat_list SEMI RBRACKET
    (103) matrix -> LBRACKET . expr_list RBRACKET
    (104) matrix -> LBRACKET . expr_list SEMI RBRACKET
    (57) concat_list -> . expr_list SEMI expr_list
    (58) concat_list -> . concat_list SEMI expr_list
    (59) expr_list -> . exprs
    (60) expr_list -> . exprs COMMA
    (61) exprs -> . expr
    (62) exprs -> . exprs COMMA expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    RBRACKET        shift and go to state 58
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    expr2                          shift and go to state 3
    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr_list                      shift and go to state 54
    number                         shift and go to state 23
    concat_list                    shift and go to state 55
    exprs                          shift and go to state 50
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    expr                           shift and go to state 57
    matrix                         shift and go to state 10

state 2

    (94) expr1 -> MINUS . expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 59
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 3

    (82) expr -> expr2 .

    RPAREN          reduce using rule 82 (expr -> expr2 .)
    FIELD           reduce using rule 82 (expr -> expr2 .)
    TRANSPOSE       reduce using rule 82 (expr -> expr2 .)
    LBRACE          reduce using rule 82 (expr -> expr2 .)
    LPAREN          reduce using rule 82 (expr -> expr2 .)
    AND             reduce using rule 82 (expr -> expr2 .)
    ANDAND          reduce using rule 82 (expr -> expr2 .)
    BACKSLASH       reduce using rule 82 (expr -> expr2 .)
    COLON           reduce using rule 82 (expr -> expr2 .)
    DIV             reduce using rule 82 (expr -> expr2 .)
    DOT             reduce using rule 82 (expr -> expr2 .)
    DOTDIV          reduce using rule 82 (expr -> expr2 .)
    DOTEXP          reduce using rule 82 (expr -> expr2 .)
    DOTMUL          reduce using rule 82 (expr -> expr2 .)
    EQ              reduce using rule 82 (expr -> expr2 .)
    EXP             reduce using rule 82 (expr -> expr2 .)
    GE              reduce using rule 82 (expr -> expr2 .)
    GT              reduce using rule 82 (expr -> expr2 .)
    LE              reduce using rule 82 (expr -> expr2 .)
    LT              reduce using rule 82 (expr -> expr2 .)
    MINUS           reduce using rule 82 (expr -> expr2 .)
    MUL             reduce using rule 82 (expr -> expr2 .)
    NE              reduce using rule 82 (expr -> expr2 .)
    OR              reduce using rule 82 (expr -> expr2 .)
    OROR            reduce using rule 82 (expr -> expr2 .)
    PLUS            reduce using rule 82 (expr -> expr2 .)
    =               reduce using rule 82 (expr -> expr2 .)
    COMMA           reduce using rule 82 (expr -> expr2 .)
    SEMI            reduce using rule 82 (expr -> expr2 .)
    RBRACKET        reduce using rule 82 (expr -> expr2 .)
    RBRACE          reduce using rule 82 (expr -> expr2 .)
    CASE            reduce using rule 82 (expr -> expr2 .)
    OTHERWISE       reduce using rule 82 (expr -> expr2 .)
    END_STMT        reduce using rule 82 (expr -> expr2 .)
    error           reduce using rule 82 (expr -> expr2 .)


state 4

    (95) expr1 -> PLUS . expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 60
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 5

    (11) stmt -> expr_stmt .

    END_STMT        reduce using rule 11 (stmt -> expr_stmt .)
    CONTINUE        reduce using rule 11 (stmt -> expr_stmt .)
    BREAK           reduce using rule 11 (stmt -> expr_stmt .)
    GLOBAL          reduce using rule 11 (stmt -> expr_stmt .)
    FOR             reduce using rule 11 (stmt -> expr_stmt .)
    IF              reduce using rule 11 (stmt -> expr_stmt .)
    SEMI            reduce using rule 11 (stmt -> expr_stmt .)
    COMMA           reduce using rule 11 (stmt -> expr_stmt .)
    RETURN          reduce using rule 11 (stmt -> expr_stmt .)
    SWITCH          reduce using rule 11 (stmt -> expr_stmt .)
    TRY             reduce using rule 11 (stmt -> expr_stmt .)
    WHILE           reduce using rule 11 (stmt -> expr_stmt .)
    NE              reduce using rule 11 (stmt -> expr_stmt .)
    LPAREN          reduce using rule 11 (stmt -> expr_stmt .)
    IDENT           reduce using rule 11 (stmt -> expr_stmt .)
    END_EXPR        reduce using rule 11 (stmt -> expr_stmt .)
    NUMBER          reduce using rule 11 (stmt -> expr_stmt .)
    STRING          reduce using rule 11 (stmt -> expr_stmt .)
    COLON           reduce using rule 11 (stmt -> expr_stmt .)
    LBRACKET        reduce using rule 11 (stmt -> expr_stmt .)
    LBRACE          reduce using rule 11 (stmt -> expr_stmt .)
    MINUS           reduce using rule 11 (stmt -> expr_stmt .)
    PLUS            reduce using rule 11 (stmt -> expr_stmt .)
    NEG             reduce using rule 11 (stmt -> expr_stmt .)
    HANDLE          reduce using rule 11 (stmt -> expr_stmt .)
    ELSE            reduce using rule 11 (stmt -> expr_stmt .)
    ELSEIF          reduce using rule 11 (stmt -> expr_stmt .)
    CATCH           reduce using rule 11 (stmt -> expr_stmt .)
    FUNCTION        reduce using rule 11 (stmt -> expr_stmt .)
    $end            reduce using rule 11 (stmt -> expr_stmt .)
    CASE            reduce using rule 11 (stmt -> expr_stmt .)
    OTHERWISE       reduce using rule 11 (stmt -> expr_stmt .)


state 6

    (15) stmt -> if_stmt .

    END_STMT        reduce using rule 15 (stmt -> if_stmt .)
    CONTINUE        reduce using rule 15 (stmt -> if_stmt .)
    BREAK           reduce using rule 15 (stmt -> if_stmt .)
    GLOBAL          reduce using rule 15 (stmt -> if_stmt .)
    FOR             reduce using rule 15 (stmt -> if_stmt .)
    IF              reduce using rule 15 (stmt -> if_stmt .)
    SEMI            reduce using rule 15 (stmt -> if_stmt .)
    COMMA           reduce using rule 15 (stmt -> if_stmt .)
    RETURN          reduce using rule 15 (stmt -> if_stmt .)
    SWITCH          reduce using rule 15 (stmt -> if_stmt .)
    TRY             reduce using rule 15 (stmt -> if_stmt .)
    WHILE           reduce using rule 15 (stmt -> if_stmt .)
    NE              reduce using rule 15 (stmt -> if_stmt .)
    LPAREN          reduce using rule 15 (stmt -> if_stmt .)
    IDENT           reduce using rule 15 (stmt -> if_stmt .)
    END_EXPR        reduce using rule 15 (stmt -> if_stmt .)
    NUMBER          reduce using rule 15 (stmt -> if_stmt .)
    STRING          reduce using rule 15 (stmt -> if_stmt .)
    COLON           reduce using rule 15 (stmt -> if_stmt .)
    LBRACKET        reduce using rule 15 (stmt -> if_stmt .)
    LBRACE          reduce using rule 15 (stmt -> if_stmt .)
    MINUS           reduce using rule 15 (stmt -> if_stmt .)
    PLUS            reduce using rule 15 (stmt -> if_stmt .)
    NEG             reduce using rule 15 (stmt -> if_stmt .)
    HANDLE          reduce using rule 15 (stmt -> if_stmt .)
    ELSE            reduce using rule 15 (stmt -> if_stmt .)
    ELSEIF          reduce using rule 15 (stmt -> if_stmt .)
    CATCH           reduce using rule 15 (stmt -> if_stmt .)
    FUNCTION        reduce using rule 15 (stmt -> if_stmt .)
    $end            reduce using rule 15 (stmt -> if_stmt .)
    CASE            reduce using rule 15 (stmt -> if_stmt .)
    OTHERWISE       reduce using rule 15 (stmt -> if_stmt .)


state 7

    (79) expr -> colon .

    RPAREN          reduce using rule 79 (expr -> colon .)
    FIELD           reduce using rule 79 (expr -> colon .)
    TRANSPOSE       reduce using rule 79 (expr -> colon .)
    LBRACE          reduce using rule 79 (expr -> colon .)
    LPAREN          reduce using rule 79 (expr -> colon .)
    AND             reduce using rule 79 (expr -> colon .)
    ANDAND          reduce using rule 79 (expr -> colon .)
    BACKSLASH       reduce using rule 79 (expr -> colon .)
    COLON           reduce using rule 79 (expr -> colon .)
    DIV             reduce using rule 79 (expr -> colon .)
    DOT             reduce using rule 79 (expr -> colon .)
    DOTDIV          reduce using rule 79 (expr -> colon .)
    DOTEXP          reduce using rule 79 (expr -> colon .)
    DOTMUL          reduce using rule 79 (expr -> colon .)
    EQ              reduce using rule 79 (expr -> colon .)
    EXP             reduce using rule 79 (expr -> colon .)
    GE              reduce using rule 79 (expr -> colon .)
    GT              reduce using rule 79 (expr -> colon .)
    LE              reduce using rule 79 (expr -> colon .)
    LT              reduce using rule 79 (expr -> colon .)
    MINUS           reduce using rule 79 (expr -> colon .)
    MUL             reduce using rule 79 (expr -> colon .)
    NE              reduce using rule 79 (expr -> colon .)
    OR              reduce using rule 79 (expr -> colon .)
    OROR            reduce using rule 79 (expr -> colon .)
    PLUS            reduce using rule 79 (expr -> colon .)
    =               reduce using rule 79 (expr -> colon .)
    COMMA           reduce using rule 79 (expr -> colon .)
    SEMI            reduce using rule 79 (expr -> colon .)
    RBRACKET        reduce using rule 79 (expr -> colon .)
    RBRACE          reduce using rule 79 (expr -> colon .)
    CASE            reduce using rule 79 (expr -> colon .)
    OTHERWISE       reduce using rule 79 (expr -> colon .)
    END_STMT        reduce using rule 79 (expr -> colon .)
    error           reduce using rule 79 (expr -> colon .)


state 8

    (31) return_stmt -> RETURN . SEMI

    SEMI            shift and go to state 61


state 9

    (63) expr_stmt -> expr_list . SEMI

    SEMI            shift and go to state 62


state 10

    (80) expr -> matrix .

    RPAREN          reduce using rule 80 (expr -> matrix .)
    FIELD           reduce using rule 80 (expr -> matrix .)
    TRANSPOSE       reduce using rule 80 (expr -> matrix .)
    LBRACE          reduce using rule 80 (expr -> matrix .)
    LPAREN          reduce using rule 80 (expr -> matrix .)
    AND             reduce using rule 80 (expr -> matrix .)
    ANDAND          reduce using rule 80 (expr -> matrix .)
    BACKSLASH       reduce using rule 80 (expr -> matrix .)
    COLON           reduce using rule 80 (expr -> matrix .)
    DIV             reduce using rule 80 (expr -> matrix .)
    DOT             reduce using rule 80 (expr -> matrix .)
    DOTDIV          reduce using rule 80 (expr -> matrix .)
    DOTEXP          reduce using rule 80 (expr -> matrix .)
    DOTMUL          reduce using rule 80 (expr -> matrix .)
    EQ              reduce using rule 80 (expr -> matrix .)
    EXP             reduce using rule 80 (expr -> matrix .)
    GE              reduce using rule 80 (expr -> matrix .)
    GT              reduce using rule 80 (expr -> matrix .)
    LE              reduce using rule 80 (expr -> matrix .)
    LT              reduce using rule 80 (expr -> matrix .)
    MINUS           reduce using rule 80 (expr -> matrix .)
    MUL             reduce using rule 80 (expr -> matrix .)
    NE              reduce using rule 80 (expr -> matrix .)
    OR              reduce using rule 80 (expr -> matrix .)
    OROR            reduce using rule 80 (expr -> matrix .)
    PLUS            reduce using rule 80 (expr -> matrix .)
    =               reduce using rule 80 (expr -> matrix .)
    COMMA           reduce using rule 80 (expr -> matrix .)
    SEMI            reduce using rule 80 (expr -> matrix .)
    RBRACKET        reduce using rule 80 (expr -> matrix .)
    RBRACE          reduce using rule 80 (expr -> matrix .)
    CASE            reduce using rule 80 (expr -> matrix .)
    OTHERWISE       reduce using rule 80 (expr -> matrix .)
    END_STMT        reduce using rule 80 (expr -> matrix .)
    error           reduce using rule 80 (expr -> matrix .)


state 11

    (93) colon -> COLON .

    =               reduce using rule 93 (colon -> COLON .)
    FIELD           reduce using rule 93 (colon -> COLON .)
    TRANSPOSE       reduce using rule 93 (colon -> COLON .)
    LBRACE          reduce using rule 93 (colon -> COLON .)
    LPAREN          reduce using rule 93 (colon -> COLON .)
    AND             reduce using rule 93 (colon -> COLON .)
    ANDAND          reduce using rule 93 (colon -> COLON .)
    BACKSLASH       reduce using rule 93 (colon -> COLON .)
    COLON           reduce using rule 93 (colon -> COLON .)
    DIV             reduce using rule 93 (colon -> COLON .)
    DOT             reduce using rule 93 (colon -> COLON .)
    DOTDIV          reduce using rule 93 (colon -> COLON .)
    DOTEXP          reduce using rule 93 (colon -> COLON .)
    DOTMUL          reduce using rule 93 (colon -> COLON .)
    EQ              reduce using rule 93 (colon -> COLON .)
    EXP             reduce using rule 93 (colon -> COLON .)
    GE              reduce using rule 93 (colon -> COLON .)
    GT              reduce using rule 93 (colon -> COLON .)
    LE              reduce using rule 93 (colon -> COLON .)
    LT              reduce using rule 93 (colon -> COLON .)
    MINUS           reduce using rule 93 (colon -> COLON .)
    MUL             reduce using rule 93 (colon -> COLON .)
    NE              reduce using rule 93 (colon -> COLON .)
    OR              reduce using rule 93 (colon -> COLON .)
    OROR            reduce using rule 93 (colon -> COLON .)
    PLUS            reduce using rule 93 (colon -> COLON .)
    COMMA           reduce using rule 93 (colon -> COLON .)
    SEMI            reduce using rule 93 (colon -> COLON .)
    error           reduce using rule 93 (colon -> COLON .)
    RBRACKET        reduce using rule 93 (colon -> COLON .)
    RBRACE          reduce using rule 93 (colon -> COLON .)
    CASE            reduce using rule 93 (colon -> COLON .)
    OTHERWISE       reduce using rule 93 (colon -> COLON .)
    END_STMT        reduce using rule 93 (colon -> COLON .)
    RPAREN          reduce using rule 93 (colon -> COLON .)


state 12

    (89) ident -> IDENT .

    SEMI            reduce using rule 89 (ident -> IDENT .)
    FIELD           reduce using rule 89 (ident -> IDENT .)
    TRANSPOSE       reduce using rule 89 (ident -> IDENT .)
    LBRACE          reduce using rule 89 (ident -> IDENT .)
    LPAREN          reduce using rule 89 (ident -> IDENT .)
    AND             reduce using rule 89 (ident -> IDENT .)
    ANDAND          reduce using rule 89 (ident -> IDENT .)
    BACKSLASH       reduce using rule 89 (ident -> IDENT .)
    COLON           reduce using rule 89 (ident -> IDENT .)
    DIV             reduce using rule 89 (ident -> IDENT .)
    DOT             reduce using rule 89 (ident -> IDENT .)
    DOTDIV          reduce using rule 89 (ident -> IDENT .)
    DOTEXP          reduce using rule 89 (ident -> IDENT .)
    DOTMUL          reduce using rule 89 (ident -> IDENT .)
    EQ              reduce using rule 89 (ident -> IDENT .)
    EXP             reduce using rule 89 (ident -> IDENT .)
    GE              reduce using rule 89 (ident -> IDENT .)
    GT              reduce using rule 89 (ident -> IDENT .)
    LE              reduce using rule 89 (ident -> IDENT .)
    LT              reduce using rule 89 (ident -> IDENT .)
    MINUS           reduce using rule 89 (ident -> IDENT .)
    MUL             reduce using rule 89 (ident -> IDENT .)
    NE              reduce using rule 89 (ident -> IDENT .)
    OR              reduce using rule 89 (ident -> IDENT .)
    OROR            reduce using rule 89 (ident -> IDENT .)
    PLUS            reduce using rule 89 (ident -> IDENT .)
    COMMA           reduce using rule 89 (ident -> IDENT .)
    =               reduce using rule 89 (ident -> IDENT .)
    RBRACKET        reduce using rule 89 (ident -> IDENT .)
    RBRACE          reduce using rule 89 (ident -> IDENT .)
    CASE            reduce using rule 89 (ident -> IDENT .)
    OTHERWISE       reduce using rule 89 (ident -> IDENT .)
    END_STMT        reduce using rule 89 (ident -> IDENT .)
    RPAREN          reduce using rule 89 (ident -> IDENT .)
    error           reduce using rule 89 (ident -> IDENT .)
    IDENT           reduce using rule 89 (ident -> IDENT .)
    STRING          reduce using rule 89 (ident -> IDENT .)
    NUMBER          reduce using rule 89 (ident -> IDENT .)
    GLOBAL          reduce using rule 89 (ident -> IDENT .)


state 13

    (73) for_stmt -> FOR . ident = expr SEMI stmt_list END_STMT
    (74) for_stmt -> FOR . LPAREN ident = expr RPAREN SEMI stmt_list END_STMT
    (89) ident -> . IDENT

    LPAREN          shift and go to state 64
    IDENT           shift and go to state 12

    ident                          shift and go to state 63

state 14

    (55) stmt_list -> stmt .

    CONTINUE        reduce using rule 55 (stmt_list -> stmt .)
    BREAK           reduce using rule 55 (stmt_list -> stmt .)
    GLOBAL          reduce using rule 55 (stmt_list -> stmt .)
    FOR             reduce using rule 55 (stmt_list -> stmt .)
    IF              reduce using rule 55 (stmt_list -> stmt .)
    SEMI            reduce using rule 55 (stmt_list -> stmt .)
    COMMA           reduce using rule 55 (stmt_list -> stmt .)
    RETURN          reduce using rule 55 (stmt_list -> stmt .)
    SWITCH          reduce using rule 55 (stmt_list -> stmt .)
    TRY             reduce using rule 55 (stmt_list -> stmt .)
    WHILE           reduce using rule 55 (stmt_list -> stmt .)
    NE              reduce using rule 55 (stmt_list -> stmt .)
    LPAREN          reduce using rule 55 (stmt_list -> stmt .)
    IDENT           reduce using rule 55 (stmt_list -> stmt .)
    END_EXPR        reduce using rule 55 (stmt_list -> stmt .)
    NUMBER          reduce using rule 55 (stmt_list -> stmt .)
    STRING          reduce using rule 55 (stmt_list -> stmt .)
    COLON           reduce using rule 55 (stmt_list -> stmt .)
    LBRACKET        reduce using rule 55 (stmt_list -> stmt .)
    LBRACE          reduce using rule 55 (stmt_list -> stmt .)
    MINUS           reduce using rule 55 (stmt_list -> stmt .)
    PLUS            reduce using rule 55 (stmt_list -> stmt .)
    NEG             reduce using rule 55 (stmt_list -> stmt .)
    HANDLE          reduce using rule 55 (stmt_list -> stmt .)
    FUNCTION        reduce using rule 55 (stmt_list -> stmt .)
    $end            reduce using rule 55 (stmt_list -> stmt .)
    END_STMT        reduce using rule 55 (stmt_list -> stmt .)
    ELSE            reduce using rule 55 (stmt_list -> stmt .)
    ELSEIF          reduce using rule 55 (stmt_list -> stmt .)
    CASE            reduce using rule 55 (stmt_list -> stmt .)
    OTHERWISE       reduce using rule 55 (stmt_list -> stmt .)
    CATCH           reduce using rule 55 (stmt_list -> stmt .)


state 15

    (38) try_catch -> TRY . stmt_list CATCH stmt_list END_STMT
    (55) stmt_list -> . stmt
    (56) stmt_list -> . stmt_list stmt
    (8) stmt -> . let
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (72) let -> . expr = expr SEMI
    (32) continue_stmt -> . CONTINUE SEMI
    (33) break_stmt -> . BREAK SEMI
    (63) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (27) command -> . ident args SEMI
    (73) for_stmt -> . FOR ident = expr SEMI stmt_list END_STMT
    (74) for_stmt -> . FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT
    (67) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (68) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (39) null_stmt -> . SEMI
    (40) null_stmt -> . COMMA
    (31) return_stmt -> . RETURN SEMI
    (34) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (38) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (64) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (59) expr_list -> . exprs
    (60) expr_list -> . exprs COMMA
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr
    (61) exprs -> . expr
    (62) exprs -> . exprs COMMA expr

    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 35
    GLOBAL          shift and go to state 22
    FOR             shift and go to state 13
    IF              shift and go to state 47
    SEMI            shift and go to state 41
    COMMA           shift and go to state 43
    RETURN          shift and go to state 8
    SWITCH          shift and go to state 31
    TRY             shift and go to state 15
    WHILE           shift and go to state 24
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    expr_list                      shift and go to state 9
    number                         shift and go to state 23
    return_stmt                    shift and go to state 25
    switch_stmt                    shift and go to state 26
    break_stmt                     shift and go to state 39
    lambda_expr                    shift and go to state 27
    end                            shift and go to state 40
    matrix                         shift and go to state 10
    continue_stmt                  shift and go to state 28
    cellarray                      shift and go to state 18
    expr2                          shift and go to state 3
    expr1                          shift and go to state 42
    global_stmt                    shift and go to state 44
    string                         shift and go to state 38
    colon                          shift and go to state 7
    stmt                           shift and go to state 14
    for_stmt                       shift and go to state 49
    let                            shift and go to state 16
    expr_stmt                      shift and go to state 5
    stmt_list                      shift and go to state 65
    ident                          shift and go to state 32
    if_stmt                        shift and go to state 6
    expr                           shift and go to state 33
    try_catch                      shift and go to state 34
    exprs                          shift and go to state 50
    while_stmt                     shift and go to state 51
    command                        shift and go to state 52
    null_stmt                      shift and go to state 53

state 16

    (8) stmt -> let .

    END_STMT        reduce using rule 8 (stmt -> let .)
    CONTINUE        reduce using rule 8 (stmt -> let .)
    BREAK           reduce using rule 8 (stmt -> let .)
    GLOBAL          reduce using rule 8 (stmt -> let .)
    FOR             reduce using rule 8 (stmt -> let .)
    IF              reduce using rule 8 (stmt -> let .)
    SEMI            reduce using rule 8 (stmt -> let .)
    COMMA           reduce using rule 8 (stmt -> let .)
    RETURN          reduce using rule 8 (stmt -> let .)
    SWITCH          reduce using rule 8 (stmt -> let .)
    TRY             reduce using rule 8 (stmt -> let .)
    WHILE           reduce using rule 8 (stmt -> let .)
    NE              reduce using rule 8 (stmt -> let .)
    LPAREN          reduce using rule 8 (stmt -> let .)
    IDENT           reduce using rule 8 (stmt -> let .)
    END_EXPR        reduce using rule 8 (stmt -> let .)
    NUMBER          reduce using rule 8 (stmt -> let .)
    STRING          reduce using rule 8 (stmt -> let .)
    COLON           reduce using rule 8 (stmt -> let .)
    LBRACKET        reduce using rule 8 (stmt -> let .)
    LBRACE          reduce using rule 8 (stmt -> let .)
    MINUS           reduce using rule 8 (stmt -> let .)
    PLUS            reduce using rule 8 (stmt -> let .)
    NEG             reduce using rule 8 (stmt -> let .)
    HANDLE          reduce using rule 8 (stmt -> let .)
    ELSE            reduce using rule 8 (stmt -> let .)
    ELSEIF          reduce using rule 8 (stmt -> let .)
    CATCH           reduce using rule 8 (stmt -> let .)
    FUNCTION        reduce using rule 8 (stmt -> let .)
    $end            reduce using rule 8 (stmt -> let .)
    CASE            reduce using rule 8 (stmt -> let .)
    OTHERWISE       reduce using rule 8 (stmt -> let .)


state 17

    (98) cellarray -> LBRACE . RBRACE
    (99) cellarray -> LBRACE . expr_list RBRACE
    (59) expr_list -> . exprs
    (60) expr_list -> . exprs COMMA
    (61) exprs -> . expr
    (62) exprs -> . exprs COMMA expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    RBRACE          shift and go to state 67
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr_list                      shift and go to state 66
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    exprs                          shift and go to state 50
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    expr                           shift and go to state 57
    matrix                         shift and go to state 10

state 18

    (81) expr -> cellarray .

    RPAREN          reduce using rule 81 (expr -> cellarray .)
    FIELD           reduce using rule 81 (expr -> cellarray .)
    TRANSPOSE       reduce using rule 81 (expr -> cellarray .)
    LBRACE          reduce using rule 81 (expr -> cellarray .)
    LPAREN          reduce using rule 81 (expr -> cellarray .)
    AND             reduce using rule 81 (expr -> cellarray .)
    ANDAND          reduce using rule 81 (expr -> cellarray .)
    BACKSLASH       reduce using rule 81 (expr -> cellarray .)
    COLON           reduce using rule 81 (expr -> cellarray .)
    DIV             reduce using rule 81 (expr -> cellarray .)
    DOT             reduce using rule 81 (expr -> cellarray .)
    DOTDIV          reduce using rule 81 (expr -> cellarray .)
    DOTEXP          reduce using rule 81 (expr -> cellarray .)
    DOTMUL          reduce using rule 81 (expr -> cellarray .)
    EQ              reduce using rule 81 (expr -> cellarray .)
    EXP             reduce using rule 81 (expr -> cellarray .)
    GE              reduce using rule 81 (expr -> cellarray .)
    GT              reduce using rule 81 (expr -> cellarray .)
    LE              reduce using rule 81 (expr -> cellarray .)
    LT              reduce using rule 81 (expr -> cellarray .)
    MINUS           reduce using rule 81 (expr -> cellarray .)
    MUL             reduce using rule 81 (expr -> cellarray .)
    NE              reduce using rule 81 (expr -> cellarray .)
    OR              reduce using rule 81 (expr -> cellarray .)
    OROR            reduce using rule 81 (expr -> cellarray .)
    PLUS            reduce using rule 81 (expr -> cellarray .)
    =               reduce using rule 81 (expr -> cellarray .)
    COMMA           reduce using rule 81 (expr -> cellarray .)
    SEMI            reduce using rule 81 (expr -> cellarray .)
    RBRACKET        reduce using rule 81 (expr -> cellarray .)
    RBRACE          reduce using rule 81 (expr -> cellarray .)
    CASE            reduce using rule 81 (expr -> cellarray .)
    OTHERWISE       reduce using rule 81 (expr -> cellarray .)
    END_STMT        reduce using rule 81 (expr -> cellarray .)
    error           reduce using rule 81 (expr -> cellarray .)


state 19

    (32) continue_stmt -> CONTINUE . SEMI

    SEMI            shift and go to state 68


state 20

    (91) end -> END_EXPR .

    FIELD           reduce using rule 91 (end -> END_EXPR .)
    TRANSPOSE       reduce using rule 91 (end -> END_EXPR .)
    LBRACE          reduce using rule 91 (end -> END_EXPR .)
    LPAREN          reduce using rule 91 (end -> END_EXPR .)
    AND             reduce using rule 91 (end -> END_EXPR .)
    ANDAND          reduce using rule 91 (end -> END_EXPR .)
    BACKSLASH       reduce using rule 91 (end -> END_EXPR .)
    COLON           reduce using rule 91 (end -> END_EXPR .)
    DIV             reduce using rule 91 (end -> END_EXPR .)
    DOT             reduce using rule 91 (end -> END_EXPR .)
    DOTDIV          reduce using rule 91 (end -> END_EXPR .)
    DOTEXP          reduce using rule 91 (end -> END_EXPR .)
    DOTMUL          reduce using rule 91 (end -> END_EXPR .)
    EQ              reduce using rule 91 (end -> END_EXPR .)
    EXP             reduce using rule 91 (end -> END_EXPR .)
    GE              reduce using rule 91 (end -> END_EXPR .)
    GT              reduce using rule 91 (end -> END_EXPR .)
    LE              reduce using rule 91 (end -> END_EXPR .)
    LT              reduce using rule 91 (end -> END_EXPR .)
    MINUS           reduce using rule 91 (end -> END_EXPR .)
    MUL             reduce using rule 91 (end -> END_EXPR .)
    NE              reduce using rule 91 (end -> END_EXPR .)
    OR              reduce using rule 91 (end -> END_EXPR .)
    OROR            reduce using rule 91 (end -> END_EXPR .)
    PLUS            reduce using rule 91 (end -> END_EXPR .)
    =               reduce using rule 91 (end -> END_EXPR .)
    COMMA           reduce using rule 91 (end -> END_EXPR .)
    SEMI            reduce using rule 91 (end -> END_EXPR .)
    RBRACKET        reduce using rule 91 (end -> END_EXPR .)
    RBRACE          reduce using rule 91 (end -> END_EXPR .)
    CASE            reduce using rule 91 (end -> END_EXPR .)
    OTHERWISE       reduce using rule 91 (end -> END_EXPR .)
    END_STMT        reduce using rule 91 (end -> END_EXPR .)
    RPAREN          reduce using rule 91 (end -> END_EXPR .)
    error           reduce using rule 91 (end -> END_EXPR .)


state 21

    (96) expr1 -> NEG . expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 69
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 22

    (30) global_stmt -> GLOBAL . global_list SEMI
    (28) global_list -> . ident
    (29) global_list -> . global_list ident
    (89) ident -> . IDENT

    IDENT           shift and go to state 12

    ident                          shift and go to state 70
    global_list                    shift and go to state 71

state 23

    (77) expr -> number .

    RPAREN          reduce using rule 77 (expr -> number .)
    FIELD           reduce using rule 77 (expr -> number .)
    TRANSPOSE       reduce using rule 77 (expr -> number .)
    LBRACE          reduce using rule 77 (expr -> number .)
    LPAREN          reduce using rule 77 (expr -> number .)
    AND             reduce using rule 77 (expr -> number .)
    ANDAND          reduce using rule 77 (expr -> number .)
    BACKSLASH       reduce using rule 77 (expr -> number .)
    COLON           reduce using rule 77 (expr -> number .)
    DIV             reduce using rule 77 (expr -> number .)
    DOT             reduce using rule 77 (expr -> number .)
    DOTDIV          reduce using rule 77 (expr -> number .)
    DOTEXP          reduce using rule 77 (expr -> number .)
    DOTMUL          reduce using rule 77 (expr -> number .)
    EQ              reduce using rule 77 (expr -> number .)
    EXP             reduce using rule 77 (expr -> number .)
    GE              reduce using rule 77 (expr -> number .)
    GT              reduce using rule 77 (expr -> number .)
    LE              reduce using rule 77 (expr -> number .)
    LT              reduce using rule 77 (expr -> number .)
    MINUS           reduce using rule 77 (expr -> number .)
    MUL             reduce using rule 77 (expr -> number .)
    NE              reduce using rule 77 (expr -> number .)
    OR              reduce using rule 77 (expr -> number .)
    OROR            reduce using rule 77 (expr -> number .)
    PLUS            reduce using rule 77 (expr -> number .)
    =               reduce using rule 77 (expr -> number .)
    COMMA           reduce using rule 77 (expr -> number .)
    SEMI            reduce using rule 77 (expr -> number .)
    RBRACKET        reduce using rule 77 (expr -> number .)
    RBRACE          reduce using rule 77 (expr -> number .)
    CASE            reduce using rule 77 (expr -> number .)
    OTHERWISE       reduce using rule 77 (expr -> number .)
    END_STMT        reduce using rule 77 (expr -> number .)
    error           reduce using rule 77 (expr -> number .)


state 24

    (64) while_stmt -> WHILE . expr SEMI stmt_list END_STMT
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 72
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 25

    (17) stmt -> return_stmt .

    END_STMT        reduce using rule 17 (stmt -> return_stmt .)
    CONTINUE        reduce using rule 17 (stmt -> return_stmt .)
    BREAK           reduce using rule 17 (stmt -> return_stmt .)
    GLOBAL          reduce using rule 17 (stmt -> return_stmt .)
    FOR             reduce using rule 17 (stmt -> return_stmt .)
    IF              reduce using rule 17 (stmt -> return_stmt .)
    SEMI            reduce using rule 17 (stmt -> return_stmt .)
    COMMA           reduce using rule 17 (stmt -> return_stmt .)
    RETURN          reduce using rule 17 (stmt -> return_stmt .)
    SWITCH          reduce using rule 17 (stmt -> return_stmt .)
    TRY             reduce using rule 17 (stmt -> return_stmt .)
    WHILE           reduce using rule 17 (stmt -> return_stmt .)
    NE              reduce using rule 17 (stmt -> return_stmt .)
    LPAREN          reduce using rule 17 (stmt -> return_stmt .)
    IDENT           reduce using rule 17 (stmt -> return_stmt .)
    END_EXPR        reduce using rule 17 (stmt -> return_stmt .)
    NUMBER          reduce using rule 17 (stmt -> return_stmt .)
    STRING          reduce using rule 17 (stmt -> return_stmt .)
    COLON           reduce using rule 17 (stmt -> return_stmt .)
    LBRACKET        reduce using rule 17 (stmt -> return_stmt .)
    LBRACE          reduce using rule 17 (stmt -> return_stmt .)
    MINUS           reduce using rule 17 (stmt -> return_stmt .)
    PLUS            reduce using rule 17 (stmt -> return_stmt .)
    NEG             reduce using rule 17 (stmt -> return_stmt .)
    HANDLE          reduce using rule 17 (stmt -> return_stmt .)
    ELSE            reduce using rule 17 (stmt -> return_stmt .)
    ELSEIF          reduce using rule 17 (stmt -> return_stmt .)
    CATCH           reduce using rule 17 (stmt -> return_stmt .)
    FUNCTION        reduce using rule 17 (stmt -> return_stmt .)
    $end            reduce using rule 17 (stmt -> return_stmt .)
    CASE            reduce using rule 17 (stmt -> return_stmt .)
    OTHERWISE       reduce using rule 17 (stmt -> return_stmt .)


state 26

    (18) stmt -> switch_stmt .

    END_STMT        reduce using rule 18 (stmt -> switch_stmt .)
    CONTINUE        reduce using rule 18 (stmt -> switch_stmt .)
    BREAK           reduce using rule 18 (stmt -> switch_stmt .)
    GLOBAL          reduce using rule 18 (stmt -> switch_stmt .)
    FOR             reduce using rule 18 (stmt -> switch_stmt .)
    IF              reduce using rule 18 (stmt -> switch_stmt .)
    SEMI            reduce using rule 18 (stmt -> switch_stmt .)
    COMMA           reduce using rule 18 (stmt -> switch_stmt .)
    RETURN          reduce using rule 18 (stmt -> switch_stmt .)
    SWITCH          reduce using rule 18 (stmt -> switch_stmt .)
    TRY             reduce using rule 18 (stmt -> switch_stmt .)
    WHILE           reduce using rule 18 (stmt -> switch_stmt .)
    NE              reduce using rule 18 (stmt -> switch_stmt .)
    LPAREN          reduce using rule 18 (stmt -> switch_stmt .)
    IDENT           reduce using rule 18 (stmt -> switch_stmt .)
    END_EXPR        reduce using rule 18 (stmt -> switch_stmt .)
    NUMBER          reduce using rule 18 (stmt -> switch_stmt .)
    STRING          reduce using rule 18 (stmt -> switch_stmt .)
    COLON           reduce using rule 18 (stmt -> switch_stmt .)
    LBRACKET        reduce using rule 18 (stmt -> switch_stmt .)
    LBRACE          reduce using rule 18 (stmt -> switch_stmt .)
    MINUS           reduce using rule 18 (stmt -> switch_stmt .)
    PLUS            reduce using rule 18 (stmt -> switch_stmt .)
    NEG             reduce using rule 18 (stmt -> switch_stmt .)
    HANDLE          reduce using rule 18 (stmt -> switch_stmt .)
    ELSE            reduce using rule 18 (stmt -> switch_stmt .)
    ELSEIF          reduce using rule 18 (stmt -> switch_stmt .)
    CATCH           reduce using rule 18 (stmt -> switch_stmt .)
    FUNCTION        reduce using rule 18 (stmt -> switch_stmt .)
    $end            reduce using rule 18 (stmt -> switch_stmt .)
    CASE            reduce using rule 18 (stmt -> switch_stmt .)
    OTHERWISE       reduce using rule 18 (stmt -> switch_stmt .)


state 27

    (84) expr -> lambda_expr .

    RPAREN          reduce using rule 84 (expr -> lambda_expr .)
    FIELD           reduce using rule 84 (expr -> lambda_expr .)
    TRANSPOSE       reduce using rule 84 (expr -> lambda_expr .)
    LBRACE          reduce using rule 84 (expr -> lambda_expr .)
    LPAREN          reduce using rule 84 (expr -> lambda_expr .)
    AND             reduce using rule 84 (expr -> lambda_expr .)
    ANDAND          reduce using rule 84 (expr -> lambda_expr .)
    BACKSLASH       reduce using rule 84 (expr -> lambda_expr .)
    COLON           reduce using rule 84 (expr -> lambda_expr .)
    DIV             reduce using rule 84 (expr -> lambda_expr .)
    DOT             reduce using rule 84 (expr -> lambda_expr .)
    DOTDIV          reduce using rule 84 (expr -> lambda_expr .)
    DOTEXP          reduce using rule 84 (expr -> lambda_expr .)
    DOTMUL          reduce using rule 84 (expr -> lambda_expr .)
    EQ              reduce using rule 84 (expr -> lambda_expr .)
    EXP             reduce using rule 84 (expr -> lambda_expr .)
    GE              reduce using rule 84 (expr -> lambda_expr .)
    GT              reduce using rule 84 (expr -> lambda_expr .)
    LE              reduce using rule 84 (expr -> lambda_expr .)
    LT              reduce using rule 84 (expr -> lambda_expr .)
    MINUS           reduce using rule 84 (expr -> lambda_expr .)
    MUL             reduce using rule 84 (expr -> lambda_expr .)
    NE              reduce using rule 84 (expr -> lambda_expr .)
    OR              reduce using rule 84 (expr -> lambda_expr .)
    OROR            reduce using rule 84 (expr -> lambda_expr .)
    PLUS            reduce using rule 84 (expr -> lambda_expr .)
    =               reduce using rule 84 (expr -> lambda_expr .)
    COMMA           reduce using rule 84 (expr -> lambda_expr .)
    SEMI            reduce using rule 84 (expr -> lambda_expr .)
    RBRACKET        reduce using rule 84 (expr -> lambda_expr .)
    RBRACE          reduce using rule 84 (expr -> lambda_expr .)
    CASE            reduce using rule 84 (expr -> lambda_expr .)
    OTHERWISE       reduce using rule 84 (expr -> lambda_expr .)
    END_STMT        reduce using rule 84 (expr -> lambda_expr .)
    error           reduce using rule 84 (expr -> lambda_expr .)


state 28

    (9) stmt -> continue_stmt .

    END_STMT        reduce using rule 9 (stmt -> continue_stmt .)
    CONTINUE        reduce using rule 9 (stmt -> continue_stmt .)
    BREAK           reduce using rule 9 (stmt -> continue_stmt .)
    GLOBAL          reduce using rule 9 (stmt -> continue_stmt .)
    FOR             reduce using rule 9 (stmt -> continue_stmt .)
    IF              reduce using rule 9 (stmt -> continue_stmt .)
    SEMI            reduce using rule 9 (stmt -> continue_stmt .)
    COMMA           reduce using rule 9 (stmt -> continue_stmt .)
    RETURN          reduce using rule 9 (stmt -> continue_stmt .)
    SWITCH          reduce using rule 9 (stmt -> continue_stmt .)
    TRY             reduce using rule 9 (stmt -> continue_stmt .)
    WHILE           reduce using rule 9 (stmt -> continue_stmt .)
    NE              reduce using rule 9 (stmt -> continue_stmt .)
    LPAREN          reduce using rule 9 (stmt -> continue_stmt .)
    IDENT           reduce using rule 9 (stmt -> continue_stmt .)
    END_EXPR        reduce using rule 9 (stmt -> continue_stmt .)
    NUMBER          reduce using rule 9 (stmt -> continue_stmt .)
    STRING          reduce using rule 9 (stmt -> continue_stmt .)
    COLON           reduce using rule 9 (stmt -> continue_stmt .)
    LBRACKET        reduce using rule 9 (stmt -> continue_stmt .)
    LBRACE          reduce using rule 9 (stmt -> continue_stmt .)
    MINUS           reduce using rule 9 (stmt -> continue_stmt .)
    PLUS            reduce using rule 9 (stmt -> continue_stmt .)
    NEG             reduce using rule 9 (stmt -> continue_stmt .)
    HANDLE          reduce using rule 9 (stmt -> continue_stmt .)
    ELSE            reduce using rule 9 (stmt -> continue_stmt .)
    ELSEIF          reduce using rule 9 (stmt -> continue_stmt .)
    CATCH           reduce using rule 9 (stmt -> continue_stmt .)
    FUNCTION        reduce using rule 9 (stmt -> continue_stmt .)
    $end            reduce using rule 9 (stmt -> continue_stmt .)
    CASE            reduce using rule 9 (stmt -> continue_stmt .)
    OTHERWISE       reduce using rule 9 (stmt -> continue_stmt .)


state 29

    (0) S' -> top .
    (3) top -> top . func_decl stmt_list_opt
    (4) top -> top . func_decl stmt_list END_STMT semi_opt
    (41) func_decl -> . FUNCTION ident args_opt SEMI
    (42) func_decl -> . FUNCTION ret = ident args_opt SEMI

    FUNCTION        shift and go to state 74

    func_decl                      shift and go to state 73

state 30

    (85) expr -> NE .

    RPAREN          reduce using rule 85 (expr -> NE .)
    FIELD           reduce using rule 85 (expr -> NE .)
    TRANSPOSE       reduce using rule 85 (expr -> NE .)
    LBRACE          reduce using rule 85 (expr -> NE .)
    LPAREN          reduce using rule 85 (expr -> NE .)
    AND             reduce using rule 85 (expr -> NE .)
    ANDAND          reduce using rule 85 (expr -> NE .)
    BACKSLASH       reduce using rule 85 (expr -> NE .)
    COLON           reduce using rule 85 (expr -> NE .)
    DIV             reduce using rule 85 (expr -> NE .)
    DOT             reduce using rule 85 (expr -> NE .)
    DOTDIV          reduce using rule 85 (expr -> NE .)
    DOTEXP          reduce using rule 85 (expr -> NE .)
    DOTMUL          reduce using rule 85 (expr -> NE .)
    EQ              reduce using rule 85 (expr -> NE .)
    EXP             reduce using rule 85 (expr -> NE .)
    GE              reduce using rule 85 (expr -> NE .)
    GT              reduce using rule 85 (expr -> NE .)
    LE              reduce using rule 85 (expr -> NE .)
    LT              reduce using rule 85 (expr -> NE .)
    MINUS           reduce using rule 85 (expr -> NE .)
    MUL             reduce using rule 85 (expr -> NE .)
    NE              reduce using rule 85 (expr -> NE .)
    OR              reduce using rule 85 (expr -> NE .)
    OROR            reduce using rule 85 (expr -> NE .)
    PLUS            reduce using rule 85 (expr -> NE .)
    =               reduce using rule 85 (expr -> NE .)
    COMMA           reduce using rule 85 (expr -> NE .)
    SEMI            reduce using rule 85 (expr -> NE .)
    RBRACKET        reduce using rule 85 (expr -> NE .)
    RBRACE          reduce using rule 85 (expr -> NE .)
    CASE            reduce using rule 85 (expr -> NE .)
    OTHERWISE       reduce using rule 85 (expr -> NE .)
    END_STMT        reduce using rule 85 (expr -> NE .)
    error           reduce using rule 85 (expr -> NE .)


state 31

    (34) switch_stmt -> SWITCH . expr semi_opt case_list END_STMT
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 75
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 32

    (27) command -> ident . args SEMI
    (75) expr -> ident .
    (25) args -> . arg1
    (26) args -> . args arg1
    (21) arg1 -> . STRING
    (22) arg1 -> . NUMBER
    (23) arg1 -> . IDENT
    (24) arg1 -> . GLOBAL

    =               reduce using rule 75 (expr -> ident .)
    FIELD           reduce using rule 75 (expr -> ident .)
    TRANSPOSE       reduce using rule 75 (expr -> ident .)
    LBRACE          reduce using rule 75 (expr -> ident .)
    LPAREN          reduce using rule 75 (expr -> ident .)
    AND             reduce using rule 75 (expr -> ident .)
    ANDAND          reduce using rule 75 (expr -> ident .)
    BACKSLASH       reduce using rule 75 (expr -> ident .)
    COLON           reduce using rule 75 (expr -> ident .)
    DIV             reduce using rule 75 (expr -> ident .)
    DOT             reduce using rule 75 (expr -> ident .)
    DOTDIV          reduce using rule 75 (expr -> ident .)
    DOTEXP          reduce using rule 75 (expr -> ident .)
    DOTMUL          reduce using rule 75 (expr -> ident .)
    EQ              reduce using rule 75 (expr -> ident .)
    EXP             reduce using rule 75 (expr -> ident .)
    GE              reduce using rule 75 (expr -> ident .)
    GT              reduce using rule 75 (expr -> ident .)
    LE              reduce using rule 75 (expr -> ident .)
    LT              reduce using rule 75 (expr -> ident .)
    MINUS           reduce using rule 75 (expr -> ident .)
    MUL             reduce using rule 75 (expr -> ident .)
    NE              reduce using rule 75 (expr -> ident .)
    OR              reduce using rule 75 (expr -> ident .)
    OROR            reduce using rule 75 (expr -> ident .)
    PLUS            reduce using rule 75 (expr -> ident .)
    COMMA           reduce using rule 75 (expr -> ident .)
    SEMI            reduce using rule 75 (expr -> ident .)
    STRING          shift and go to state 76
    NUMBER          shift and go to state 79
    IDENT           shift and go to state 80
    GLOBAL          shift and go to state 81

    arg1                           shift and go to state 77
    args                           shift and go to state 78

state 33

    (72) let -> expr . = expr SEMI
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr
    (61) exprs -> expr .

    =               shift and go to state 98
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    AND             shift and go to state 105
    ANDAND          shift and go to state 99
    BACKSLASH       shift and go to state 94
    COLON           shift and go to state 96
    DIV             shift and go to state 87
    DOT             shift and go to state 90
    DOTDIV          shift and go to state 82
    DOTEXP          shift and go to state 104
    DOTMUL          shift and go to state 88
    EQ              shift and go to state 92
    EXP             shift and go to state 85
    GE              shift and go to state 102
    GT              shift and go to state 100
    LE              shift and go to state 91
    LT              shift and go to state 95
    MINUS           shift and go to state 89
    MUL             shift and go to state 86
    NE              shift and go to state 84
    OR              shift and go to state 107
    OROR            shift and go to state 83
    PLUS            shift and go to state 97
    COMMA           reduce using rule 61 (exprs -> expr .)
    SEMI            reduce using rule 61 (exprs -> expr .)


state 34

    (19) stmt -> try_catch .

    END_STMT        reduce using rule 19 (stmt -> try_catch .)
    CONTINUE        reduce using rule 19 (stmt -> try_catch .)
    BREAK           reduce using rule 19 (stmt -> try_catch .)
    GLOBAL          reduce using rule 19 (stmt -> try_catch .)
    FOR             reduce using rule 19 (stmt -> try_catch .)
    IF              reduce using rule 19 (stmt -> try_catch .)
    SEMI            reduce using rule 19 (stmt -> try_catch .)
    COMMA           reduce using rule 19 (stmt -> try_catch .)
    RETURN          reduce using rule 19 (stmt -> try_catch .)
    SWITCH          reduce using rule 19 (stmt -> try_catch .)
    TRY             reduce using rule 19 (stmt -> try_catch .)
    WHILE           reduce using rule 19 (stmt -> try_catch .)
    NE              reduce using rule 19 (stmt -> try_catch .)
    LPAREN          reduce using rule 19 (stmt -> try_catch .)
    IDENT           reduce using rule 19 (stmt -> try_catch .)
    END_EXPR        reduce using rule 19 (stmt -> try_catch .)
    NUMBER          reduce using rule 19 (stmt -> try_catch .)
    STRING          reduce using rule 19 (stmt -> try_catch .)
    COLON           reduce using rule 19 (stmt -> try_catch .)
    LBRACKET        reduce using rule 19 (stmt -> try_catch .)
    LBRACE          reduce using rule 19 (stmt -> try_catch .)
    MINUS           reduce using rule 19 (stmt -> try_catch .)
    PLUS            reduce using rule 19 (stmt -> try_catch .)
    NEG             reduce using rule 19 (stmt -> try_catch .)
    HANDLE          reduce using rule 19 (stmt -> try_catch .)
    ELSE            reduce using rule 19 (stmt -> try_catch .)
    ELSEIF          reduce using rule 19 (stmt -> try_catch .)
    CATCH           reduce using rule 19 (stmt -> try_catch .)
    FUNCTION        reduce using rule 19 (stmt -> try_catch .)
    $end            reduce using rule 19 (stmt -> try_catch .)
    CASE            reduce using rule 19 (stmt -> try_catch .)
    OTHERWISE       reduce using rule 19 (stmt -> try_catch .)


state 35

    (33) break_stmt -> BREAK . SEMI

    SEMI            shift and go to state 108


state 36

    (90) number -> NUMBER .

    =               reduce using rule 90 (number -> NUMBER .)
    FIELD           reduce using rule 90 (number -> NUMBER .)
    TRANSPOSE       reduce using rule 90 (number -> NUMBER .)
    LBRACE          reduce using rule 90 (number -> NUMBER .)
    LPAREN          reduce using rule 90 (number -> NUMBER .)
    AND             reduce using rule 90 (number -> NUMBER .)
    ANDAND          reduce using rule 90 (number -> NUMBER .)
    BACKSLASH       reduce using rule 90 (number -> NUMBER .)
    COLON           reduce using rule 90 (number -> NUMBER .)
    DIV             reduce using rule 90 (number -> NUMBER .)
    DOT             reduce using rule 90 (number -> NUMBER .)
    DOTDIV          reduce using rule 90 (number -> NUMBER .)
    DOTEXP          reduce using rule 90 (number -> NUMBER .)
    DOTMUL          reduce using rule 90 (number -> NUMBER .)
    EQ              reduce using rule 90 (number -> NUMBER .)
    EXP             reduce using rule 90 (number -> NUMBER .)
    GE              reduce using rule 90 (number -> NUMBER .)
    GT              reduce using rule 90 (number -> NUMBER .)
    LE              reduce using rule 90 (number -> NUMBER .)
    LT              reduce using rule 90 (number -> NUMBER .)
    MINUS           reduce using rule 90 (number -> NUMBER .)
    MUL             reduce using rule 90 (number -> NUMBER .)
    NE              reduce using rule 90 (number -> NUMBER .)
    OR              reduce using rule 90 (number -> NUMBER .)
    OROR            reduce using rule 90 (number -> NUMBER .)
    PLUS            reduce using rule 90 (number -> NUMBER .)
    COMMA           reduce using rule 90 (number -> NUMBER .)
    SEMI            reduce using rule 90 (number -> NUMBER .)
    RBRACKET        reduce using rule 90 (number -> NUMBER .)
    RBRACE          reduce using rule 90 (number -> NUMBER .)
    CASE            reduce using rule 90 (number -> NUMBER .)
    OTHERWISE       reduce using rule 90 (number -> NUMBER .)
    END_STMT        reduce using rule 90 (number -> NUMBER .)
    RPAREN          reduce using rule 90 (number -> NUMBER .)
    error           reduce using rule 90 (number -> NUMBER .)


state 37

    (97) expr1 -> HANDLE . ident
    (88) lambda_expr -> HANDLE . lambda_args expr
    (89) ident -> . IDENT
    (86) lambda_args -> . LPAREN RPAREN
    (87) lambda_args -> . LPAREN arg_list RPAREN

    IDENT           shift and go to state 12
    LPAREN          shift and go to state 111

    lambda_args                    shift and go to state 109
    ident                          shift and go to state 110

state 38

    (78) expr -> string .

    RPAREN          reduce using rule 78 (expr -> string .)
    FIELD           reduce using rule 78 (expr -> string .)
    TRANSPOSE       reduce using rule 78 (expr -> string .)
    LBRACE          reduce using rule 78 (expr -> string .)
    LPAREN          reduce using rule 78 (expr -> string .)
    AND             reduce using rule 78 (expr -> string .)
    ANDAND          reduce using rule 78 (expr -> string .)
    BACKSLASH       reduce using rule 78 (expr -> string .)
    COLON           reduce using rule 78 (expr -> string .)
    DIV             reduce using rule 78 (expr -> string .)
    DOT             reduce using rule 78 (expr -> string .)
    DOTDIV          reduce using rule 78 (expr -> string .)
    DOTEXP          reduce using rule 78 (expr -> string .)
    DOTMUL          reduce using rule 78 (expr -> string .)
    EQ              reduce using rule 78 (expr -> string .)
    EXP             reduce using rule 78 (expr -> string .)
    GE              reduce using rule 78 (expr -> string .)
    GT              reduce using rule 78 (expr -> string .)
    LE              reduce using rule 78 (expr -> string .)
    LT              reduce using rule 78 (expr -> string .)
    MINUS           reduce using rule 78 (expr -> string .)
    MUL             reduce using rule 78 (expr -> string .)
    NE              reduce using rule 78 (expr -> string .)
    OR              reduce using rule 78 (expr -> string .)
    OROR            reduce using rule 78 (expr -> string .)
    PLUS            reduce using rule 78 (expr -> string .)
    =               reduce using rule 78 (expr -> string .)
    COMMA           reduce using rule 78 (expr -> string .)
    SEMI            reduce using rule 78 (expr -> string .)
    RBRACKET        reduce using rule 78 (expr -> string .)
    RBRACE          reduce using rule 78 (expr -> string .)
    CASE            reduce using rule 78 (expr -> string .)
    OTHERWISE       reduce using rule 78 (expr -> string .)
    END_STMT        reduce using rule 78 (expr -> string .)
    error           reduce using rule 78 (expr -> string .)


state 39

    (10) stmt -> break_stmt .

    END_STMT        reduce using rule 10 (stmt -> break_stmt .)
    CONTINUE        reduce using rule 10 (stmt -> break_stmt .)
    BREAK           reduce using rule 10 (stmt -> break_stmt .)
    GLOBAL          reduce using rule 10 (stmt -> break_stmt .)
    FOR             reduce using rule 10 (stmt -> break_stmt .)
    IF              reduce using rule 10 (stmt -> break_stmt .)
    SEMI            reduce using rule 10 (stmt -> break_stmt .)
    COMMA           reduce using rule 10 (stmt -> break_stmt .)
    RETURN          reduce using rule 10 (stmt -> break_stmt .)
    SWITCH          reduce using rule 10 (stmt -> break_stmt .)
    TRY             reduce using rule 10 (stmt -> break_stmt .)
    WHILE           reduce using rule 10 (stmt -> break_stmt .)
    NE              reduce using rule 10 (stmt -> break_stmt .)
    LPAREN          reduce using rule 10 (stmt -> break_stmt .)
    IDENT           reduce using rule 10 (stmt -> break_stmt .)
    END_EXPR        reduce using rule 10 (stmt -> break_stmt .)
    NUMBER          reduce using rule 10 (stmt -> break_stmt .)
    STRING          reduce using rule 10 (stmt -> break_stmt .)
    COLON           reduce using rule 10 (stmt -> break_stmt .)
    LBRACKET        reduce using rule 10 (stmt -> break_stmt .)
    LBRACE          reduce using rule 10 (stmt -> break_stmt .)
    MINUS           reduce using rule 10 (stmt -> break_stmt .)
    PLUS            reduce using rule 10 (stmt -> break_stmt .)
    NEG             reduce using rule 10 (stmt -> break_stmt .)
    HANDLE          reduce using rule 10 (stmt -> break_stmt .)
    ELSE            reduce using rule 10 (stmt -> break_stmt .)
    ELSEIF          reduce using rule 10 (stmt -> break_stmt .)
    CATCH           reduce using rule 10 (stmt -> break_stmt .)
    FUNCTION        reduce using rule 10 (stmt -> break_stmt .)
    $end            reduce using rule 10 (stmt -> break_stmt .)
    CASE            reduce using rule 10 (stmt -> break_stmt .)
    OTHERWISE       reduce using rule 10 (stmt -> break_stmt .)


state 40

    (76) expr -> end .

    RPAREN          reduce using rule 76 (expr -> end .)
    FIELD           reduce using rule 76 (expr -> end .)
    TRANSPOSE       reduce using rule 76 (expr -> end .)
    LBRACE          reduce using rule 76 (expr -> end .)
    LPAREN          reduce using rule 76 (expr -> end .)
    AND             reduce using rule 76 (expr -> end .)
    ANDAND          reduce using rule 76 (expr -> end .)
    BACKSLASH       reduce using rule 76 (expr -> end .)
    COLON           reduce using rule 76 (expr -> end .)
    DIV             reduce using rule 76 (expr -> end .)
    DOT             reduce using rule 76 (expr -> end .)
    DOTDIV          reduce using rule 76 (expr -> end .)
    DOTEXP          reduce using rule 76 (expr -> end .)
    DOTMUL          reduce using rule 76 (expr -> end .)
    EQ              reduce using rule 76 (expr -> end .)
    EXP             reduce using rule 76 (expr -> end .)
    GE              reduce using rule 76 (expr -> end .)
    GT              reduce using rule 76 (expr -> end .)
    LE              reduce using rule 76 (expr -> end .)
    LT              reduce using rule 76 (expr -> end .)
    MINUS           reduce using rule 76 (expr -> end .)
    MUL             reduce using rule 76 (expr -> end .)
    NE              reduce using rule 76 (expr -> end .)
    OR              reduce using rule 76 (expr -> end .)
    OROR            reduce using rule 76 (expr -> end .)
    PLUS            reduce using rule 76 (expr -> end .)
    =               reduce using rule 76 (expr -> end .)
    COMMA           reduce using rule 76 (expr -> end .)
    SEMI            reduce using rule 76 (expr -> end .)
    RBRACKET        reduce using rule 76 (expr -> end .)
    RBRACE          reduce using rule 76 (expr -> end .)
    CASE            reduce using rule 76 (expr -> end .)
    OTHERWISE       reduce using rule 76 (expr -> end .)
    END_STMT        reduce using rule 76 (expr -> end .)
    error           reduce using rule 76 (expr -> end .)


state 41

    (39) null_stmt -> SEMI .

    CONTINUE        reduce using rule 39 (null_stmt -> SEMI .)
    BREAK           reduce using rule 39 (null_stmt -> SEMI .)
    GLOBAL          reduce using rule 39 (null_stmt -> SEMI .)
    FOR             reduce using rule 39 (null_stmt -> SEMI .)
    IF              reduce using rule 39 (null_stmt -> SEMI .)
    SEMI            reduce using rule 39 (null_stmt -> SEMI .)
    COMMA           reduce using rule 39 (null_stmt -> SEMI .)
    RETURN          reduce using rule 39 (null_stmt -> SEMI .)
    SWITCH          reduce using rule 39 (null_stmt -> SEMI .)
    TRY             reduce using rule 39 (null_stmt -> SEMI .)
    WHILE           reduce using rule 39 (null_stmt -> SEMI .)
    NE              reduce using rule 39 (null_stmt -> SEMI .)
    LPAREN          reduce using rule 39 (null_stmt -> SEMI .)
    IDENT           reduce using rule 39 (null_stmt -> SEMI .)
    END_EXPR        reduce using rule 39 (null_stmt -> SEMI .)
    NUMBER          reduce using rule 39 (null_stmt -> SEMI .)
    STRING          reduce using rule 39 (null_stmt -> SEMI .)
    COLON           reduce using rule 39 (null_stmt -> SEMI .)
    LBRACKET        reduce using rule 39 (null_stmt -> SEMI .)
    LBRACE          reduce using rule 39 (null_stmt -> SEMI .)
    MINUS           reduce using rule 39 (null_stmt -> SEMI .)
    PLUS            reduce using rule 39 (null_stmt -> SEMI .)
    NEG             reduce using rule 39 (null_stmt -> SEMI .)
    HANDLE          reduce using rule 39 (null_stmt -> SEMI .)
    ELSE            reduce using rule 39 (null_stmt -> SEMI .)
    ELSEIF          reduce using rule 39 (null_stmt -> SEMI .)
    END_STMT        reduce using rule 39 (null_stmt -> SEMI .)
    CASE            reduce using rule 39 (null_stmt -> SEMI .)
    OTHERWISE       reduce using rule 39 (null_stmt -> SEMI .)
    CATCH           reduce using rule 39 (null_stmt -> SEMI .)
    FUNCTION        reduce using rule 39 (null_stmt -> SEMI .)
    $end            reduce using rule 39 (null_stmt -> SEMI .)


state 42

    (83) expr -> expr1 .

    RPAREN          reduce using rule 83 (expr -> expr1 .)
    FIELD           reduce using rule 83 (expr -> expr1 .)
    TRANSPOSE       reduce using rule 83 (expr -> expr1 .)
    LBRACE          reduce using rule 83 (expr -> expr1 .)
    LPAREN          reduce using rule 83 (expr -> expr1 .)
    AND             reduce using rule 83 (expr -> expr1 .)
    ANDAND          reduce using rule 83 (expr -> expr1 .)
    BACKSLASH       reduce using rule 83 (expr -> expr1 .)
    COLON           reduce using rule 83 (expr -> expr1 .)
    DIV             reduce using rule 83 (expr -> expr1 .)
    DOT             reduce using rule 83 (expr -> expr1 .)
    DOTDIV          reduce using rule 83 (expr -> expr1 .)
    DOTEXP          reduce using rule 83 (expr -> expr1 .)
    DOTMUL          reduce using rule 83 (expr -> expr1 .)
    EQ              reduce using rule 83 (expr -> expr1 .)
    EXP             reduce using rule 83 (expr -> expr1 .)
    GE              reduce using rule 83 (expr -> expr1 .)
    GT              reduce using rule 83 (expr -> expr1 .)
    LE              reduce using rule 83 (expr -> expr1 .)
    LT              reduce using rule 83 (expr -> expr1 .)
    MINUS           reduce using rule 83 (expr -> expr1 .)
    MUL             reduce using rule 83 (expr -> expr1 .)
    NE              reduce using rule 83 (expr -> expr1 .)
    OR              reduce using rule 83 (expr -> expr1 .)
    OROR            reduce using rule 83 (expr -> expr1 .)
    PLUS            reduce using rule 83 (expr -> expr1 .)
    =               reduce using rule 83 (expr -> expr1 .)
    COMMA           reduce using rule 83 (expr -> expr1 .)
    SEMI            reduce using rule 83 (expr -> expr1 .)
    RBRACKET        reduce using rule 83 (expr -> expr1 .)
    RBRACE          reduce using rule 83 (expr -> expr1 .)
    CASE            reduce using rule 83 (expr -> expr1 .)
    OTHERWISE       reduce using rule 83 (expr -> expr1 .)
    END_STMT        reduce using rule 83 (expr -> expr1 .)
    error           reduce using rule 83 (expr -> expr1 .)


state 43

    (40) null_stmt -> COMMA .

    CONTINUE        reduce using rule 40 (null_stmt -> COMMA .)
    BREAK           reduce using rule 40 (null_stmt -> COMMA .)
    GLOBAL          reduce using rule 40 (null_stmt -> COMMA .)
    FOR             reduce using rule 40 (null_stmt -> COMMA .)
    IF              reduce using rule 40 (null_stmt -> COMMA .)
    SEMI            reduce using rule 40 (null_stmt -> COMMA .)
    COMMA           reduce using rule 40 (null_stmt -> COMMA .)
    RETURN          reduce using rule 40 (null_stmt -> COMMA .)
    SWITCH          reduce using rule 40 (null_stmt -> COMMA .)
    TRY             reduce using rule 40 (null_stmt -> COMMA .)
    WHILE           reduce using rule 40 (null_stmt -> COMMA .)
    NE              reduce using rule 40 (null_stmt -> COMMA .)
    LPAREN          reduce using rule 40 (null_stmt -> COMMA .)
    IDENT           reduce using rule 40 (null_stmt -> COMMA .)
    END_EXPR        reduce using rule 40 (null_stmt -> COMMA .)
    NUMBER          reduce using rule 40 (null_stmt -> COMMA .)
    STRING          reduce using rule 40 (null_stmt -> COMMA .)
    COLON           reduce using rule 40 (null_stmt -> COMMA .)
    LBRACKET        reduce using rule 40 (null_stmt -> COMMA .)
    LBRACE          reduce using rule 40 (null_stmt -> COMMA .)
    MINUS           reduce using rule 40 (null_stmt -> COMMA .)
    PLUS            reduce using rule 40 (null_stmt -> COMMA .)
    NEG             reduce using rule 40 (null_stmt -> COMMA .)
    HANDLE          reduce using rule 40 (null_stmt -> COMMA .)
    ELSE            reduce using rule 40 (null_stmt -> COMMA .)
    ELSEIF          reduce using rule 40 (null_stmt -> COMMA .)
    END_STMT        reduce using rule 40 (null_stmt -> COMMA .)
    CASE            reduce using rule 40 (null_stmt -> COMMA .)
    OTHERWISE       reduce using rule 40 (null_stmt -> COMMA .)
    CATCH           reduce using rule 40 (null_stmt -> COMMA .)
    FUNCTION        reduce using rule 40 (null_stmt -> COMMA .)
    $end            reduce using rule 40 (null_stmt -> COMMA .)


state 44

    (12) stmt -> global_stmt .

    END_STMT        reduce using rule 12 (stmt -> global_stmt .)
    CONTINUE        reduce using rule 12 (stmt -> global_stmt .)
    BREAK           reduce using rule 12 (stmt -> global_stmt .)
    GLOBAL          reduce using rule 12 (stmt -> global_stmt .)
    FOR             reduce using rule 12 (stmt -> global_stmt .)
    IF              reduce using rule 12 (stmt -> global_stmt .)
    SEMI            reduce using rule 12 (stmt -> global_stmt .)
    COMMA           reduce using rule 12 (stmt -> global_stmt .)
    RETURN          reduce using rule 12 (stmt -> global_stmt .)
    SWITCH          reduce using rule 12 (stmt -> global_stmt .)
    TRY             reduce using rule 12 (stmt -> global_stmt .)
    WHILE           reduce using rule 12 (stmt -> global_stmt .)
    NE              reduce using rule 12 (stmt -> global_stmt .)
    LPAREN          reduce using rule 12 (stmt -> global_stmt .)
    IDENT           reduce using rule 12 (stmt -> global_stmt .)
    END_EXPR        reduce using rule 12 (stmt -> global_stmt .)
    NUMBER          reduce using rule 12 (stmt -> global_stmt .)
    STRING          reduce using rule 12 (stmt -> global_stmt .)
    COLON           reduce using rule 12 (stmt -> global_stmt .)
    LBRACKET        reduce using rule 12 (stmt -> global_stmt .)
    LBRACE          reduce using rule 12 (stmt -> global_stmt .)
    MINUS           reduce using rule 12 (stmt -> global_stmt .)
    PLUS            reduce using rule 12 (stmt -> global_stmt .)
    NEG             reduce using rule 12 (stmt -> global_stmt .)
    HANDLE          reduce using rule 12 (stmt -> global_stmt .)
    ELSE            reduce using rule 12 (stmt -> global_stmt .)
    ELSEIF          reduce using rule 12 (stmt -> global_stmt .)
    CATCH           reduce using rule 12 (stmt -> global_stmt .)
    FUNCTION        reduce using rule 12 (stmt -> global_stmt .)
    $end            reduce using rule 12 (stmt -> global_stmt .)
    CASE            reduce using rule 12 (stmt -> global_stmt .)
    OTHERWISE       reduce using rule 12 (stmt -> global_stmt .)


state 45

    (92) string -> STRING .

    FIELD           reduce using rule 92 (string -> STRING .)
    TRANSPOSE       reduce using rule 92 (string -> STRING .)
    LBRACE          reduce using rule 92 (string -> STRING .)
    LPAREN          reduce using rule 92 (string -> STRING .)
    AND             reduce using rule 92 (string -> STRING .)
    ANDAND          reduce using rule 92 (string -> STRING .)
    BACKSLASH       reduce using rule 92 (string -> STRING .)
    COLON           reduce using rule 92 (string -> STRING .)
    DIV             reduce using rule 92 (string -> STRING .)
    DOT             reduce using rule 92 (string -> STRING .)
    DOTDIV          reduce using rule 92 (string -> STRING .)
    DOTEXP          reduce using rule 92 (string -> STRING .)
    DOTMUL          reduce using rule 92 (string -> STRING .)
    EQ              reduce using rule 92 (string -> STRING .)
    EXP             reduce using rule 92 (string -> STRING .)
    GE              reduce using rule 92 (string -> STRING .)
    GT              reduce using rule 92 (string -> STRING .)
    LE              reduce using rule 92 (string -> STRING .)
    LT              reduce using rule 92 (string -> STRING .)
    MINUS           reduce using rule 92 (string -> STRING .)
    MUL             reduce using rule 92 (string -> STRING .)
    NE              reduce using rule 92 (string -> STRING .)
    OR              reduce using rule 92 (string -> STRING .)
    OROR            reduce using rule 92 (string -> STRING .)
    PLUS            reduce using rule 92 (string -> STRING .)
    COMMA           reduce using rule 92 (string -> STRING .)
    RBRACE          reduce using rule 92 (string -> STRING .)
    =               reduce using rule 92 (string -> STRING .)
    SEMI            reduce using rule 92 (string -> STRING .)
    RBRACKET        reduce using rule 92 (string -> STRING .)
    CASE            reduce using rule 92 (string -> STRING .)
    OTHERWISE       reduce using rule 92 (string -> STRING .)
    END_STMT        reduce using rule 92 (string -> STRING .)
    RPAREN          reduce using rule 92 (string -> STRING .)
    error           reduce using rule 92 (string -> STRING .)


state 46

    (105) expr -> LPAREN . expr RPAREN
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 112
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 47

    (67) if_stmt -> IF . expr sep stmt_list_opt elseif_stmt END_STMT
    (68) if_stmt -> IF . expr error stmt_list_opt elseif_stmt END_STMT
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    expr2                          shift and go to state 3
    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 113
    number                         shift and go to state 23
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 48

    (2) top -> stmt_list .
    (56) stmt_list -> stmt_list . stmt
    (8) stmt -> . let
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (72) let -> . expr = expr SEMI
    (32) continue_stmt -> . CONTINUE SEMI
    (33) break_stmt -> . BREAK SEMI
    (63) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (27) command -> . ident args SEMI
    (73) for_stmt -> . FOR ident = expr SEMI stmt_list END_STMT
    (74) for_stmt -> . FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT
    (67) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (68) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (39) null_stmt -> . SEMI
    (40) null_stmt -> . COMMA
    (31) return_stmt -> . RETURN SEMI
    (34) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (38) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (64) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (59) expr_list -> . exprs
    (60) expr_list -> . exprs COMMA
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr
    (61) exprs -> . expr
    (62) exprs -> . exprs COMMA expr

    FUNCTION        reduce using rule 2 (top -> stmt_list .)
    $end            reduce using rule 2 (top -> stmt_list .)
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 35
    GLOBAL          shift and go to state 22
    FOR             shift and go to state 13
    IF              shift and go to state 47
    SEMI            shift and go to state 41
    COMMA           shift and go to state 43
    RETURN          shift and go to state 8
    SWITCH          shift and go to state 31
    TRY             shift and go to state 15
    WHILE           shift and go to state 24
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    expr_list                      shift and go to state 9
    number                         shift and go to state 23
    return_stmt                    shift and go to state 25
    switch_stmt                    shift and go to state 26
    break_stmt                     shift and go to state 39
    lambda_expr                    shift and go to state 27
    end                            shift and go to state 40
    matrix                         shift and go to state 10
    continue_stmt                  shift and go to state 28
    cellarray                      shift and go to state 18
    expr2                          shift and go to state 3
    expr1                          shift and go to state 42
    global_stmt                    shift and go to state 44
    string                         shift and go to state 38
    colon                          shift and go to state 7
    stmt                           shift and go to state 114
    for_stmt                       shift and go to state 49
    let                            shift and go to state 16
    expr_stmt                      shift and go to state 5
    ident                          shift and go to state 32
    if_stmt                        shift and go to state 6
    expr                           shift and go to state 33
    try_catch                      shift and go to state 34
    exprs                          shift and go to state 50
    while_stmt                     shift and go to state 51
    command                        shift and go to state 52
    null_stmt                      shift and go to state 53

state 49

    (14) stmt -> for_stmt .

    END_STMT        reduce using rule 14 (stmt -> for_stmt .)
    CONTINUE        reduce using rule 14 (stmt -> for_stmt .)
    BREAK           reduce using rule 14 (stmt -> for_stmt .)
    GLOBAL          reduce using rule 14 (stmt -> for_stmt .)
    FOR             reduce using rule 14 (stmt -> for_stmt .)
    IF              reduce using rule 14 (stmt -> for_stmt .)
    SEMI            reduce using rule 14 (stmt -> for_stmt .)
    COMMA           reduce using rule 14 (stmt -> for_stmt .)
    RETURN          reduce using rule 14 (stmt -> for_stmt .)
    SWITCH          reduce using rule 14 (stmt -> for_stmt .)
    TRY             reduce using rule 14 (stmt -> for_stmt .)
    WHILE           reduce using rule 14 (stmt -> for_stmt .)
    NE              reduce using rule 14 (stmt -> for_stmt .)
    LPAREN          reduce using rule 14 (stmt -> for_stmt .)
    IDENT           reduce using rule 14 (stmt -> for_stmt .)
    END_EXPR        reduce using rule 14 (stmt -> for_stmt .)
    NUMBER          reduce using rule 14 (stmt -> for_stmt .)
    STRING          reduce using rule 14 (stmt -> for_stmt .)
    COLON           reduce using rule 14 (stmt -> for_stmt .)
    LBRACKET        reduce using rule 14 (stmt -> for_stmt .)
    LBRACE          reduce using rule 14 (stmt -> for_stmt .)
    MINUS           reduce using rule 14 (stmt -> for_stmt .)
    PLUS            reduce using rule 14 (stmt -> for_stmt .)
    NEG             reduce using rule 14 (stmt -> for_stmt .)
    HANDLE          reduce using rule 14 (stmt -> for_stmt .)
    ELSE            reduce using rule 14 (stmt -> for_stmt .)
    ELSEIF          reduce using rule 14 (stmt -> for_stmt .)
    CATCH           reduce using rule 14 (stmt -> for_stmt .)
    FUNCTION        reduce using rule 14 (stmt -> for_stmt .)
    $end            reduce using rule 14 (stmt -> for_stmt .)
    CASE            reduce using rule 14 (stmt -> for_stmt .)
    OTHERWISE       reduce using rule 14 (stmt -> for_stmt .)


state 50

    (59) expr_list -> exprs .
    (60) expr_list -> exprs . COMMA
    (62) exprs -> exprs . COMMA expr

    SEMI            reduce using rule 59 (expr_list -> exprs .)
    RPAREN          reduce using rule 59 (expr_list -> exprs .)
    RBRACE          reduce using rule 59 (expr_list -> exprs .)
    RBRACKET        reduce using rule 59 (expr_list -> exprs .)
    COMMA           shift and go to state 115


state 51

    (20) stmt -> while_stmt .

    END_STMT        reduce using rule 20 (stmt -> while_stmt .)
    CONTINUE        reduce using rule 20 (stmt -> while_stmt .)
    BREAK           reduce using rule 20 (stmt -> while_stmt .)
    GLOBAL          reduce using rule 20 (stmt -> while_stmt .)
    FOR             reduce using rule 20 (stmt -> while_stmt .)
    IF              reduce using rule 20 (stmt -> while_stmt .)
    SEMI            reduce using rule 20 (stmt -> while_stmt .)
    COMMA           reduce using rule 20 (stmt -> while_stmt .)
    RETURN          reduce using rule 20 (stmt -> while_stmt .)
    SWITCH          reduce using rule 20 (stmt -> while_stmt .)
    TRY             reduce using rule 20 (stmt -> while_stmt .)
    WHILE           reduce using rule 20 (stmt -> while_stmt .)
    NE              reduce using rule 20 (stmt -> while_stmt .)
    LPAREN          reduce using rule 20 (stmt -> while_stmt .)
    IDENT           reduce using rule 20 (stmt -> while_stmt .)
    END_EXPR        reduce using rule 20 (stmt -> while_stmt .)
    NUMBER          reduce using rule 20 (stmt -> while_stmt .)
    STRING          reduce using rule 20 (stmt -> while_stmt .)
    COLON           reduce using rule 20 (stmt -> while_stmt .)
    LBRACKET        reduce using rule 20 (stmt -> while_stmt .)
    LBRACE          reduce using rule 20 (stmt -> while_stmt .)
    MINUS           reduce using rule 20 (stmt -> while_stmt .)
    PLUS            reduce using rule 20 (stmt -> while_stmt .)
    NEG             reduce using rule 20 (stmt -> while_stmt .)
    HANDLE          reduce using rule 20 (stmt -> while_stmt .)
    ELSE            reduce using rule 20 (stmt -> while_stmt .)
    ELSEIF          reduce using rule 20 (stmt -> while_stmt .)
    CATCH           reduce using rule 20 (stmt -> while_stmt .)
    FUNCTION        reduce using rule 20 (stmt -> while_stmt .)
    $end            reduce using rule 20 (stmt -> while_stmt .)
    CASE            reduce using rule 20 (stmt -> while_stmt .)
    OTHERWISE       reduce using rule 20 (stmt -> while_stmt .)


state 52

    (13) stmt -> command .

    END_STMT        reduce using rule 13 (stmt -> command .)
    CONTINUE        reduce using rule 13 (stmt -> command .)
    BREAK           reduce using rule 13 (stmt -> command .)
    GLOBAL          reduce using rule 13 (stmt -> command .)
    FOR             reduce using rule 13 (stmt -> command .)
    IF              reduce using rule 13 (stmt -> command .)
    SEMI            reduce using rule 13 (stmt -> command .)
    COMMA           reduce using rule 13 (stmt -> command .)
    RETURN          reduce using rule 13 (stmt -> command .)
    SWITCH          reduce using rule 13 (stmt -> command .)
    TRY             reduce using rule 13 (stmt -> command .)
    WHILE           reduce using rule 13 (stmt -> command .)
    NE              reduce using rule 13 (stmt -> command .)
    LPAREN          reduce using rule 13 (stmt -> command .)
    IDENT           reduce using rule 13 (stmt -> command .)
    END_EXPR        reduce using rule 13 (stmt -> command .)
    NUMBER          reduce using rule 13 (stmt -> command .)
    STRING          reduce using rule 13 (stmt -> command .)
    COLON           reduce using rule 13 (stmt -> command .)
    LBRACKET        reduce using rule 13 (stmt -> command .)
    LBRACE          reduce using rule 13 (stmt -> command .)
    MINUS           reduce using rule 13 (stmt -> command .)
    PLUS            reduce using rule 13 (stmt -> command .)
    NEG             reduce using rule 13 (stmt -> command .)
    HANDLE          reduce using rule 13 (stmt -> command .)
    ELSE            reduce using rule 13 (stmt -> command .)
    ELSEIF          reduce using rule 13 (stmt -> command .)
    CATCH           reduce using rule 13 (stmt -> command .)
    FUNCTION        reduce using rule 13 (stmt -> command .)
    $end            reduce using rule 13 (stmt -> command .)
    CASE            reduce using rule 13 (stmt -> command .)
    OTHERWISE       reduce using rule 13 (stmt -> command .)


state 53

    (16) stmt -> null_stmt .

    END_STMT        reduce using rule 16 (stmt -> null_stmt .)
    CONTINUE        reduce using rule 16 (stmt -> null_stmt .)
    BREAK           reduce using rule 16 (stmt -> null_stmt .)
    GLOBAL          reduce using rule 16 (stmt -> null_stmt .)
    FOR             reduce using rule 16 (stmt -> null_stmt .)
    IF              reduce using rule 16 (stmt -> null_stmt .)
    SEMI            reduce using rule 16 (stmt -> null_stmt .)
    COMMA           reduce using rule 16 (stmt -> null_stmt .)
    RETURN          reduce using rule 16 (stmt -> null_stmt .)
    SWITCH          reduce using rule 16 (stmt -> null_stmt .)
    TRY             reduce using rule 16 (stmt -> null_stmt .)
    WHILE           reduce using rule 16 (stmt -> null_stmt .)
    NE              reduce using rule 16 (stmt -> null_stmt .)
    LPAREN          reduce using rule 16 (stmt -> null_stmt .)
    IDENT           reduce using rule 16 (stmt -> null_stmt .)
    END_EXPR        reduce using rule 16 (stmt -> null_stmt .)
    NUMBER          reduce using rule 16 (stmt -> null_stmt .)
    STRING          reduce using rule 16 (stmt -> null_stmt .)
    COLON           reduce using rule 16 (stmt -> null_stmt .)
    LBRACKET        reduce using rule 16 (stmt -> null_stmt .)
    LBRACE          reduce using rule 16 (stmt -> null_stmt .)
    MINUS           reduce using rule 16 (stmt -> null_stmt .)
    PLUS            reduce using rule 16 (stmt -> null_stmt .)
    NEG             reduce using rule 16 (stmt -> null_stmt .)
    HANDLE          reduce using rule 16 (stmt -> null_stmt .)
    ELSE            reduce using rule 16 (stmt -> null_stmt .)
    ELSEIF          reduce using rule 16 (stmt -> null_stmt .)
    CATCH           reduce using rule 16 (stmt -> null_stmt .)
    FUNCTION        reduce using rule 16 (stmt -> null_stmt .)
    $end            reduce using rule 16 (stmt -> null_stmt .)
    CASE            reduce using rule 16 (stmt -> null_stmt .)
    OTHERWISE       reduce using rule 16 (stmt -> null_stmt .)


state 54

    (103) matrix -> LBRACKET expr_list . RBRACKET
    (104) matrix -> LBRACKET expr_list . SEMI RBRACKET
    (57) concat_list -> expr_list . SEMI expr_list

    RBRACKET        shift and go to state 116
    SEMI            shift and go to state 117


state 55

    (101) matrix -> LBRACKET concat_list . RBRACKET
    (102) matrix -> LBRACKET concat_list . SEMI RBRACKET
    (58) concat_list -> concat_list . SEMI expr_list

    RBRACKET        shift and go to state 118
    SEMI            shift and go to state 119


state 56

    (75) expr -> ident .

    RPAREN          reduce using rule 75 (expr -> ident .)
    FIELD           reduce using rule 75 (expr -> ident .)
    TRANSPOSE       reduce using rule 75 (expr -> ident .)
    LBRACE          reduce using rule 75 (expr -> ident .)
    LPAREN          reduce using rule 75 (expr -> ident .)
    AND             reduce using rule 75 (expr -> ident .)
    ANDAND          reduce using rule 75 (expr -> ident .)
    BACKSLASH       reduce using rule 75 (expr -> ident .)
    COLON           reduce using rule 75 (expr -> ident .)
    DIV             reduce using rule 75 (expr -> ident .)
    DOT             reduce using rule 75 (expr -> ident .)
    DOTDIV          reduce using rule 75 (expr -> ident .)
    DOTEXP          reduce using rule 75 (expr -> ident .)
    DOTMUL          reduce using rule 75 (expr -> ident .)
    EQ              reduce using rule 75 (expr -> ident .)
    EXP             reduce using rule 75 (expr -> ident .)
    GE              reduce using rule 75 (expr -> ident .)
    GT              reduce using rule 75 (expr -> ident .)
    LE              reduce using rule 75 (expr -> ident .)
    LT              reduce using rule 75 (expr -> ident .)
    MINUS           reduce using rule 75 (expr -> ident .)
    MUL             reduce using rule 75 (expr -> ident .)
    NE              reduce using rule 75 (expr -> ident .)
    OR              reduce using rule 75 (expr -> ident .)
    OROR            reduce using rule 75 (expr -> ident .)
    PLUS            reduce using rule 75 (expr -> ident .)
    =               reduce using rule 75 (expr -> ident .)
    COMMA           reduce using rule 75 (expr -> ident .)
    SEMI            reduce using rule 75 (expr -> ident .)
    RBRACKET        reduce using rule 75 (expr -> ident .)
    RBRACE          reduce using rule 75 (expr -> ident .)
    CASE            reduce using rule 75 (expr -> ident .)
    OTHERWISE       reduce using rule 75 (expr -> ident .)
    END_STMT        reduce using rule 75 (expr -> ident .)
    error           reduce using rule 75 (expr -> ident .)


state 57

    (61) exprs -> expr .
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    COMMA           reduce using rule 61 (exprs -> expr .)
    RBRACKET        reduce using rule 61 (exprs -> expr .)
    SEMI            reduce using rule 61 (exprs -> expr .)
    RBRACE          reduce using rule 61 (exprs -> expr .)
    RPAREN          reduce using rule 61 (exprs -> expr .)
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    AND             shift and go to state 105
    ANDAND          shift and go to state 99
    BACKSLASH       shift and go to state 94
    COLON           shift and go to state 96
    DIV             shift and go to state 87
    DOT             shift and go to state 90
    DOTDIV          shift and go to state 82
    DOTEXP          shift and go to state 104
    DOTMUL          shift and go to state 88
    EQ              shift and go to state 92
    EXP             shift and go to state 85
    GE              shift and go to state 102
    GT              shift and go to state 100
    LE              shift and go to state 91
    LT              shift and go to state 95
    MINUS           shift and go to state 89
    MUL             shift and go to state 86
    NE              shift and go to state 84
    OR              shift and go to state 107
    OROR            shift and go to state 83
    PLUS            shift and go to state 97


state 58

    (100) matrix -> LBRACKET RBRACKET .

    =               reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    FIELD           reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    TRANSPOSE       reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    LBRACE          reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    LPAREN          reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    AND             reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    ANDAND          reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    BACKSLASH       reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    COLON           reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    DIV             reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    DOT             reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    DOTDIV          reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    DOTEXP          reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    DOTMUL          reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    EQ              reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    EXP             reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    GE              reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    GT              reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    LE              reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    LT              reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    MUL             reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    NE              reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    OR              reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    OROR            reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    COMMA           reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    SEMI            reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    RPAREN          reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    RBRACE          reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    CASE            reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    OTHERWISE       reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    END_STMT        reduce using rule 100 (matrix -> LBRACKET RBRACKET .)
    error           reduce using rule 100 (matrix -> LBRACKET RBRACKET .)


state 59

    (94) expr1 -> MINUS expr .
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    =               reduce using rule 94 (expr1 -> MINUS expr .)
    AND             reduce using rule 94 (expr1 -> MINUS expr .)
    ANDAND          reduce using rule 94 (expr1 -> MINUS expr .)
    BACKSLASH       reduce using rule 94 (expr1 -> MINUS expr .)
    COLON           reduce using rule 94 (expr1 -> MINUS expr .)
    DIV             reduce using rule 94 (expr1 -> MINUS expr .)
    DOTDIV          reduce using rule 94 (expr1 -> MINUS expr .)
    DOTMUL          reduce using rule 94 (expr1 -> MINUS expr .)
    EQ              reduce using rule 94 (expr1 -> MINUS expr .)
    GE              reduce using rule 94 (expr1 -> MINUS expr .)
    GT              reduce using rule 94 (expr1 -> MINUS expr .)
    LE              reduce using rule 94 (expr1 -> MINUS expr .)
    LT              reduce using rule 94 (expr1 -> MINUS expr .)
    MINUS           reduce using rule 94 (expr1 -> MINUS expr .)
    MUL             reduce using rule 94 (expr1 -> MINUS expr .)
    NE              reduce using rule 94 (expr1 -> MINUS expr .)
    OR              reduce using rule 94 (expr1 -> MINUS expr .)
    OROR            reduce using rule 94 (expr1 -> MINUS expr .)
    PLUS            reduce using rule 94 (expr1 -> MINUS expr .)
    COMMA           reduce using rule 94 (expr1 -> MINUS expr .)
    SEMI            reduce using rule 94 (expr1 -> MINUS expr .)
    RPAREN          reduce using rule 94 (expr1 -> MINUS expr .)
    RBRACKET        reduce using rule 94 (expr1 -> MINUS expr .)
    RBRACE          reduce using rule 94 (expr1 -> MINUS expr .)
    CASE            reduce using rule 94 (expr1 -> MINUS expr .)
    OTHERWISE       reduce using rule 94 (expr1 -> MINUS expr .)
    END_STMT        reduce using rule 94 (expr1 -> MINUS expr .)
    error           reduce using rule 94 (expr1 -> MINUS expr .)
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    DOT             shift and go to state 90
    DOTEXP          shift and go to state 104
    EXP             shift and go to state 85

  ! FIELD           [ reduce using rule 94 (expr1 -> MINUS expr .) ]
  ! TRANSPOSE       [ reduce using rule 94 (expr1 -> MINUS expr .) ]
  ! LBRACE          [ reduce using rule 94 (expr1 -> MINUS expr .) ]
  ! LPAREN          [ reduce using rule 94 (expr1 -> MINUS expr .) ]
  ! DOT             [ reduce using rule 94 (expr1 -> MINUS expr .) ]
  ! DOTEXP          [ reduce using rule 94 (expr1 -> MINUS expr .) ]
  ! EXP             [ reduce using rule 94 (expr1 -> MINUS expr .) ]
  ! AND             [ shift and go to state 105 ]
  ! ANDAND          [ shift and go to state 99 ]
  ! BACKSLASH       [ shift and go to state 94 ]
  ! COLON           [ shift and go to state 96 ]
  ! DIV             [ shift and go to state 87 ]
  ! DOTDIV          [ shift and go to state 82 ]
  ! DOTMUL          [ shift and go to state 88 ]
  ! EQ              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 100 ]
  ! LE              [ shift and go to state 91 ]
  ! LT              [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 89 ]
  ! MUL             [ shift and go to state 86 ]
  ! NE              [ shift and go to state 84 ]
  ! OR              [ shift and go to state 107 ]
  ! OROR            [ shift and go to state 83 ]
  ! PLUS            [ shift and go to state 97 ]


state 60

    (95) expr1 -> PLUS expr .
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    =               reduce using rule 95 (expr1 -> PLUS expr .)
    AND             reduce using rule 95 (expr1 -> PLUS expr .)
    ANDAND          reduce using rule 95 (expr1 -> PLUS expr .)
    BACKSLASH       reduce using rule 95 (expr1 -> PLUS expr .)
    COLON           reduce using rule 95 (expr1 -> PLUS expr .)
    DIV             reduce using rule 95 (expr1 -> PLUS expr .)
    DOTDIV          reduce using rule 95 (expr1 -> PLUS expr .)
    DOTMUL          reduce using rule 95 (expr1 -> PLUS expr .)
    EQ              reduce using rule 95 (expr1 -> PLUS expr .)
    GE              reduce using rule 95 (expr1 -> PLUS expr .)
    GT              reduce using rule 95 (expr1 -> PLUS expr .)
    LE              reduce using rule 95 (expr1 -> PLUS expr .)
    LT              reduce using rule 95 (expr1 -> PLUS expr .)
    MINUS           reduce using rule 95 (expr1 -> PLUS expr .)
    MUL             reduce using rule 95 (expr1 -> PLUS expr .)
    NE              reduce using rule 95 (expr1 -> PLUS expr .)
    OR              reduce using rule 95 (expr1 -> PLUS expr .)
    OROR            reduce using rule 95 (expr1 -> PLUS expr .)
    PLUS            reduce using rule 95 (expr1 -> PLUS expr .)
    COMMA           reduce using rule 95 (expr1 -> PLUS expr .)
    SEMI            reduce using rule 95 (expr1 -> PLUS expr .)
    RPAREN          reduce using rule 95 (expr1 -> PLUS expr .)
    RBRACKET        reduce using rule 95 (expr1 -> PLUS expr .)
    RBRACE          reduce using rule 95 (expr1 -> PLUS expr .)
    CASE            reduce using rule 95 (expr1 -> PLUS expr .)
    OTHERWISE       reduce using rule 95 (expr1 -> PLUS expr .)
    END_STMT        reduce using rule 95 (expr1 -> PLUS expr .)
    error           reduce using rule 95 (expr1 -> PLUS expr .)
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    DOT             shift and go to state 90
    DOTEXP          shift and go to state 104
    EXP             shift and go to state 85

  ! FIELD           [ reduce using rule 95 (expr1 -> PLUS expr .) ]
  ! TRANSPOSE       [ reduce using rule 95 (expr1 -> PLUS expr .) ]
  ! LBRACE          [ reduce using rule 95 (expr1 -> PLUS expr .) ]
  ! LPAREN          [ reduce using rule 95 (expr1 -> PLUS expr .) ]
  ! DOT             [ reduce using rule 95 (expr1 -> PLUS expr .) ]
  ! DOTEXP          [ reduce using rule 95 (expr1 -> PLUS expr .) ]
  ! EXP             [ reduce using rule 95 (expr1 -> PLUS expr .) ]
  ! AND             [ shift and go to state 105 ]
  ! ANDAND          [ shift and go to state 99 ]
  ! BACKSLASH       [ shift and go to state 94 ]
  ! COLON           [ shift and go to state 96 ]
  ! DIV             [ shift and go to state 87 ]
  ! DOTDIV          [ shift and go to state 82 ]
  ! DOTMUL          [ shift and go to state 88 ]
  ! EQ              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 100 ]
  ! LE              [ shift and go to state 91 ]
  ! LT              [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 89 ]
  ! MUL             [ shift and go to state 86 ]
  ! NE              [ shift and go to state 84 ]
  ! OR              [ shift and go to state 107 ]
  ! OROR            [ shift and go to state 83 ]
  ! PLUS            [ shift and go to state 97 ]


state 61

    (31) return_stmt -> RETURN SEMI .

    CATCH           reduce using rule 31 (return_stmt -> RETURN SEMI .)
    CONTINUE        reduce using rule 31 (return_stmt -> RETURN SEMI .)
    BREAK           reduce using rule 31 (return_stmt -> RETURN SEMI .)
    GLOBAL          reduce using rule 31 (return_stmt -> RETURN SEMI .)
    FOR             reduce using rule 31 (return_stmt -> RETURN SEMI .)
    IF              reduce using rule 31 (return_stmt -> RETURN SEMI .)
    SEMI            reduce using rule 31 (return_stmt -> RETURN SEMI .)
    COMMA           reduce using rule 31 (return_stmt -> RETURN SEMI .)
    RETURN          reduce using rule 31 (return_stmt -> RETURN SEMI .)
    SWITCH          reduce using rule 31 (return_stmt -> RETURN SEMI .)
    TRY             reduce using rule 31 (return_stmt -> RETURN SEMI .)
    WHILE           reduce using rule 31 (return_stmt -> RETURN SEMI .)
    NE              reduce using rule 31 (return_stmt -> RETURN SEMI .)
    LPAREN          reduce using rule 31 (return_stmt -> RETURN SEMI .)
    IDENT           reduce using rule 31 (return_stmt -> RETURN SEMI .)
    END_EXPR        reduce using rule 31 (return_stmt -> RETURN SEMI .)
    NUMBER          reduce using rule 31 (return_stmt -> RETURN SEMI .)
    STRING          reduce using rule 31 (return_stmt -> RETURN SEMI .)
    COLON           reduce using rule 31 (return_stmt -> RETURN SEMI .)
    LBRACKET        reduce using rule 31 (return_stmt -> RETURN SEMI .)
    LBRACE          reduce using rule 31 (return_stmt -> RETURN SEMI .)
    MINUS           reduce using rule 31 (return_stmt -> RETURN SEMI .)
    PLUS            reduce using rule 31 (return_stmt -> RETURN SEMI .)
    NEG             reduce using rule 31 (return_stmt -> RETURN SEMI .)
    HANDLE          reduce using rule 31 (return_stmt -> RETURN SEMI .)
    END_STMT        reduce using rule 31 (return_stmt -> RETURN SEMI .)
    FUNCTION        reduce using rule 31 (return_stmt -> RETURN SEMI .)
    $end            reduce using rule 31 (return_stmt -> RETURN SEMI .)
    ELSE            reduce using rule 31 (return_stmt -> RETURN SEMI .)
    ELSEIF          reduce using rule 31 (return_stmt -> RETURN SEMI .)
    CASE            reduce using rule 31 (return_stmt -> RETURN SEMI .)
    OTHERWISE       reduce using rule 31 (return_stmt -> RETURN SEMI .)


state 62

    (63) expr_stmt -> expr_list SEMI .

    CATCH           reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    CONTINUE        reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    BREAK           reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    GLOBAL          reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    FOR             reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    IF              reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    SEMI            reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    COMMA           reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    RETURN          reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    SWITCH          reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    TRY             reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    WHILE           reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    NE              reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    LPAREN          reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    IDENT           reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    END_EXPR        reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    NUMBER          reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    STRING          reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    COLON           reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    LBRACKET        reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    LBRACE          reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    MINUS           reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    PLUS            reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    NEG             reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    HANDLE          reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    FUNCTION        reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    $end            reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    END_STMT        reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    CASE            reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    OTHERWISE       reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    ELSE            reduce using rule 63 (expr_stmt -> expr_list SEMI .)
    ELSEIF          reduce using rule 63 (expr_stmt -> expr_list SEMI .)


state 63

    (73) for_stmt -> FOR ident . = expr SEMI stmt_list END_STMT

    =               shift and go to state 120


state 64

    (74) for_stmt -> FOR LPAREN . ident = expr RPAREN SEMI stmt_list END_STMT
    (89) ident -> . IDENT

    IDENT           shift and go to state 12

    ident                          shift and go to state 121

state 65

    (38) try_catch -> TRY stmt_list . CATCH stmt_list END_STMT
    (56) stmt_list -> stmt_list . stmt
    (8) stmt -> . let
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (72) let -> . expr = expr SEMI
    (32) continue_stmt -> . CONTINUE SEMI
    (33) break_stmt -> . BREAK SEMI
    (63) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (27) command -> . ident args SEMI
    (73) for_stmt -> . FOR ident = expr SEMI stmt_list END_STMT
    (74) for_stmt -> . FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT
    (67) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (68) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (39) null_stmt -> . SEMI
    (40) null_stmt -> . COMMA
    (31) return_stmt -> . RETURN SEMI
    (34) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (38) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (64) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (59) expr_list -> . exprs
    (60) expr_list -> . exprs COMMA
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr
    (61) exprs -> . expr
    (62) exprs -> . exprs COMMA expr

    CATCH           shift and go to state 122
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 35
    GLOBAL          shift and go to state 22
    FOR             shift and go to state 13
    IF              shift and go to state 47
    SEMI            shift and go to state 41
    COMMA           shift and go to state 43
    RETURN          shift and go to state 8
    SWITCH          shift and go to state 31
    TRY             shift and go to state 15
    WHILE           shift and go to state 24
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    expr_list                      shift and go to state 9
    number                         shift and go to state 23
    return_stmt                    shift and go to state 25
    switch_stmt                    shift and go to state 26
    break_stmt                     shift and go to state 39
    lambda_expr                    shift and go to state 27
    end                            shift and go to state 40
    matrix                         shift and go to state 10
    continue_stmt                  shift and go to state 28
    cellarray                      shift and go to state 18
    expr2                          shift and go to state 3
    expr1                          shift and go to state 42
    global_stmt                    shift and go to state 44
    string                         shift and go to state 38
    colon                          shift and go to state 7
    stmt                           shift and go to state 114
    for_stmt                       shift and go to state 49
    let                            shift and go to state 16
    expr_stmt                      shift and go to state 5
    ident                          shift and go to state 32
    if_stmt                        shift and go to state 6
    expr                           shift and go to state 33
    try_catch                      shift and go to state 34
    exprs                          shift and go to state 50
    while_stmt                     shift and go to state 51
    command                        shift and go to state 52
    null_stmt                      shift and go to state 53

state 66

    (99) cellarray -> LBRACE expr_list . RBRACE

    RBRACE          shift and go to state 123


state 67

    (98) cellarray -> LBRACE RBRACE .

    FIELD           reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    TRANSPOSE       reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    LBRACE          reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    LPAREN          reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    AND             reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    ANDAND          reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    BACKSLASH       reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    COLON           reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    DIV             reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    DOT             reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    DOTDIV          reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    DOTEXP          reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    DOTMUL          reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    EQ              reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    EXP             reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    GE              reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    GT              reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    LE              reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    LT              reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    MINUS           reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    MUL             reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    NE              reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    OR              reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    OROR            reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    PLUS            reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    COMMA           reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    RBRACE          reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    =               reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    SEMI            reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    RBRACKET        reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    CASE            reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    OTHERWISE       reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    END_STMT        reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    RPAREN          reduce using rule 98 (cellarray -> LBRACE RBRACE .)
    error           reduce using rule 98 (cellarray -> LBRACE RBRACE .)


state 68

    (32) continue_stmt -> CONTINUE SEMI .

    CONTINUE        reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    BREAK           reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    GLOBAL          reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    FOR             reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    IF              reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    SEMI            reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    COMMA           reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    RETURN          reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    SWITCH          reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    TRY             reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    WHILE           reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    NE              reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    LPAREN          reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    IDENT           reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    END_EXPR        reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    NUMBER          reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    STRING          reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    COLON           reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    LBRACKET        reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    LBRACE          reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    MINUS           reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    PLUS            reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    NEG             reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    HANDLE          reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    CASE            reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    OTHERWISE       reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    END_STMT        reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    FUNCTION        reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    $end            reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    CATCH           reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    ELSE            reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)
    ELSEIF          reduce using rule 32 (continue_stmt -> CONTINUE SEMI .)


state 69

    (96) expr1 -> NEG expr .
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    =               reduce using rule 96 (expr1 -> NEG expr .)
    AND             reduce using rule 96 (expr1 -> NEG expr .)
    ANDAND          reduce using rule 96 (expr1 -> NEG expr .)
    BACKSLASH       reduce using rule 96 (expr1 -> NEG expr .)
    COLON           reduce using rule 96 (expr1 -> NEG expr .)
    DIV             reduce using rule 96 (expr1 -> NEG expr .)
    DOTDIV          reduce using rule 96 (expr1 -> NEG expr .)
    DOTMUL          reduce using rule 96 (expr1 -> NEG expr .)
    EQ              reduce using rule 96 (expr1 -> NEG expr .)
    GE              reduce using rule 96 (expr1 -> NEG expr .)
    GT              reduce using rule 96 (expr1 -> NEG expr .)
    LE              reduce using rule 96 (expr1 -> NEG expr .)
    LT              reduce using rule 96 (expr1 -> NEG expr .)
    MINUS           reduce using rule 96 (expr1 -> NEG expr .)
    MUL             reduce using rule 96 (expr1 -> NEG expr .)
    NE              reduce using rule 96 (expr1 -> NEG expr .)
    OR              reduce using rule 96 (expr1 -> NEG expr .)
    OROR            reduce using rule 96 (expr1 -> NEG expr .)
    PLUS            reduce using rule 96 (expr1 -> NEG expr .)
    COMMA           reduce using rule 96 (expr1 -> NEG expr .)
    SEMI            reduce using rule 96 (expr1 -> NEG expr .)
    RPAREN          reduce using rule 96 (expr1 -> NEG expr .)
    RBRACKET        reduce using rule 96 (expr1 -> NEG expr .)
    RBRACE          reduce using rule 96 (expr1 -> NEG expr .)
    CASE            reduce using rule 96 (expr1 -> NEG expr .)
    OTHERWISE       reduce using rule 96 (expr1 -> NEG expr .)
    END_STMT        reduce using rule 96 (expr1 -> NEG expr .)
    error           reduce using rule 96 (expr1 -> NEG expr .)
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    DOT             shift and go to state 90
    DOTEXP          shift and go to state 104
    EXP             shift and go to state 85

  ! FIELD           [ reduce using rule 96 (expr1 -> NEG expr .) ]
  ! TRANSPOSE       [ reduce using rule 96 (expr1 -> NEG expr .) ]
  ! LBRACE          [ reduce using rule 96 (expr1 -> NEG expr .) ]
  ! LPAREN          [ reduce using rule 96 (expr1 -> NEG expr .) ]
  ! DOT             [ reduce using rule 96 (expr1 -> NEG expr .) ]
  ! DOTEXP          [ reduce using rule 96 (expr1 -> NEG expr .) ]
  ! EXP             [ reduce using rule 96 (expr1 -> NEG expr .) ]
  ! AND             [ shift and go to state 105 ]
  ! ANDAND          [ shift and go to state 99 ]
  ! BACKSLASH       [ shift and go to state 94 ]
  ! COLON           [ shift and go to state 96 ]
  ! DIV             [ shift and go to state 87 ]
  ! DOTDIV          [ shift and go to state 82 ]
  ! DOTMUL          [ shift and go to state 88 ]
  ! EQ              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 100 ]
  ! LE              [ shift and go to state 91 ]
  ! LT              [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 89 ]
  ! MUL             [ shift and go to state 86 ]
  ! NE              [ shift and go to state 84 ]
  ! OR              [ shift and go to state 107 ]
  ! OROR            [ shift and go to state 83 ]
  ! PLUS            [ shift and go to state 97 ]


state 70

    (28) global_list -> ident .

    SEMI            reduce using rule 28 (global_list -> ident .)
    IDENT           reduce using rule 28 (global_list -> ident .)


state 71

    (30) global_stmt -> GLOBAL global_list . SEMI
    (29) global_list -> global_list . ident
    (89) ident -> . IDENT

    SEMI            shift and go to state 125
    IDENT           shift and go to state 12

    ident                          shift and go to state 124

state 72

    (64) while_stmt -> WHILE expr . SEMI stmt_list END_STMT
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    SEMI            shift and go to state 126
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    AND             shift and go to state 105
    ANDAND          shift and go to state 99
    BACKSLASH       shift and go to state 94
    COLON           shift and go to state 96
    DIV             shift and go to state 87
    DOT             shift and go to state 90
    DOTDIV          shift and go to state 82
    DOTEXP          shift and go to state 104
    DOTMUL          shift and go to state 88
    EQ              shift and go to state 92
    EXP             shift and go to state 85
    GE              shift and go to state 102
    GT              shift and go to state 100
    LE              shift and go to state 91
    LT              shift and go to state 95
    MINUS           shift and go to state 89
    MUL             shift and go to state 86
    NE              shift and go to state 84
    OR              shift and go to state 107
    OROR            shift and go to state 83
    PLUS            shift and go to state 97


state 73

    (3) top -> top func_decl . stmt_list_opt
    (4) top -> top func_decl . stmt_list END_STMT semi_opt
    (53) stmt_list_opt -> .
    (54) stmt_list_opt -> . stmt_list
    (55) stmt_list -> . stmt
    (56) stmt_list -> . stmt_list stmt
    (8) stmt -> . let
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (72) let -> . expr = expr SEMI
    (32) continue_stmt -> . CONTINUE SEMI
    (33) break_stmt -> . BREAK SEMI
    (63) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (27) command -> . ident args SEMI
    (73) for_stmt -> . FOR ident = expr SEMI stmt_list END_STMT
    (74) for_stmt -> . FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT
    (67) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (68) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (39) null_stmt -> . SEMI
    (40) null_stmt -> . COMMA
    (31) return_stmt -> . RETURN SEMI
    (34) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (38) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (64) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (59) expr_list -> . exprs
    (60) expr_list -> . exprs COMMA
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr
    (61) exprs -> . expr
    (62) exprs -> . exprs COMMA expr

    FUNCTION        reduce using rule 53 (stmt_list_opt -> .)
    $end            reduce using rule 53 (stmt_list_opt -> .)
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 35
    GLOBAL          shift and go to state 22
    FOR             shift and go to state 13
    IF              shift and go to state 47
    SEMI            shift and go to state 41
    COMMA           shift and go to state 43
    RETURN          shift and go to state 8
    SWITCH          shift and go to state 31
    TRY             shift and go to state 15
    WHILE           shift and go to state 24
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    expr_list                      shift and go to state 9
    number                         shift and go to state 23
    stmt_list_opt                  shift and go to state 127
    return_stmt                    shift and go to state 25
    switch_stmt                    shift and go to state 26
    break_stmt                     shift and go to state 39
    lambda_expr                    shift and go to state 27
    end                            shift and go to state 40
    matrix                         shift and go to state 10
    continue_stmt                  shift and go to state 28
    cellarray                      shift and go to state 18
    expr2                          shift and go to state 3
    expr1                          shift and go to state 42
    global_stmt                    shift and go to state 44
    string                         shift and go to state 38
    colon                          shift and go to state 7
    stmt                           shift and go to state 14
    for_stmt                       shift and go to state 49
    let                            shift and go to state 16
    expr_stmt                      shift and go to state 5
    stmt_list                      shift and go to state 128
    ident                          shift and go to state 32
    if_stmt                        shift and go to state 6
    expr                           shift and go to state 33
    try_catch                      shift and go to state 34
    exprs                          shift and go to state 50
    while_stmt                     shift and go to state 51
    command                        shift and go to state 52
    null_stmt                      shift and go to state 53

state 74

    (41) func_decl -> FUNCTION . ident args_opt SEMI
    (42) func_decl -> FUNCTION . ret = ident args_opt SEMI
    (89) ident -> . IDENT
    (50) ret -> . ident
    (51) ret -> . LBRACKET RBRACKET
    (52) ret -> . LBRACKET expr_list RBRACKET

    IDENT           shift and go to state 12
    LBRACKET        shift and go to state 131

    ident                          shift and go to state 129
    ret                            shift and go to state 130

state 75

    (34) switch_stmt -> SWITCH expr . semi_opt case_list END_STMT
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr
    (5) semi_opt -> .
    (6) semi_opt -> . semi_opt SEMI
    (7) semi_opt -> . semi_opt COMMA

    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    AND             shift and go to state 105
    ANDAND          shift and go to state 99
    BACKSLASH       shift and go to state 94
    COLON           shift and go to state 96
    DIV             shift and go to state 87
    DOT             shift and go to state 90
    DOTDIV          shift and go to state 82
    DOTEXP          shift and go to state 104
    DOTMUL          shift and go to state 88
    EQ              shift and go to state 92
    EXP             shift and go to state 85
    GE              shift and go to state 102
    GT              shift and go to state 100
    LE              shift and go to state 91
    LT              shift and go to state 95
    MINUS           shift and go to state 89
    MUL             shift and go to state 86
    NE              shift and go to state 84
    OR              shift and go to state 107
    OROR            shift and go to state 83
    PLUS            shift and go to state 97
    SEMI            reduce using rule 5 (semi_opt -> .)
    COMMA           reduce using rule 5 (semi_opt -> .)
    CASE            reduce using rule 5 (semi_opt -> .)
    OTHERWISE       reduce using rule 5 (semi_opt -> .)
    END_STMT        reduce using rule 5 (semi_opt -> .)

    semi_opt                       shift and go to state 132

state 76

    (21) arg1 -> STRING .

    SEMI            reduce using rule 21 (arg1 -> STRING .)
    STRING          reduce using rule 21 (arg1 -> STRING .)
    NUMBER          reduce using rule 21 (arg1 -> STRING .)
    IDENT           reduce using rule 21 (arg1 -> STRING .)
    GLOBAL          reduce using rule 21 (arg1 -> STRING .)


state 77

    (25) args -> arg1 .

    SEMI            reduce using rule 25 (args -> arg1 .)
    STRING          reduce using rule 25 (args -> arg1 .)
    NUMBER          reduce using rule 25 (args -> arg1 .)
    IDENT           reduce using rule 25 (args -> arg1 .)
    GLOBAL          reduce using rule 25 (args -> arg1 .)


state 78

    (27) command -> ident args . SEMI
    (26) args -> args . arg1
    (21) arg1 -> . STRING
    (22) arg1 -> . NUMBER
    (23) arg1 -> . IDENT
    (24) arg1 -> . GLOBAL

    SEMI            shift and go to state 133
    STRING          shift and go to state 76
    NUMBER          shift and go to state 79
    IDENT           shift and go to state 80
    GLOBAL          shift and go to state 81

    arg1                           shift and go to state 134

state 79

    (22) arg1 -> NUMBER .

    SEMI            reduce using rule 22 (arg1 -> NUMBER .)
    STRING          reduce using rule 22 (arg1 -> NUMBER .)
    NUMBER          reduce using rule 22 (arg1 -> NUMBER .)
    IDENT           reduce using rule 22 (arg1 -> NUMBER .)
    GLOBAL          reduce using rule 22 (arg1 -> NUMBER .)


state 80

    (23) arg1 -> IDENT .

    SEMI            reduce using rule 23 (arg1 -> IDENT .)
    STRING          reduce using rule 23 (arg1 -> IDENT .)
    NUMBER          reduce using rule 23 (arg1 -> IDENT .)
    IDENT           reduce using rule 23 (arg1 -> IDENT .)
    GLOBAL          reduce using rule 23 (arg1 -> IDENT .)


state 81

    (24) arg1 -> GLOBAL .

    SEMI            reduce using rule 24 (arg1 -> GLOBAL .)
    STRING          reduce using rule 24 (arg1 -> GLOBAL .)
    NUMBER          reduce using rule 24 (arg1 -> GLOBAL .)
    IDENT           reduce using rule 24 (arg1 -> GLOBAL .)
    GLOBAL          reduce using rule 24 (arg1 -> GLOBAL .)


state 82

    (118) expr2 -> expr DOTDIV . expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 135
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 83

    (131) expr2 -> expr OROR . expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 136
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 84

    (129) expr2 -> expr NE . expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 137
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 85

    (122) expr2 -> expr EXP . expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 138
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 86

    (128) expr2 -> expr MUL . expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 139
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 87

    (116) expr2 -> expr DIV . expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 140
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 88

    (120) expr2 -> expr DOTMUL . expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 141
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 89

    (127) expr2 -> expr MINUS . expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 142
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 90

    (117) expr2 -> expr DOT . expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 143
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 91

    (125) expr2 -> expr LE . expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 144
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 92

    (121) expr2 -> expr EQ . expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 145
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 93

    (107) expr -> expr TRANSPOSE .

    RPAREN          reduce using rule 107 (expr -> expr TRANSPOSE .)
    FIELD           reduce using rule 107 (expr -> expr TRANSPOSE .)
    TRANSPOSE       reduce using rule 107 (expr -> expr TRANSPOSE .)
    LBRACE          reduce using rule 107 (expr -> expr TRANSPOSE .)
    LPAREN          reduce using rule 107 (expr -> expr TRANSPOSE .)
    AND             reduce using rule 107 (expr -> expr TRANSPOSE .)
    ANDAND          reduce using rule 107 (expr -> expr TRANSPOSE .)
    BACKSLASH       reduce using rule 107 (expr -> expr TRANSPOSE .)
    COLON           reduce using rule 107 (expr -> expr TRANSPOSE .)
    DIV             reduce using rule 107 (expr -> expr TRANSPOSE .)
    DOT             reduce using rule 107 (expr -> expr TRANSPOSE .)
    DOTDIV          reduce using rule 107 (expr -> expr TRANSPOSE .)
    DOTEXP          reduce using rule 107 (expr -> expr TRANSPOSE .)
    DOTMUL          reduce using rule 107 (expr -> expr TRANSPOSE .)
    EQ              reduce using rule 107 (expr -> expr TRANSPOSE .)
    EXP             reduce using rule 107 (expr -> expr TRANSPOSE .)
    GE              reduce using rule 107 (expr -> expr TRANSPOSE .)
    GT              reduce using rule 107 (expr -> expr TRANSPOSE .)
    LE              reduce using rule 107 (expr -> expr TRANSPOSE .)
    LT              reduce using rule 107 (expr -> expr TRANSPOSE .)
    MINUS           reduce using rule 107 (expr -> expr TRANSPOSE .)
    MUL             reduce using rule 107 (expr -> expr TRANSPOSE .)
    NE              reduce using rule 107 (expr -> expr TRANSPOSE .)
    OR              reduce using rule 107 (expr -> expr TRANSPOSE .)
    OROR            reduce using rule 107 (expr -> expr TRANSPOSE .)
    PLUS            reduce using rule 107 (expr -> expr TRANSPOSE .)
    =               reduce using rule 107 (expr -> expr TRANSPOSE .)
    COMMA           reduce using rule 107 (expr -> expr TRANSPOSE .)
    SEMI            reduce using rule 107 (expr -> expr TRANSPOSE .)
    RBRACKET        reduce using rule 107 (expr -> expr TRANSPOSE .)
    RBRACE          reduce using rule 107 (expr -> expr TRANSPOSE .)
    CASE            reduce using rule 107 (expr -> expr TRANSPOSE .)
    OTHERWISE       reduce using rule 107 (expr -> expr TRANSPOSE .)
    END_STMT        reduce using rule 107 (expr -> expr TRANSPOSE .)
    error           reduce using rule 107 (expr -> expr TRANSPOSE .)


state 94

    (114) expr2 -> expr BACKSLASH . expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 146
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 95

    (126) expr2 -> expr LT . expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 147
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 96

    (115) expr2 -> expr COLON . expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 148
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 97

    (132) expr2 -> expr PLUS . expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 149
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 98

    (72) let -> expr = . expr SEMI
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 150
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 99

    (113) expr2 -> expr ANDAND . expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 151
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 100

    (124) expr2 -> expr GT . expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 152
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 101

    (106) expr -> expr FIELD .

    RPAREN          reduce using rule 106 (expr -> expr FIELD .)
    FIELD           reduce using rule 106 (expr -> expr FIELD .)
    TRANSPOSE       reduce using rule 106 (expr -> expr FIELD .)
    LBRACE          reduce using rule 106 (expr -> expr FIELD .)
    LPAREN          reduce using rule 106 (expr -> expr FIELD .)
    AND             reduce using rule 106 (expr -> expr FIELD .)
    ANDAND          reduce using rule 106 (expr -> expr FIELD .)
    BACKSLASH       reduce using rule 106 (expr -> expr FIELD .)
    COLON           reduce using rule 106 (expr -> expr FIELD .)
    DIV             reduce using rule 106 (expr -> expr FIELD .)
    DOT             reduce using rule 106 (expr -> expr FIELD .)
    DOTDIV          reduce using rule 106 (expr -> expr FIELD .)
    DOTEXP          reduce using rule 106 (expr -> expr FIELD .)
    DOTMUL          reduce using rule 106 (expr -> expr FIELD .)
    EQ              reduce using rule 106 (expr -> expr FIELD .)
    EXP             reduce using rule 106 (expr -> expr FIELD .)
    GE              reduce using rule 106 (expr -> expr FIELD .)
    GT              reduce using rule 106 (expr -> expr FIELD .)
    LE              reduce using rule 106 (expr -> expr FIELD .)
    LT              reduce using rule 106 (expr -> expr FIELD .)
    MINUS           reduce using rule 106 (expr -> expr FIELD .)
    MUL             reduce using rule 106 (expr -> expr FIELD .)
    NE              reduce using rule 106 (expr -> expr FIELD .)
    OR              reduce using rule 106 (expr -> expr FIELD .)
    OROR            reduce using rule 106 (expr -> expr FIELD .)
    PLUS            reduce using rule 106 (expr -> expr FIELD .)
    =               reduce using rule 106 (expr -> expr FIELD .)
    COMMA           reduce using rule 106 (expr -> expr FIELD .)
    SEMI            reduce using rule 106 (expr -> expr FIELD .)
    RBRACKET        reduce using rule 106 (expr -> expr FIELD .)
    RBRACE          reduce using rule 106 (expr -> expr FIELD .)
    CASE            reduce using rule 106 (expr -> expr FIELD .)
    OTHERWISE       reduce using rule 106 (expr -> expr FIELD .)
    END_STMT        reduce using rule 106 (expr -> expr FIELD .)
    error           reduce using rule 106 (expr -> expr FIELD .)


state 102

    (123) expr2 -> expr GE . expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 153
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 103

    (110) expr -> expr LPAREN . expr_list RPAREN
    (111) expr -> expr LPAREN . RPAREN
    (59) expr_list -> . exprs
    (60) expr_list -> . exprs COMMA
    (61) exprs -> . expr
    (62) exprs -> . exprs COMMA expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    RPAREN          shift and go to state 155
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 57
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    exprs                          shift and go to state 50
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    expr_list                      shift and go to state 154
    matrix                         shift and go to state 10

state 104

    (119) expr2 -> expr DOTEXP . expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 156
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 105

    (112) expr2 -> expr AND . expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 157
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 106

    (108) expr -> expr LBRACE . expr_list RBRACE
    (109) expr -> expr LBRACE . RBRACE
    (59) expr_list -> . exprs
    (60) expr_list -> . exprs COMMA
    (61) exprs -> . expr
    (62) exprs -> . exprs COMMA expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    RBRACE          shift and go to state 159
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 57
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    exprs                          shift and go to state 50
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    expr_list                      shift and go to state 158
    matrix                         shift and go to state 10

state 107

    (130) expr2 -> expr OR . expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 160
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 108

    (33) break_stmt -> BREAK SEMI .

    END_STMT        reduce using rule 33 (break_stmt -> BREAK SEMI .)
    CONTINUE        reduce using rule 33 (break_stmt -> BREAK SEMI .)
    BREAK           reduce using rule 33 (break_stmt -> BREAK SEMI .)
    GLOBAL          reduce using rule 33 (break_stmt -> BREAK SEMI .)
    FOR             reduce using rule 33 (break_stmt -> BREAK SEMI .)
    IF              reduce using rule 33 (break_stmt -> BREAK SEMI .)
    SEMI            reduce using rule 33 (break_stmt -> BREAK SEMI .)
    COMMA           reduce using rule 33 (break_stmt -> BREAK SEMI .)
    RETURN          reduce using rule 33 (break_stmt -> BREAK SEMI .)
    SWITCH          reduce using rule 33 (break_stmt -> BREAK SEMI .)
    TRY             reduce using rule 33 (break_stmt -> BREAK SEMI .)
    WHILE           reduce using rule 33 (break_stmt -> BREAK SEMI .)
    NE              reduce using rule 33 (break_stmt -> BREAK SEMI .)
    LPAREN          reduce using rule 33 (break_stmt -> BREAK SEMI .)
    IDENT           reduce using rule 33 (break_stmt -> BREAK SEMI .)
    END_EXPR        reduce using rule 33 (break_stmt -> BREAK SEMI .)
    NUMBER          reduce using rule 33 (break_stmt -> BREAK SEMI .)
    STRING          reduce using rule 33 (break_stmt -> BREAK SEMI .)
    COLON           reduce using rule 33 (break_stmt -> BREAK SEMI .)
    LBRACKET        reduce using rule 33 (break_stmt -> BREAK SEMI .)
    LBRACE          reduce using rule 33 (break_stmt -> BREAK SEMI .)
    MINUS           reduce using rule 33 (break_stmt -> BREAK SEMI .)
    PLUS            reduce using rule 33 (break_stmt -> BREAK SEMI .)
    NEG             reduce using rule 33 (break_stmt -> BREAK SEMI .)
    HANDLE          reduce using rule 33 (break_stmt -> BREAK SEMI .)
    FUNCTION        reduce using rule 33 (break_stmt -> BREAK SEMI .)
    $end            reduce using rule 33 (break_stmt -> BREAK SEMI .)
    CATCH           reduce using rule 33 (break_stmt -> BREAK SEMI .)
    ELSE            reduce using rule 33 (break_stmt -> BREAK SEMI .)
    ELSEIF          reduce using rule 33 (break_stmt -> BREAK SEMI .)
    CASE            reduce using rule 33 (break_stmt -> BREAK SEMI .)
    OTHERWISE       reduce using rule 33 (break_stmt -> BREAK SEMI .)


state 109

    (88) lambda_expr -> HANDLE lambda_args . expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 161
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 110

    (97) expr1 -> HANDLE ident .

    =               reduce using rule 97 (expr1 -> HANDLE ident .)
    FIELD           reduce using rule 97 (expr1 -> HANDLE ident .)
    TRANSPOSE       reduce using rule 97 (expr1 -> HANDLE ident .)
    LBRACE          reduce using rule 97 (expr1 -> HANDLE ident .)
    LPAREN          reduce using rule 97 (expr1 -> HANDLE ident .)
    AND             reduce using rule 97 (expr1 -> HANDLE ident .)
    ANDAND          reduce using rule 97 (expr1 -> HANDLE ident .)
    BACKSLASH       reduce using rule 97 (expr1 -> HANDLE ident .)
    COLON           reduce using rule 97 (expr1 -> HANDLE ident .)
    DIV             reduce using rule 97 (expr1 -> HANDLE ident .)
    DOT             reduce using rule 97 (expr1 -> HANDLE ident .)
    DOTDIV          reduce using rule 97 (expr1 -> HANDLE ident .)
    DOTEXP          reduce using rule 97 (expr1 -> HANDLE ident .)
    DOTMUL          reduce using rule 97 (expr1 -> HANDLE ident .)
    EQ              reduce using rule 97 (expr1 -> HANDLE ident .)
    EXP             reduce using rule 97 (expr1 -> HANDLE ident .)
    GE              reduce using rule 97 (expr1 -> HANDLE ident .)
    GT              reduce using rule 97 (expr1 -> HANDLE ident .)
    LE              reduce using rule 97 (expr1 -> HANDLE ident .)
    LT              reduce using rule 97 (expr1 -> HANDLE ident .)
    MINUS           reduce using rule 97 (expr1 -> HANDLE ident .)
    MUL             reduce using rule 97 (expr1 -> HANDLE ident .)
    NE              reduce using rule 97 (expr1 -> HANDLE ident .)
    OR              reduce using rule 97 (expr1 -> HANDLE ident .)
    OROR            reduce using rule 97 (expr1 -> HANDLE ident .)
    PLUS            reduce using rule 97 (expr1 -> HANDLE ident .)
    COMMA           reduce using rule 97 (expr1 -> HANDLE ident .)
    SEMI            reduce using rule 97 (expr1 -> HANDLE ident .)
    RPAREN          reduce using rule 97 (expr1 -> HANDLE ident .)
    RBRACKET        reduce using rule 97 (expr1 -> HANDLE ident .)
    RBRACE          reduce using rule 97 (expr1 -> HANDLE ident .)
    CASE            reduce using rule 97 (expr1 -> HANDLE ident .)
    OTHERWISE       reduce using rule 97 (expr1 -> HANDLE ident .)
    END_STMT        reduce using rule 97 (expr1 -> HANDLE ident .)
    error           reduce using rule 97 (expr1 -> HANDLE ident .)


state 111

    (86) lambda_args -> LPAREN . RPAREN
    (87) lambda_args -> LPAREN . arg_list RPAREN
    (46) arg_list -> . ident
    (47) arg_list -> . ident = expr
    (48) arg_list -> . arg_list COMMA ident
    (49) arg_list -> . arg_list COMMA ident = expr
    (89) ident -> . IDENT

    RPAREN          shift and go to state 163
    IDENT           shift and go to state 12

    ident                          shift and go to state 162
    arg_list                       shift and go to state 164

state 112

    (105) expr -> LPAREN expr . RPAREN
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    RPAREN          shift and go to state 165
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    AND             shift and go to state 105
    ANDAND          shift and go to state 99
    BACKSLASH       shift and go to state 94
    COLON           shift and go to state 96
    DIV             shift and go to state 87
    DOT             shift and go to state 90
    DOTDIV          shift and go to state 82
    DOTEXP          shift and go to state 104
    DOTMUL          shift and go to state 88
    EQ              shift and go to state 92
    EXP             shift and go to state 85
    GE              shift and go to state 102
    GT              shift and go to state 100
    LE              shift and go to state 91
    LT              shift and go to state 95
    MINUS           shift and go to state 89
    MUL             shift and go to state 86
    NE              shift and go to state 84
    OR              shift and go to state 107
    OROR            shift and go to state 83
    PLUS            shift and go to state 97


state 113

    (67) if_stmt -> IF expr . sep stmt_list_opt elseif_stmt END_STMT
    (68) if_stmt -> IF expr . error stmt_list_opt elseif_stmt END_STMT
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr
    (65) sep -> . COMMA
    (66) sep -> . SEMI

    error           shift and go to state 168
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    AND             shift and go to state 105
    ANDAND          shift and go to state 99
    BACKSLASH       shift and go to state 94
    COLON           shift and go to state 96
    DIV             shift and go to state 87
    DOT             shift and go to state 90
    DOTDIV          shift and go to state 82
    DOTEXP          shift and go to state 104
    DOTMUL          shift and go to state 88
    EQ              shift and go to state 92
    EXP             shift and go to state 85
    GE              shift and go to state 102
    GT              shift and go to state 100
    LE              shift and go to state 91
    LT              shift and go to state 95
    MINUS           shift and go to state 89
    MUL             shift and go to state 86
    NE              shift and go to state 84
    OR              shift and go to state 107
    OROR            shift and go to state 83
    PLUS            shift and go to state 97
    COMMA           shift and go to state 169
    SEMI            shift and go to state 167

    sep                            shift and go to state 166

state 114

    (56) stmt_list -> stmt_list stmt .

    CONTINUE        reduce using rule 56 (stmt_list -> stmt_list stmt .)
    BREAK           reduce using rule 56 (stmt_list -> stmt_list stmt .)
    GLOBAL          reduce using rule 56 (stmt_list -> stmt_list stmt .)
    FOR             reduce using rule 56 (stmt_list -> stmt_list stmt .)
    IF              reduce using rule 56 (stmt_list -> stmt_list stmt .)
    SEMI            reduce using rule 56 (stmt_list -> stmt_list stmt .)
    COMMA           reduce using rule 56 (stmt_list -> stmt_list stmt .)
    RETURN          reduce using rule 56 (stmt_list -> stmt_list stmt .)
    SWITCH          reduce using rule 56 (stmt_list -> stmt_list stmt .)
    TRY             reduce using rule 56 (stmt_list -> stmt_list stmt .)
    WHILE           reduce using rule 56 (stmt_list -> stmt_list stmt .)
    NE              reduce using rule 56 (stmt_list -> stmt_list stmt .)
    LPAREN          reduce using rule 56 (stmt_list -> stmt_list stmt .)
    IDENT           reduce using rule 56 (stmt_list -> stmt_list stmt .)
    END_EXPR        reduce using rule 56 (stmt_list -> stmt_list stmt .)
    NUMBER          reduce using rule 56 (stmt_list -> stmt_list stmt .)
    STRING          reduce using rule 56 (stmt_list -> stmt_list stmt .)
    COLON           reduce using rule 56 (stmt_list -> stmt_list stmt .)
    LBRACKET        reduce using rule 56 (stmt_list -> stmt_list stmt .)
    LBRACE          reduce using rule 56 (stmt_list -> stmt_list stmt .)
    MINUS           reduce using rule 56 (stmt_list -> stmt_list stmt .)
    PLUS            reduce using rule 56 (stmt_list -> stmt_list stmt .)
    NEG             reduce using rule 56 (stmt_list -> stmt_list stmt .)
    HANDLE          reduce using rule 56 (stmt_list -> stmt_list stmt .)
    FUNCTION        reduce using rule 56 (stmt_list -> stmt_list stmt .)
    $end            reduce using rule 56 (stmt_list -> stmt_list stmt .)
    END_STMT        reduce using rule 56 (stmt_list -> stmt_list stmt .)
    ELSE            reduce using rule 56 (stmt_list -> stmt_list stmt .)
    ELSEIF          reduce using rule 56 (stmt_list -> stmt_list stmt .)
    CASE            reduce using rule 56 (stmt_list -> stmt_list stmt .)
    OTHERWISE       reduce using rule 56 (stmt_list -> stmt_list stmt .)
    CATCH           reduce using rule 56 (stmt_list -> stmt_list stmt .)


state 115

    (60) expr_list -> exprs COMMA .
    (62) exprs -> exprs COMMA . expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    SEMI            reduce using rule 60 (expr_list -> exprs COMMA .)
    RPAREN          reduce using rule 60 (expr_list -> exprs COMMA .)
    RBRACE          reduce using rule 60 (expr_list -> exprs COMMA .)
    RBRACKET        reduce using rule 60 (expr_list -> exprs COMMA .)
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 170
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 116

    (103) matrix -> LBRACKET expr_list RBRACKET .

    =               reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    FIELD           reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    TRANSPOSE       reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    LBRACE          reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    LPAREN          reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    AND             reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    ANDAND          reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    BACKSLASH       reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    COLON           reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    DIV             reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    DOT             reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    DOTDIV          reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    DOTEXP          reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    DOTMUL          reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    EQ              reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    EXP             reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    GE              reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    GT              reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    LE              reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    LT              reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    MINUS           reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    MUL             reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    NE              reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    OR              reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    OROR            reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    PLUS            reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    COMMA           reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    SEMI            reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    RPAREN          reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    RBRACKET        reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    RBRACE          reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    CASE            reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    OTHERWISE       reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    END_STMT        reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)
    error           reduce using rule 103 (matrix -> LBRACKET expr_list RBRACKET .)


state 117

    (104) matrix -> LBRACKET expr_list SEMI . RBRACKET
    (57) concat_list -> expr_list SEMI . expr_list
    (59) expr_list -> . exprs
    (60) expr_list -> . exprs COMMA
    (61) exprs -> . expr
    (62) exprs -> . exprs COMMA expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    RBRACKET        shift and go to state 172
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr_list                      shift and go to state 171
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    exprs                          shift and go to state 50
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    expr                           shift and go to state 57
    matrix                         shift and go to state 10

state 118

    (101) matrix -> LBRACKET concat_list RBRACKET .

    =               reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    FIELD           reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    TRANSPOSE       reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    LBRACE          reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    LPAREN          reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    AND             reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    ANDAND          reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    BACKSLASH       reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    COLON           reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    DIV             reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    DOT             reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    DOTDIV          reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    DOTEXP          reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    DOTMUL          reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    EQ              reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    EXP             reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    GE              reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    GT              reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    LE              reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    LT              reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    MINUS           reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    MUL             reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    NE              reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    OR              reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    OROR            reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    PLUS            reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    COMMA           reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    SEMI            reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    RPAREN          reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    RBRACKET        reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    RBRACE          reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    CASE            reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    OTHERWISE       reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    END_STMT        reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)
    error           reduce using rule 101 (matrix -> LBRACKET concat_list RBRACKET .)


state 119

    (102) matrix -> LBRACKET concat_list SEMI . RBRACKET
    (58) concat_list -> concat_list SEMI . expr_list
    (59) expr_list -> . exprs
    (60) expr_list -> . exprs COMMA
    (61) exprs -> . expr
    (62) exprs -> . exprs COMMA expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    RBRACKET        shift and go to state 174
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    expr2                          shift and go to state 3
    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr_list                      shift and go to state 173
    number                         shift and go to state 23
    exprs                          shift and go to state 50
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    expr                           shift and go to state 57
    matrix                         shift and go to state 10

state 120

    (73) for_stmt -> FOR ident = . expr SEMI stmt_list END_STMT
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 175
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 121

    (74) for_stmt -> FOR LPAREN ident . = expr RPAREN SEMI stmt_list END_STMT

    =               shift and go to state 176


state 122

    (38) try_catch -> TRY stmt_list CATCH . stmt_list END_STMT
    (55) stmt_list -> . stmt
    (56) stmt_list -> . stmt_list stmt
    (8) stmt -> . let
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (72) let -> . expr = expr SEMI
    (32) continue_stmt -> . CONTINUE SEMI
    (33) break_stmt -> . BREAK SEMI
    (63) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (27) command -> . ident args SEMI
    (73) for_stmt -> . FOR ident = expr SEMI stmt_list END_STMT
    (74) for_stmt -> . FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT
    (67) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (68) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (39) null_stmt -> . SEMI
    (40) null_stmt -> . COMMA
    (31) return_stmt -> . RETURN SEMI
    (34) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (38) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (64) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (59) expr_list -> . exprs
    (60) expr_list -> . exprs COMMA
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr
    (61) exprs -> . expr
    (62) exprs -> . exprs COMMA expr

    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 35
    GLOBAL          shift and go to state 22
    FOR             shift and go to state 13
    IF              shift and go to state 47
    SEMI            shift and go to state 41
    COMMA           shift and go to state 43
    RETURN          shift and go to state 8
    SWITCH          shift and go to state 31
    TRY             shift and go to state 15
    WHILE           shift and go to state 24
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    expr_list                      shift and go to state 9
    number                         shift and go to state 23
    return_stmt                    shift and go to state 25
    switch_stmt                    shift and go to state 26
    break_stmt                     shift and go to state 39
    lambda_expr                    shift and go to state 27
    end                            shift and go to state 40
    matrix                         shift and go to state 10
    continue_stmt                  shift and go to state 28
    cellarray                      shift and go to state 18
    expr2                          shift and go to state 3
    expr1                          shift and go to state 42
    global_stmt                    shift and go to state 44
    string                         shift and go to state 38
    colon                          shift and go to state 7
    stmt                           shift and go to state 14
    for_stmt                       shift and go to state 49
    let                            shift and go to state 16
    expr_stmt                      shift and go to state 5
    stmt_list                      shift and go to state 177
    ident                          shift and go to state 32
    if_stmt                        shift and go to state 6
    expr                           shift and go to state 33
    try_catch                      shift and go to state 34
    exprs                          shift and go to state 50
    while_stmt                     shift and go to state 51
    command                        shift and go to state 52
    null_stmt                      shift and go to state 53

state 123

    (99) cellarray -> LBRACE expr_list RBRACE .

    FIELD           reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    TRANSPOSE       reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    LBRACE          reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    LPAREN          reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    AND             reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    ANDAND          reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    BACKSLASH       reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    COLON           reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    DIV             reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    DOT             reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    DOTDIV          reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    DOTEXP          reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    DOTMUL          reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    EQ              reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    EXP             reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    GE              reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    GT              reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    LE              reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    LT              reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    MINUS           reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    MUL             reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    NE              reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    OR              reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    OROR            reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    PLUS            reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    COMMA           reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    RBRACE          reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    =               reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    SEMI            reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    RBRACKET        reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    CASE            reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    OTHERWISE       reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    END_STMT        reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    RPAREN          reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)
    error           reduce using rule 99 (cellarray -> LBRACE expr_list RBRACE .)


state 124

    (29) global_list -> global_list ident .

    SEMI            reduce using rule 29 (global_list -> global_list ident .)
    IDENT           reduce using rule 29 (global_list -> global_list ident .)


state 125

    (30) global_stmt -> GLOBAL global_list SEMI .

    CONTINUE        reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    BREAK           reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    GLOBAL          reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    FOR             reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    IF              reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    SEMI            reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    COMMA           reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    RETURN          reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    SWITCH          reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    TRY             reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    WHILE           reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    NE              reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    LPAREN          reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    IDENT           reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    END_EXPR        reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    NUMBER          reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    STRING          reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    COLON           reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    LBRACKET        reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    LBRACE          reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    MINUS           reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    PLUS            reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    NEG             reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    HANDLE          reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    END_STMT        reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    ELSE            reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    ELSEIF          reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    FUNCTION        reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    $end            reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    CASE            reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    OTHERWISE       reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)
    CATCH           reduce using rule 30 (global_stmt -> GLOBAL global_list SEMI .)


state 126

    (64) while_stmt -> WHILE expr SEMI . stmt_list END_STMT
    (55) stmt_list -> . stmt
    (56) stmt_list -> . stmt_list stmt
    (8) stmt -> . let
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (72) let -> . expr = expr SEMI
    (32) continue_stmt -> . CONTINUE SEMI
    (33) break_stmt -> . BREAK SEMI
    (63) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (27) command -> . ident args SEMI
    (73) for_stmt -> . FOR ident = expr SEMI stmt_list END_STMT
    (74) for_stmt -> . FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT
    (67) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (68) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (39) null_stmt -> . SEMI
    (40) null_stmt -> . COMMA
    (31) return_stmt -> . RETURN SEMI
    (34) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (38) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (64) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (59) expr_list -> . exprs
    (60) expr_list -> . exprs COMMA
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr
    (61) exprs -> . expr
    (62) exprs -> . exprs COMMA expr

    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 35
    GLOBAL          shift and go to state 22
    FOR             shift and go to state 13
    IF              shift and go to state 47
    SEMI            shift and go to state 41
    COMMA           shift and go to state 43
    RETURN          shift and go to state 8
    SWITCH          shift and go to state 31
    TRY             shift and go to state 15
    WHILE           shift and go to state 24
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    expr_list                      shift and go to state 9
    number                         shift and go to state 23
    return_stmt                    shift and go to state 25
    switch_stmt                    shift and go to state 26
    break_stmt                     shift and go to state 39
    lambda_expr                    shift and go to state 27
    end                            shift and go to state 40
    matrix                         shift and go to state 10
    continue_stmt                  shift and go to state 28
    cellarray                      shift and go to state 18
    expr2                          shift and go to state 3
    expr1                          shift and go to state 42
    global_stmt                    shift and go to state 44
    string                         shift and go to state 38
    colon                          shift and go to state 7
    stmt                           shift and go to state 14
    for_stmt                       shift and go to state 49
    let                            shift and go to state 16
    expr_stmt                      shift and go to state 5
    stmt_list                      shift and go to state 178
    ident                          shift and go to state 32
    if_stmt                        shift and go to state 6
    expr                           shift and go to state 33
    try_catch                      shift and go to state 34
    exprs                          shift and go to state 50
    while_stmt                     shift and go to state 51
    command                        shift and go to state 52
    null_stmt                      shift and go to state 53

state 127

    (3) top -> top func_decl stmt_list_opt .

    FUNCTION        reduce using rule 3 (top -> top func_decl stmt_list_opt .)
    $end            reduce using rule 3 (top -> top func_decl stmt_list_opt .)


state 128

    (4) top -> top func_decl stmt_list . END_STMT semi_opt
    (54) stmt_list_opt -> stmt_list .
    (56) stmt_list -> stmt_list . stmt
    (8) stmt -> . let
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (72) let -> . expr = expr SEMI
    (32) continue_stmt -> . CONTINUE SEMI
    (33) break_stmt -> . BREAK SEMI
    (63) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (27) command -> . ident args SEMI
    (73) for_stmt -> . FOR ident = expr SEMI stmt_list END_STMT
    (74) for_stmt -> . FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT
    (67) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (68) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (39) null_stmt -> . SEMI
    (40) null_stmt -> . COMMA
    (31) return_stmt -> . RETURN SEMI
    (34) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (38) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (64) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (59) expr_list -> . exprs
    (60) expr_list -> . exprs COMMA
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr
    (61) exprs -> . expr
    (62) exprs -> . exprs COMMA expr

    END_STMT        shift and go to state 179
    FUNCTION        reduce using rule 54 (stmt_list_opt -> stmt_list .)
    $end            reduce using rule 54 (stmt_list_opt -> stmt_list .)
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 35
    GLOBAL          shift and go to state 22
    FOR             shift and go to state 13
    IF              shift and go to state 47
    SEMI            shift and go to state 41
    COMMA           shift and go to state 43
    RETURN          shift and go to state 8
    SWITCH          shift and go to state 31
    TRY             shift and go to state 15
    WHILE           shift and go to state 24
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    expr_list                      shift and go to state 9
    number                         shift and go to state 23
    return_stmt                    shift and go to state 25
    switch_stmt                    shift and go to state 26
    break_stmt                     shift and go to state 39
    lambda_expr                    shift and go to state 27
    end                            shift and go to state 40
    matrix                         shift and go to state 10
    continue_stmt                  shift and go to state 28
    cellarray                      shift and go to state 18
    expr2                          shift and go to state 3
    expr1                          shift and go to state 42
    global_stmt                    shift and go to state 44
    string                         shift and go to state 38
    colon                          shift and go to state 7
    stmt                           shift and go to state 114
    for_stmt                       shift and go to state 49
    let                            shift and go to state 16
    expr_stmt                      shift and go to state 5
    ident                          shift and go to state 32
    if_stmt                        shift and go to state 6
    expr                           shift and go to state 33
    try_catch                      shift and go to state 34
    exprs                          shift and go to state 50
    while_stmt                     shift and go to state 51
    command                        shift and go to state 52
    null_stmt                      shift and go to state 53

state 129

    (41) func_decl -> FUNCTION ident . args_opt SEMI
    (50) ret -> ident .
    (43) args_opt -> .
    (44) args_opt -> . LPAREN RPAREN
    (45) args_opt -> . LPAREN arg_list RPAREN

    =               reduce using rule 50 (ret -> ident .)
    SEMI            reduce using rule 43 (args_opt -> .)
    LPAREN          shift and go to state 181

    args_opt                       shift and go to state 180

state 130

    (42) func_decl -> FUNCTION ret . = ident args_opt SEMI

    =               shift and go to state 182


state 131

    (51) ret -> LBRACKET . RBRACKET
    (52) ret -> LBRACKET . expr_list RBRACKET
    (59) expr_list -> . exprs
    (60) expr_list -> . exprs COMMA
    (61) exprs -> . expr
    (62) exprs -> . exprs COMMA expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    RBRACKET        shift and go to state 184
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr_list                      shift and go to state 183
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    exprs                          shift and go to state 50
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    expr                           shift and go to state 57
    matrix                         shift and go to state 10

state 132

    (34) switch_stmt -> SWITCH expr semi_opt . case_list END_STMT
    (6) semi_opt -> semi_opt . SEMI
    (7) semi_opt -> semi_opt . COMMA
    (35) case_list -> .
    (36) case_list -> . CASE expr sep stmt_list_opt case_list
    (37) case_list -> . OTHERWISE stmt_list

    SEMI            shift and go to state 186
    COMMA           shift and go to state 188
    END_STMT        reduce using rule 35 (case_list -> .)
    CASE            shift and go to state 185
    OTHERWISE       shift and go to state 189

    case_list                      shift and go to state 187

state 133

    (27) command -> ident args SEMI .

    CONTINUE        reduce using rule 27 (command -> ident args SEMI .)
    BREAK           reduce using rule 27 (command -> ident args SEMI .)
    GLOBAL          reduce using rule 27 (command -> ident args SEMI .)
    FOR             reduce using rule 27 (command -> ident args SEMI .)
    IF              reduce using rule 27 (command -> ident args SEMI .)
    SEMI            reduce using rule 27 (command -> ident args SEMI .)
    COMMA           reduce using rule 27 (command -> ident args SEMI .)
    RETURN          reduce using rule 27 (command -> ident args SEMI .)
    SWITCH          reduce using rule 27 (command -> ident args SEMI .)
    TRY             reduce using rule 27 (command -> ident args SEMI .)
    WHILE           reduce using rule 27 (command -> ident args SEMI .)
    NE              reduce using rule 27 (command -> ident args SEMI .)
    LPAREN          reduce using rule 27 (command -> ident args SEMI .)
    IDENT           reduce using rule 27 (command -> ident args SEMI .)
    END_EXPR        reduce using rule 27 (command -> ident args SEMI .)
    NUMBER          reduce using rule 27 (command -> ident args SEMI .)
    STRING          reduce using rule 27 (command -> ident args SEMI .)
    COLON           reduce using rule 27 (command -> ident args SEMI .)
    LBRACKET        reduce using rule 27 (command -> ident args SEMI .)
    LBRACE          reduce using rule 27 (command -> ident args SEMI .)
    MINUS           reduce using rule 27 (command -> ident args SEMI .)
    PLUS            reduce using rule 27 (command -> ident args SEMI .)
    NEG             reduce using rule 27 (command -> ident args SEMI .)
    HANDLE          reduce using rule 27 (command -> ident args SEMI .)
    FUNCTION        reduce using rule 27 (command -> ident args SEMI .)
    $end            reduce using rule 27 (command -> ident args SEMI .)
    END_STMT        reduce using rule 27 (command -> ident args SEMI .)
    CATCH           reduce using rule 27 (command -> ident args SEMI .)
    CASE            reduce using rule 27 (command -> ident args SEMI .)
    OTHERWISE       reduce using rule 27 (command -> ident args SEMI .)
    ELSE            reduce using rule 27 (command -> ident args SEMI .)
    ELSEIF          reduce using rule 27 (command -> ident args SEMI .)


state 134

    (26) args -> args arg1 .

    SEMI            reduce using rule 26 (args -> args arg1 .)
    STRING          reduce using rule 26 (args -> args arg1 .)
    NUMBER          reduce using rule 26 (args -> args arg1 .)
    IDENT           reduce using rule 26 (args -> args arg1 .)
    GLOBAL          reduce using rule 26 (args -> args arg1 .)


state 135

    (118) expr2 -> expr DOTDIV expr .
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    AND             reduce using rule 118 (expr2 -> expr DOTDIV expr .)
    ANDAND          reduce using rule 118 (expr2 -> expr DOTDIV expr .)
    BACKSLASH       reduce using rule 118 (expr2 -> expr DOTDIV expr .)
    COLON           reduce using rule 118 (expr2 -> expr DOTDIV expr .)
    DIV             reduce using rule 118 (expr2 -> expr DOTDIV expr .)
    DOTDIV          reduce using rule 118 (expr2 -> expr DOTDIV expr .)
    DOTMUL          reduce using rule 118 (expr2 -> expr DOTDIV expr .)
    EQ              reduce using rule 118 (expr2 -> expr DOTDIV expr .)
    GE              reduce using rule 118 (expr2 -> expr DOTDIV expr .)
    GT              reduce using rule 118 (expr2 -> expr DOTDIV expr .)
    LE              reduce using rule 118 (expr2 -> expr DOTDIV expr .)
    LT              reduce using rule 118 (expr2 -> expr DOTDIV expr .)
    MINUS           reduce using rule 118 (expr2 -> expr DOTDIV expr .)
    MUL             reduce using rule 118 (expr2 -> expr DOTDIV expr .)
    NE              reduce using rule 118 (expr2 -> expr DOTDIV expr .)
    OR              reduce using rule 118 (expr2 -> expr DOTDIV expr .)
    OROR            reduce using rule 118 (expr2 -> expr DOTDIV expr .)
    PLUS            reduce using rule 118 (expr2 -> expr DOTDIV expr .)
    RPAREN          reduce using rule 118 (expr2 -> expr DOTDIV expr .)
    COMMA           reduce using rule 118 (expr2 -> expr DOTDIV expr .)
    =               reduce using rule 118 (expr2 -> expr DOTDIV expr .)
    SEMI            reduce using rule 118 (expr2 -> expr DOTDIV expr .)
    RBRACKET        reduce using rule 118 (expr2 -> expr DOTDIV expr .)
    RBRACE          reduce using rule 118 (expr2 -> expr DOTDIV expr .)
    CASE            reduce using rule 118 (expr2 -> expr DOTDIV expr .)
    OTHERWISE       reduce using rule 118 (expr2 -> expr DOTDIV expr .)
    END_STMT        reduce using rule 118 (expr2 -> expr DOTDIV expr .)
    error           reduce using rule 118 (expr2 -> expr DOTDIV expr .)
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    DOT             shift and go to state 90
    DOTEXP          shift and go to state 104
    EXP             shift and go to state 85

  ! FIELD           [ reduce using rule 118 (expr2 -> expr DOTDIV expr .) ]
  ! TRANSPOSE       [ reduce using rule 118 (expr2 -> expr DOTDIV expr .) ]
  ! LBRACE          [ reduce using rule 118 (expr2 -> expr DOTDIV expr .) ]
  ! LPAREN          [ reduce using rule 118 (expr2 -> expr DOTDIV expr .) ]
  ! DOT             [ reduce using rule 118 (expr2 -> expr DOTDIV expr .) ]
  ! DOTEXP          [ reduce using rule 118 (expr2 -> expr DOTDIV expr .) ]
  ! EXP             [ reduce using rule 118 (expr2 -> expr DOTDIV expr .) ]
  ! AND             [ shift and go to state 105 ]
  ! ANDAND          [ shift and go to state 99 ]
  ! BACKSLASH       [ shift and go to state 94 ]
  ! COLON           [ shift and go to state 96 ]
  ! DIV             [ shift and go to state 87 ]
  ! DOTDIV          [ shift and go to state 82 ]
  ! DOTMUL          [ shift and go to state 88 ]
  ! EQ              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 100 ]
  ! LE              [ shift and go to state 91 ]
  ! LT              [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 89 ]
  ! MUL             [ shift and go to state 86 ]
  ! NE              [ shift and go to state 84 ]
  ! OR              [ shift and go to state 107 ]
  ! OROR            [ shift and go to state 83 ]
  ! PLUS            [ shift and go to state 97 ]


state 136

    (131) expr2 -> expr OROR expr .
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    ANDAND          reduce using rule 131 (expr2 -> expr OROR expr .)
    COLON           reduce using rule 131 (expr2 -> expr OROR expr .)
    OROR            reduce using rule 131 (expr2 -> expr OROR expr .)
    RPAREN          reduce using rule 131 (expr2 -> expr OROR expr .)
    COMMA           reduce using rule 131 (expr2 -> expr OROR expr .)
    =               reduce using rule 131 (expr2 -> expr OROR expr .)
    SEMI            reduce using rule 131 (expr2 -> expr OROR expr .)
    RBRACKET        reduce using rule 131 (expr2 -> expr OROR expr .)
    RBRACE          reduce using rule 131 (expr2 -> expr OROR expr .)
    CASE            reduce using rule 131 (expr2 -> expr OROR expr .)
    OTHERWISE       reduce using rule 131 (expr2 -> expr OROR expr .)
    END_STMT        reduce using rule 131 (expr2 -> expr OROR expr .)
    error           reduce using rule 131 (expr2 -> expr OROR expr .)
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    AND             shift and go to state 105
    BACKSLASH       shift and go to state 94
    DIV             shift and go to state 87
    DOT             shift and go to state 90
    DOTDIV          shift and go to state 82
    DOTEXP          shift and go to state 104
    DOTMUL          shift and go to state 88
    EQ              shift and go to state 92
    EXP             shift and go to state 85
    GE              shift and go to state 102
    GT              shift and go to state 100
    LE              shift and go to state 91
    LT              shift and go to state 95
    MINUS           shift and go to state 89
    MUL             shift and go to state 86
    NE              shift and go to state 84
    OR              shift and go to state 107
    PLUS            shift and go to state 97

  ! FIELD           [ reduce using rule 131 (expr2 -> expr OROR expr .) ]
  ! TRANSPOSE       [ reduce using rule 131 (expr2 -> expr OROR expr .) ]
  ! LBRACE          [ reduce using rule 131 (expr2 -> expr OROR expr .) ]
  ! LPAREN          [ reduce using rule 131 (expr2 -> expr OROR expr .) ]
  ! AND             [ reduce using rule 131 (expr2 -> expr OROR expr .) ]
  ! BACKSLASH       [ reduce using rule 131 (expr2 -> expr OROR expr .) ]
  ! DIV             [ reduce using rule 131 (expr2 -> expr OROR expr .) ]
  ! DOT             [ reduce using rule 131 (expr2 -> expr OROR expr .) ]
  ! DOTDIV          [ reduce using rule 131 (expr2 -> expr OROR expr .) ]
  ! DOTEXP          [ reduce using rule 131 (expr2 -> expr OROR expr .) ]
  ! DOTMUL          [ reduce using rule 131 (expr2 -> expr OROR expr .) ]
  ! EQ              [ reduce using rule 131 (expr2 -> expr OROR expr .) ]
  ! EXP             [ reduce using rule 131 (expr2 -> expr OROR expr .) ]
  ! GE              [ reduce using rule 131 (expr2 -> expr OROR expr .) ]
  ! GT              [ reduce using rule 131 (expr2 -> expr OROR expr .) ]
  ! LE              [ reduce using rule 131 (expr2 -> expr OROR expr .) ]
  ! LT              [ reduce using rule 131 (expr2 -> expr OROR expr .) ]
  ! MINUS           [ reduce using rule 131 (expr2 -> expr OROR expr .) ]
  ! MUL             [ reduce using rule 131 (expr2 -> expr OROR expr .) ]
  ! NE              [ reduce using rule 131 (expr2 -> expr OROR expr .) ]
  ! OR              [ reduce using rule 131 (expr2 -> expr OROR expr .) ]
  ! PLUS            [ reduce using rule 131 (expr2 -> expr OROR expr .) ]
  ! ANDAND          [ shift and go to state 99 ]
  ! COLON           [ shift and go to state 96 ]
  ! OROR            [ shift and go to state 83 ]


state 137

    (129) expr2 -> expr NE expr .
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    ANDAND          reduce using rule 129 (expr2 -> expr NE expr .)
    COLON           reduce using rule 129 (expr2 -> expr NE expr .)
    EQ              reduce using rule 129 (expr2 -> expr NE expr .)
    GE              reduce using rule 129 (expr2 -> expr NE expr .)
    GT              reduce using rule 129 (expr2 -> expr NE expr .)
    LE              reduce using rule 129 (expr2 -> expr NE expr .)
    LT              reduce using rule 129 (expr2 -> expr NE expr .)
    NE              reduce using rule 129 (expr2 -> expr NE expr .)
    OROR            reduce using rule 129 (expr2 -> expr NE expr .)
    RPAREN          reduce using rule 129 (expr2 -> expr NE expr .)
    COMMA           reduce using rule 129 (expr2 -> expr NE expr .)
    =               reduce using rule 129 (expr2 -> expr NE expr .)
    SEMI            reduce using rule 129 (expr2 -> expr NE expr .)
    RBRACKET        reduce using rule 129 (expr2 -> expr NE expr .)
    RBRACE          reduce using rule 129 (expr2 -> expr NE expr .)
    CASE            reduce using rule 129 (expr2 -> expr NE expr .)
    OTHERWISE       reduce using rule 129 (expr2 -> expr NE expr .)
    END_STMT        reduce using rule 129 (expr2 -> expr NE expr .)
    error           reduce using rule 129 (expr2 -> expr NE expr .)
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    AND             shift and go to state 105
    BACKSLASH       shift and go to state 94
    DIV             shift and go to state 87
    DOT             shift and go to state 90
    DOTDIV          shift and go to state 82
    DOTEXP          shift and go to state 104
    DOTMUL          shift and go to state 88
    EXP             shift and go to state 85
    MINUS           shift and go to state 89
    MUL             shift and go to state 86
    OR              shift and go to state 107
    PLUS            shift and go to state 97

  ! FIELD           [ reduce using rule 129 (expr2 -> expr NE expr .) ]
  ! TRANSPOSE       [ reduce using rule 129 (expr2 -> expr NE expr .) ]
  ! LBRACE          [ reduce using rule 129 (expr2 -> expr NE expr .) ]
  ! LPAREN          [ reduce using rule 129 (expr2 -> expr NE expr .) ]
  ! AND             [ reduce using rule 129 (expr2 -> expr NE expr .) ]
  ! BACKSLASH       [ reduce using rule 129 (expr2 -> expr NE expr .) ]
  ! DIV             [ reduce using rule 129 (expr2 -> expr NE expr .) ]
  ! DOT             [ reduce using rule 129 (expr2 -> expr NE expr .) ]
  ! DOTDIV          [ reduce using rule 129 (expr2 -> expr NE expr .) ]
  ! DOTEXP          [ reduce using rule 129 (expr2 -> expr NE expr .) ]
  ! DOTMUL          [ reduce using rule 129 (expr2 -> expr NE expr .) ]
  ! EXP             [ reduce using rule 129 (expr2 -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 129 (expr2 -> expr NE expr .) ]
  ! MUL             [ reduce using rule 129 (expr2 -> expr NE expr .) ]
  ! OR              [ reduce using rule 129 (expr2 -> expr NE expr .) ]
  ! PLUS            [ reduce using rule 129 (expr2 -> expr NE expr .) ]
  ! ANDAND          [ shift and go to state 99 ]
  ! COLON           [ shift and go to state 96 ]
  ! EQ              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 100 ]
  ! LE              [ shift and go to state 91 ]
  ! LT              [ shift and go to state 95 ]
  ! NE              [ shift and go to state 84 ]
  ! OROR            [ shift and go to state 83 ]


state 138

    (122) expr2 -> expr EXP expr .
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    TRANSPOSE       reduce using rule 122 (expr2 -> expr EXP expr .)
    AND             reduce using rule 122 (expr2 -> expr EXP expr .)
    ANDAND          reduce using rule 122 (expr2 -> expr EXP expr .)
    BACKSLASH       reduce using rule 122 (expr2 -> expr EXP expr .)
    COLON           reduce using rule 122 (expr2 -> expr EXP expr .)
    DIV             reduce using rule 122 (expr2 -> expr EXP expr .)
    DOTDIV          reduce using rule 122 (expr2 -> expr EXP expr .)
    DOTMUL          reduce using rule 122 (expr2 -> expr EXP expr .)
    EQ              reduce using rule 122 (expr2 -> expr EXP expr .)
    GE              reduce using rule 122 (expr2 -> expr EXP expr .)
    GT              reduce using rule 122 (expr2 -> expr EXP expr .)
    LE              reduce using rule 122 (expr2 -> expr EXP expr .)
    LT              reduce using rule 122 (expr2 -> expr EXP expr .)
    MINUS           reduce using rule 122 (expr2 -> expr EXP expr .)
    MUL             reduce using rule 122 (expr2 -> expr EXP expr .)
    NE              reduce using rule 122 (expr2 -> expr EXP expr .)
    OR              reduce using rule 122 (expr2 -> expr EXP expr .)
    OROR            reduce using rule 122 (expr2 -> expr EXP expr .)
    PLUS            reduce using rule 122 (expr2 -> expr EXP expr .)
    RPAREN          reduce using rule 122 (expr2 -> expr EXP expr .)
    COMMA           reduce using rule 122 (expr2 -> expr EXP expr .)
    =               reduce using rule 122 (expr2 -> expr EXP expr .)
    SEMI            reduce using rule 122 (expr2 -> expr EXP expr .)
    RBRACKET        reduce using rule 122 (expr2 -> expr EXP expr .)
    RBRACE          reduce using rule 122 (expr2 -> expr EXP expr .)
    CASE            reduce using rule 122 (expr2 -> expr EXP expr .)
    OTHERWISE       reduce using rule 122 (expr2 -> expr EXP expr .)
    END_STMT        reduce using rule 122 (expr2 -> expr EXP expr .)
    error           reduce using rule 122 (expr2 -> expr EXP expr .)
    FIELD           shift and go to state 101
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    DOT             shift and go to state 90
    DOTEXP          shift and go to state 104
    EXP             shift and go to state 85

  ! FIELD           [ reduce using rule 122 (expr2 -> expr EXP expr .) ]
  ! LBRACE          [ reduce using rule 122 (expr2 -> expr EXP expr .) ]
  ! LPAREN          [ reduce using rule 122 (expr2 -> expr EXP expr .) ]
  ! DOT             [ reduce using rule 122 (expr2 -> expr EXP expr .) ]
  ! DOTEXP          [ reduce using rule 122 (expr2 -> expr EXP expr .) ]
  ! EXP             [ reduce using rule 122 (expr2 -> expr EXP expr .) ]
  ! TRANSPOSE       [ shift and go to state 93 ]
  ! AND             [ shift and go to state 105 ]
  ! ANDAND          [ shift and go to state 99 ]
  ! BACKSLASH       [ shift and go to state 94 ]
  ! COLON           [ shift and go to state 96 ]
  ! DIV             [ shift and go to state 87 ]
  ! DOTDIV          [ shift and go to state 82 ]
  ! DOTMUL          [ shift and go to state 88 ]
  ! EQ              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 100 ]
  ! LE              [ shift and go to state 91 ]
  ! LT              [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 89 ]
  ! MUL             [ shift and go to state 86 ]
  ! NE              [ shift and go to state 84 ]
  ! OR              [ shift and go to state 107 ]
  ! OROR            [ shift and go to state 83 ]
  ! PLUS            [ shift and go to state 97 ]


state 139

    (128) expr2 -> expr MUL expr .
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    AND             reduce using rule 128 (expr2 -> expr MUL expr .)
    ANDAND          reduce using rule 128 (expr2 -> expr MUL expr .)
    BACKSLASH       reduce using rule 128 (expr2 -> expr MUL expr .)
    COLON           reduce using rule 128 (expr2 -> expr MUL expr .)
    DIV             reduce using rule 128 (expr2 -> expr MUL expr .)
    DOTDIV          reduce using rule 128 (expr2 -> expr MUL expr .)
    DOTMUL          reduce using rule 128 (expr2 -> expr MUL expr .)
    EQ              reduce using rule 128 (expr2 -> expr MUL expr .)
    GE              reduce using rule 128 (expr2 -> expr MUL expr .)
    GT              reduce using rule 128 (expr2 -> expr MUL expr .)
    LE              reduce using rule 128 (expr2 -> expr MUL expr .)
    LT              reduce using rule 128 (expr2 -> expr MUL expr .)
    MINUS           reduce using rule 128 (expr2 -> expr MUL expr .)
    MUL             reduce using rule 128 (expr2 -> expr MUL expr .)
    NE              reduce using rule 128 (expr2 -> expr MUL expr .)
    OR              reduce using rule 128 (expr2 -> expr MUL expr .)
    OROR            reduce using rule 128 (expr2 -> expr MUL expr .)
    PLUS            reduce using rule 128 (expr2 -> expr MUL expr .)
    RPAREN          reduce using rule 128 (expr2 -> expr MUL expr .)
    COMMA           reduce using rule 128 (expr2 -> expr MUL expr .)
    =               reduce using rule 128 (expr2 -> expr MUL expr .)
    SEMI            reduce using rule 128 (expr2 -> expr MUL expr .)
    RBRACKET        reduce using rule 128 (expr2 -> expr MUL expr .)
    RBRACE          reduce using rule 128 (expr2 -> expr MUL expr .)
    CASE            reduce using rule 128 (expr2 -> expr MUL expr .)
    OTHERWISE       reduce using rule 128 (expr2 -> expr MUL expr .)
    END_STMT        reduce using rule 128 (expr2 -> expr MUL expr .)
    error           reduce using rule 128 (expr2 -> expr MUL expr .)
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    DOT             shift and go to state 90
    DOTEXP          shift and go to state 104
    EXP             shift and go to state 85

  ! FIELD           [ reduce using rule 128 (expr2 -> expr MUL expr .) ]
  ! TRANSPOSE       [ reduce using rule 128 (expr2 -> expr MUL expr .) ]
  ! LBRACE          [ reduce using rule 128 (expr2 -> expr MUL expr .) ]
  ! LPAREN          [ reduce using rule 128 (expr2 -> expr MUL expr .) ]
  ! DOT             [ reduce using rule 128 (expr2 -> expr MUL expr .) ]
  ! DOTEXP          [ reduce using rule 128 (expr2 -> expr MUL expr .) ]
  ! EXP             [ reduce using rule 128 (expr2 -> expr MUL expr .) ]
  ! AND             [ shift and go to state 105 ]
  ! ANDAND          [ shift and go to state 99 ]
  ! BACKSLASH       [ shift and go to state 94 ]
  ! COLON           [ shift and go to state 96 ]
  ! DIV             [ shift and go to state 87 ]
  ! DOTDIV          [ shift and go to state 82 ]
  ! DOTMUL          [ shift and go to state 88 ]
  ! EQ              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 100 ]
  ! LE              [ shift and go to state 91 ]
  ! LT              [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 89 ]
  ! MUL             [ shift and go to state 86 ]
  ! NE              [ shift and go to state 84 ]
  ! OR              [ shift and go to state 107 ]
  ! OROR            [ shift and go to state 83 ]
  ! PLUS            [ shift and go to state 97 ]


state 140

    (116) expr2 -> expr DIV expr .
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    AND             reduce using rule 116 (expr2 -> expr DIV expr .)
    ANDAND          reduce using rule 116 (expr2 -> expr DIV expr .)
    BACKSLASH       reduce using rule 116 (expr2 -> expr DIV expr .)
    COLON           reduce using rule 116 (expr2 -> expr DIV expr .)
    DIV             reduce using rule 116 (expr2 -> expr DIV expr .)
    DOTDIV          reduce using rule 116 (expr2 -> expr DIV expr .)
    DOTMUL          reduce using rule 116 (expr2 -> expr DIV expr .)
    EQ              reduce using rule 116 (expr2 -> expr DIV expr .)
    GE              reduce using rule 116 (expr2 -> expr DIV expr .)
    GT              reduce using rule 116 (expr2 -> expr DIV expr .)
    LE              reduce using rule 116 (expr2 -> expr DIV expr .)
    LT              reduce using rule 116 (expr2 -> expr DIV expr .)
    MINUS           reduce using rule 116 (expr2 -> expr DIV expr .)
    MUL             reduce using rule 116 (expr2 -> expr DIV expr .)
    NE              reduce using rule 116 (expr2 -> expr DIV expr .)
    OR              reduce using rule 116 (expr2 -> expr DIV expr .)
    OROR            reduce using rule 116 (expr2 -> expr DIV expr .)
    PLUS            reduce using rule 116 (expr2 -> expr DIV expr .)
    RPAREN          reduce using rule 116 (expr2 -> expr DIV expr .)
    COMMA           reduce using rule 116 (expr2 -> expr DIV expr .)
    =               reduce using rule 116 (expr2 -> expr DIV expr .)
    SEMI            reduce using rule 116 (expr2 -> expr DIV expr .)
    RBRACKET        reduce using rule 116 (expr2 -> expr DIV expr .)
    RBRACE          reduce using rule 116 (expr2 -> expr DIV expr .)
    CASE            reduce using rule 116 (expr2 -> expr DIV expr .)
    OTHERWISE       reduce using rule 116 (expr2 -> expr DIV expr .)
    END_STMT        reduce using rule 116 (expr2 -> expr DIV expr .)
    error           reduce using rule 116 (expr2 -> expr DIV expr .)
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    DOT             shift and go to state 90
    DOTEXP          shift and go to state 104
    EXP             shift and go to state 85

  ! FIELD           [ reduce using rule 116 (expr2 -> expr DIV expr .) ]
  ! TRANSPOSE       [ reduce using rule 116 (expr2 -> expr DIV expr .) ]
  ! LBRACE          [ reduce using rule 116 (expr2 -> expr DIV expr .) ]
  ! LPAREN          [ reduce using rule 116 (expr2 -> expr DIV expr .) ]
  ! DOT             [ reduce using rule 116 (expr2 -> expr DIV expr .) ]
  ! DOTEXP          [ reduce using rule 116 (expr2 -> expr DIV expr .) ]
  ! EXP             [ reduce using rule 116 (expr2 -> expr DIV expr .) ]
  ! AND             [ shift and go to state 105 ]
  ! ANDAND          [ shift and go to state 99 ]
  ! BACKSLASH       [ shift and go to state 94 ]
  ! COLON           [ shift and go to state 96 ]
  ! DIV             [ shift and go to state 87 ]
  ! DOTDIV          [ shift and go to state 82 ]
  ! DOTMUL          [ shift and go to state 88 ]
  ! EQ              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 100 ]
  ! LE              [ shift and go to state 91 ]
  ! LT              [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 89 ]
  ! MUL             [ shift and go to state 86 ]
  ! NE              [ shift and go to state 84 ]
  ! OR              [ shift and go to state 107 ]
  ! OROR            [ shift and go to state 83 ]
  ! PLUS            [ shift and go to state 97 ]


state 141

    (120) expr2 -> expr DOTMUL expr .
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    AND             reduce using rule 120 (expr2 -> expr DOTMUL expr .)
    ANDAND          reduce using rule 120 (expr2 -> expr DOTMUL expr .)
    BACKSLASH       reduce using rule 120 (expr2 -> expr DOTMUL expr .)
    COLON           reduce using rule 120 (expr2 -> expr DOTMUL expr .)
    DIV             reduce using rule 120 (expr2 -> expr DOTMUL expr .)
    DOTDIV          reduce using rule 120 (expr2 -> expr DOTMUL expr .)
    DOTMUL          reduce using rule 120 (expr2 -> expr DOTMUL expr .)
    EQ              reduce using rule 120 (expr2 -> expr DOTMUL expr .)
    GE              reduce using rule 120 (expr2 -> expr DOTMUL expr .)
    GT              reduce using rule 120 (expr2 -> expr DOTMUL expr .)
    LE              reduce using rule 120 (expr2 -> expr DOTMUL expr .)
    LT              reduce using rule 120 (expr2 -> expr DOTMUL expr .)
    MINUS           reduce using rule 120 (expr2 -> expr DOTMUL expr .)
    MUL             reduce using rule 120 (expr2 -> expr DOTMUL expr .)
    NE              reduce using rule 120 (expr2 -> expr DOTMUL expr .)
    OR              reduce using rule 120 (expr2 -> expr DOTMUL expr .)
    OROR            reduce using rule 120 (expr2 -> expr DOTMUL expr .)
    PLUS            reduce using rule 120 (expr2 -> expr DOTMUL expr .)
    RPAREN          reduce using rule 120 (expr2 -> expr DOTMUL expr .)
    COMMA           reduce using rule 120 (expr2 -> expr DOTMUL expr .)
    =               reduce using rule 120 (expr2 -> expr DOTMUL expr .)
    SEMI            reduce using rule 120 (expr2 -> expr DOTMUL expr .)
    RBRACKET        reduce using rule 120 (expr2 -> expr DOTMUL expr .)
    RBRACE          reduce using rule 120 (expr2 -> expr DOTMUL expr .)
    CASE            reduce using rule 120 (expr2 -> expr DOTMUL expr .)
    OTHERWISE       reduce using rule 120 (expr2 -> expr DOTMUL expr .)
    END_STMT        reduce using rule 120 (expr2 -> expr DOTMUL expr .)
    error           reduce using rule 120 (expr2 -> expr DOTMUL expr .)
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    DOT             shift and go to state 90
    DOTEXP          shift and go to state 104
    EXP             shift and go to state 85

  ! FIELD           [ reduce using rule 120 (expr2 -> expr DOTMUL expr .) ]
  ! TRANSPOSE       [ reduce using rule 120 (expr2 -> expr DOTMUL expr .) ]
  ! LBRACE          [ reduce using rule 120 (expr2 -> expr DOTMUL expr .) ]
  ! LPAREN          [ reduce using rule 120 (expr2 -> expr DOTMUL expr .) ]
  ! DOT             [ reduce using rule 120 (expr2 -> expr DOTMUL expr .) ]
  ! DOTEXP          [ reduce using rule 120 (expr2 -> expr DOTMUL expr .) ]
  ! EXP             [ reduce using rule 120 (expr2 -> expr DOTMUL expr .) ]
  ! AND             [ shift and go to state 105 ]
  ! ANDAND          [ shift and go to state 99 ]
  ! BACKSLASH       [ shift and go to state 94 ]
  ! COLON           [ shift and go to state 96 ]
  ! DIV             [ shift and go to state 87 ]
  ! DOTDIV          [ shift and go to state 82 ]
  ! DOTMUL          [ shift and go to state 88 ]
  ! EQ              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 100 ]
  ! LE              [ shift and go to state 91 ]
  ! LT              [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 89 ]
  ! MUL             [ shift and go to state 86 ]
  ! NE              [ shift and go to state 84 ]
  ! OR              [ shift and go to state 107 ]
  ! OROR            [ shift and go to state 83 ]
  ! PLUS            [ shift and go to state 97 ]


state 142

    (127) expr2 -> expr MINUS expr .
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    AND             reduce using rule 127 (expr2 -> expr MINUS expr .)
    ANDAND          reduce using rule 127 (expr2 -> expr MINUS expr .)
    COLON           reduce using rule 127 (expr2 -> expr MINUS expr .)
    EQ              reduce using rule 127 (expr2 -> expr MINUS expr .)
    GE              reduce using rule 127 (expr2 -> expr MINUS expr .)
    GT              reduce using rule 127 (expr2 -> expr MINUS expr .)
    LE              reduce using rule 127 (expr2 -> expr MINUS expr .)
    LT              reduce using rule 127 (expr2 -> expr MINUS expr .)
    MINUS           reduce using rule 127 (expr2 -> expr MINUS expr .)
    NE              reduce using rule 127 (expr2 -> expr MINUS expr .)
    OR              reduce using rule 127 (expr2 -> expr MINUS expr .)
    OROR            reduce using rule 127 (expr2 -> expr MINUS expr .)
    PLUS            reduce using rule 127 (expr2 -> expr MINUS expr .)
    RPAREN          reduce using rule 127 (expr2 -> expr MINUS expr .)
    COMMA           reduce using rule 127 (expr2 -> expr MINUS expr .)
    =               reduce using rule 127 (expr2 -> expr MINUS expr .)
    SEMI            reduce using rule 127 (expr2 -> expr MINUS expr .)
    RBRACKET        reduce using rule 127 (expr2 -> expr MINUS expr .)
    RBRACE          reduce using rule 127 (expr2 -> expr MINUS expr .)
    CASE            reduce using rule 127 (expr2 -> expr MINUS expr .)
    OTHERWISE       reduce using rule 127 (expr2 -> expr MINUS expr .)
    END_STMT        reduce using rule 127 (expr2 -> expr MINUS expr .)
    error           reduce using rule 127 (expr2 -> expr MINUS expr .)
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    BACKSLASH       shift and go to state 94
    DIV             shift and go to state 87
    DOT             shift and go to state 90
    DOTDIV          shift and go to state 82
    DOTEXP          shift and go to state 104
    DOTMUL          shift and go to state 88
    EXP             shift and go to state 85
    MUL             shift and go to state 86

  ! FIELD           [ reduce using rule 127 (expr2 -> expr MINUS expr .) ]
  ! TRANSPOSE       [ reduce using rule 127 (expr2 -> expr MINUS expr .) ]
  ! LBRACE          [ reduce using rule 127 (expr2 -> expr MINUS expr .) ]
  ! LPAREN          [ reduce using rule 127 (expr2 -> expr MINUS expr .) ]
  ! BACKSLASH       [ reduce using rule 127 (expr2 -> expr MINUS expr .) ]
  ! DIV             [ reduce using rule 127 (expr2 -> expr MINUS expr .) ]
  ! DOT             [ reduce using rule 127 (expr2 -> expr MINUS expr .) ]
  ! DOTDIV          [ reduce using rule 127 (expr2 -> expr MINUS expr .) ]
  ! DOTEXP          [ reduce using rule 127 (expr2 -> expr MINUS expr .) ]
  ! DOTMUL          [ reduce using rule 127 (expr2 -> expr MINUS expr .) ]
  ! EXP             [ reduce using rule 127 (expr2 -> expr MINUS expr .) ]
  ! MUL             [ reduce using rule 127 (expr2 -> expr MINUS expr .) ]
  ! AND             [ shift and go to state 105 ]
  ! ANDAND          [ shift and go to state 99 ]
  ! COLON           [ shift and go to state 96 ]
  ! EQ              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 100 ]
  ! LE              [ shift and go to state 91 ]
  ! LT              [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 89 ]
  ! NE              [ shift and go to state 84 ]
  ! OR              [ shift and go to state 107 ]
  ! OROR            [ shift and go to state 83 ]
  ! PLUS            [ shift and go to state 97 ]


state 143

    (117) expr2 -> expr DOT expr .
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    FIELD           reduce using rule 117 (expr2 -> expr DOT expr .)
    TRANSPOSE       reduce using rule 117 (expr2 -> expr DOT expr .)
    LBRACE          reduce using rule 117 (expr2 -> expr DOT expr .)
    LPAREN          reduce using rule 117 (expr2 -> expr DOT expr .)
    AND             reduce using rule 117 (expr2 -> expr DOT expr .)
    ANDAND          reduce using rule 117 (expr2 -> expr DOT expr .)
    BACKSLASH       reduce using rule 117 (expr2 -> expr DOT expr .)
    COLON           reduce using rule 117 (expr2 -> expr DOT expr .)
    DIV             reduce using rule 117 (expr2 -> expr DOT expr .)
    DOT             reduce using rule 117 (expr2 -> expr DOT expr .)
    DOTDIV          reduce using rule 117 (expr2 -> expr DOT expr .)
    DOTEXP          reduce using rule 117 (expr2 -> expr DOT expr .)
    DOTMUL          reduce using rule 117 (expr2 -> expr DOT expr .)
    EQ              reduce using rule 117 (expr2 -> expr DOT expr .)
    EXP             reduce using rule 117 (expr2 -> expr DOT expr .)
    GE              reduce using rule 117 (expr2 -> expr DOT expr .)
    GT              reduce using rule 117 (expr2 -> expr DOT expr .)
    LE              reduce using rule 117 (expr2 -> expr DOT expr .)
    LT              reduce using rule 117 (expr2 -> expr DOT expr .)
    MINUS           reduce using rule 117 (expr2 -> expr DOT expr .)
    MUL             reduce using rule 117 (expr2 -> expr DOT expr .)
    NE              reduce using rule 117 (expr2 -> expr DOT expr .)
    OR              reduce using rule 117 (expr2 -> expr DOT expr .)
    OROR            reduce using rule 117 (expr2 -> expr DOT expr .)
    PLUS            reduce using rule 117 (expr2 -> expr DOT expr .)
    RPAREN          reduce using rule 117 (expr2 -> expr DOT expr .)
    COMMA           reduce using rule 117 (expr2 -> expr DOT expr .)
    =               reduce using rule 117 (expr2 -> expr DOT expr .)
    SEMI            reduce using rule 117 (expr2 -> expr DOT expr .)
    RBRACKET        reduce using rule 117 (expr2 -> expr DOT expr .)
    RBRACE          reduce using rule 117 (expr2 -> expr DOT expr .)
    CASE            reduce using rule 117 (expr2 -> expr DOT expr .)
    OTHERWISE       reduce using rule 117 (expr2 -> expr DOT expr .)
    END_STMT        reduce using rule 117 (expr2 -> expr DOT expr .)
    error           reduce using rule 117 (expr2 -> expr DOT expr .)

  ! FIELD           [ shift and go to state 101 ]
  ! TRANSPOSE       [ shift and go to state 93 ]
  ! LBRACE          [ shift and go to state 106 ]
  ! LPAREN          [ shift and go to state 103 ]
  ! AND             [ shift and go to state 105 ]
  ! ANDAND          [ shift and go to state 99 ]
  ! BACKSLASH       [ shift and go to state 94 ]
  ! COLON           [ shift and go to state 96 ]
  ! DIV             [ shift and go to state 87 ]
  ! DOT             [ shift and go to state 90 ]
  ! DOTDIV          [ shift and go to state 82 ]
  ! DOTEXP          [ shift and go to state 104 ]
  ! DOTMUL          [ shift and go to state 88 ]
  ! EQ              [ shift and go to state 92 ]
  ! EXP             [ shift and go to state 85 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 100 ]
  ! LE              [ shift and go to state 91 ]
  ! LT              [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 89 ]
  ! MUL             [ shift and go to state 86 ]
  ! NE              [ shift and go to state 84 ]
  ! OR              [ shift and go to state 107 ]
  ! OROR            [ shift and go to state 83 ]
  ! PLUS            [ shift and go to state 97 ]


state 144

    (125) expr2 -> expr LE expr .
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    ANDAND          reduce using rule 125 (expr2 -> expr LE expr .)
    COLON           reduce using rule 125 (expr2 -> expr LE expr .)
    EQ              reduce using rule 125 (expr2 -> expr LE expr .)
    GE              reduce using rule 125 (expr2 -> expr LE expr .)
    GT              reduce using rule 125 (expr2 -> expr LE expr .)
    LE              reduce using rule 125 (expr2 -> expr LE expr .)
    LT              reduce using rule 125 (expr2 -> expr LE expr .)
    NE              reduce using rule 125 (expr2 -> expr LE expr .)
    OROR            reduce using rule 125 (expr2 -> expr LE expr .)
    RPAREN          reduce using rule 125 (expr2 -> expr LE expr .)
    COMMA           reduce using rule 125 (expr2 -> expr LE expr .)
    =               reduce using rule 125 (expr2 -> expr LE expr .)
    SEMI            reduce using rule 125 (expr2 -> expr LE expr .)
    RBRACKET        reduce using rule 125 (expr2 -> expr LE expr .)
    RBRACE          reduce using rule 125 (expr2 -> expr LE expr .)
    CASE            reduce using rule 125 (expr2 -> expr LE expr .)
    OTHERWISE       reduce using rule 125 (expr2 -> expr LE expr .)
    END_STMT        reduce using rule 125 (expr2 -> expr LE expr .)
    error           reduce using rule 125 (expr2 -> expr LE expr .)
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    AND             shift and go to state 105
    BACKSLASH       shift and go to state 94
    DIV             shift and go to state 87
    DOT             shift and go to state 90
    DOTDIV          shift and go to state 82
    DOTEXP          shift and go to state 104
    DOTMUL          shift and go to state 88
    EXP             shift and go to state 85
    MINUS           shift and go to state 89
    MUL             shift and go to state 86
    OR              shift and go to state 107
    PLUS            shift and go to state 97

  ! FIELD           [ reduce using rule 125 (expr2 -> expr LE expr .) ]
  ! TRANSPOSE       [ reduce using rule 125 (expr2 -> expr LE expr .) ]
  ! LBRACE          [ reduce using rule 125 (expr2 -> expr LE expr .) ]
  ! LPAREN          [ reduce using rule 125 (expr2 -> expr LE expr .) ]
  ! AND             [ reduce using rule 125 (expr2 -> expr LE expr .) ]
  ! BACKSLASH       [ reduce using rule 125 (expr2 -> expr LE expr .) ]
  ! DIV             [ reduce using rule 125 (expr2 -> expr LE expr .) ]
  ! DOT             [ reduce using rule 125 (expr2 -> expr LE expr .) ]
  ! DOTDIV          [ reduce using rule 125 (expr2 -> expr LE expr .) ]
  ! DOTEXP          [ reduce using rule 125 (expr2 -> expr LE expr .) ]
  ! DOTMUL          [ reduce using rule 125 (expr2 -> expr LE expr .) ]
  ! EXP             [ reduce using rule 125 (expr2 -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 125 (expr2 -> expr LE expr .) ]
  ! MUL             [ reduce using rule 125 (expr2 -> expr LE expr .) ]
  ! OR              [ reduce using rule 125 (expr2 -> expr LE expr .) ]
  ! PLUS            [ reduce using rule 125 (expr2 -> expr LE expr .) ]
  ! ANDAND          [ shift and go to state 99 ]
  ! COLON           [ shift and go to state 96 ]
  ! EQ              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 100 ]
  ! LE              [ shift and go to state 91 ]
  ! LT              [ shift and go to state 95 ]
  ! NE              [ shift and go to state 84 ]
  ! OROR            [ shift and go to state 83 ]


state 145

    (121) expr2 -> expr EQ expr .
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    ANDAND          reduce using rule 121 (expr2 -> expr EQ expr .)
    COLON           reduce using rule 121 (expr2 -> expr EQ expr .)
    EQ              reduce using rule 121 (expr2 -> expr EQ expr .)
    GE              reduce using rule 121 (expr2 -> expr EQ expr .)
    GT              reduce using rule 121 (expr2 -> expr EQ expr .)
    LE              reduce using rule 121 (expr2 -> expr EQ expr .)
    LT              reduce using rule 121 (expr2 -> expr EQ expr .)
    NE              reduce using rule 121 (expr2 -> expr EQ expr .)
    OROR            reduce using rule 121 (expr2 -> expr EQ expr .)
    RPAREN          reduce using rule 121 (expr2 -> expr EQ expr .)
    COMMA           reduce using rule 121 (expr2 -> expr EQ expr .)
    =               reduce using rule 121 (expr2 -> expr EQ expr .)
    SEMI            reduce using rule 121 (expr2 -> expr EQ expr .)
    RBRACKET        reduce using rule 121 (expr2 -> expr EQ expr .)
    RBRACE          reduce using rule 121 (expr2 -> expr EQ expr .)
    CASE            reduce using rule 121 (expr2 -> expr EQ expr .)
    OTHERWISE       reduce using rule 121 (expr2 -> expr EQ expr .)
    END_STMT        reduce using rule 121 (expr2 -> expr EQ expr .)
    error           reduce using rule 121 (expr2 -> expr EQ expr .)
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    AND             shift and go to state 105
    BACKSLASH       shift and go to state 94
    DIV             shift and go to state 87
    DOT             shift and go to state 90
    DOTDIV          shift and go to state 82
    DOTEXP          shift and go to state 104
    DOTMUL          shift and go to state 88
    EXP             shift and go to state 85
    MINUS           shift and go to state 89
    MUL             shift and go to state 86
    OR              shift and go to state 107
    PLUS            shift and go to state 97

  ! FIELD           [ reduce using rule 121 (expr2 -> expr EQ expr .) ]
  ! TRANSPOSE       [ reduce using rule 121 (expr2 -> expr EQ expr .) ]
  ! LBRACE          [ reduce using rule 121 (expr2 -> expr EQ expr .) ]
  ! LPAREN          [ reduce using rule 121 (expr2 -> expr EQ expr .) ]
  ! AND             [ reduce using rule 121 (expr2 -> expr EQ expr .) ]
  ! BACKSLASH       [ reduce using rule 121 (expr2 -> expr EQ expr .) ]
  ! DIV             [ reduce using rule 121 (expr2 -> expr EQ expr .) ]
  ! DOT             [ reduce using rule 121 (expr2 -> expr EQ expr .) ]
  ! DOTDIV          [ reduce using rule 121 (expr2 -> expr EQ expr .) ]
  ! DOTEXP          [ reduce using rule 121 (expr2 -> expr EQ expr .) ]
  ! DOTMUL          [ reduce using rule 121 (expr2 -> expr EQ expr .) ]
  ! EXP             [ reduce using rule 121 (expr2 -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 121 (expr2 -> expr EQ expr .) ]
  ! MUL             [ reduce using rule 121 (expr2 -> expr EQ expr .) ]
  ! OR              [ reduce using rule 121 (expr2 -> expr EQ expr .) ]
  ! PLUS            [ reduce using rule 121 (expr2 -> expr EQ expr .) ]
  ! ANDAND          [ shift and go to state 99 ]
  ! COLON           [ shift and go to state 96 ]
  ! EQ              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 100 ]
  ! LE              [ shift and go to state 91 ]
  ! LT              [ shift and go to state 95 ]
  ! NE              [ shift and go to state 84 ]
  ! OROR            [ shift and go to state 83 ]


state 146

    (114) expr2 -> expr BACKSLASH expr .
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    AND             reduce using rule 114 (expr2 -> expr BACKSLASH expr .)
    ANDAND          reduce using rule 114 (expr2 -> expr BACKSLASH expr .)
    BACKSLASH       reduce using rule 114 (expr2 -> expr BACKSLASH expr .)
    COLON           reduce using rule 114 (expr2 -> expr BACKSLASH expr .)
    DIV             reduce using rule 114 (expr2 -> expr BACKSLASH expr .)
    DOTDIV          reduce using rule 114 (expr2 -> expr BACKSLASH expr .)
    DOTMUL          reduce using rule 114 (expr2 -> expr BACKSLASH expr .)
    EQ              reduce using rule 114 (expr2 -> expr BACKSLASH expr .)
    GE              reduce using rule 114 (expr2 -> expr BACKSLASH expr .)
    GT              reduce using rule 114 (expr2 -> expr BACKSLASH expr .)
    LE              reduce using rule 114 (expr2 -> expr BACKSLASH expr .)
    LT              reduce using rule 114 (expr2 -> expr BACKSLASH expr .)
    MINUS           reduce using rule 114 (expr2 -> expr BACKSLASH expr .)
    MUL             reduce using rule 114 (expr2 -> expr BACKSLASH expr .)
    NE              reduce using rule 114 (expr2 -> expr BACKSLASH expr .)
    OR              reduce using rule 114 (expr2 -> expr BACKSLASH expr .)
    OROR            reduce using rule 114 (expr2 -> expr BACKSLASH expr .)
    PLUS            reduce using rule 114 (expr2 -> expr BACKSLASH expr .)
    RPAREN          reduce using rule 114 (expr2 -> expr BACKSLASH expr .)
    COMMA           reduce using rule 114 (expr2 -> expr BACKSLASH expr .)
    =               reduce using rule 114 (expr2 -> expr BACKSLASH expr .)
    SEMI            reduce using rule 114 (expr2 -> expr BACKSLASH expr .)
    RBRACKET        reduce using rule 114 (expr2 -> expr BACKSLASH expr .)
    RBRACE          reduce using rule 114 (expr2 -> expr BACKSLASH expr .)
    CASE            reduce using rule 114 (expr2 -> expr BACKSLASH expr .)
    OTHERWISE       reduce using rule 114 (expr2 -> expr BACKSLASH expr .)
    END_STMT        reduce using rule 114 (expr2 -> expr BACKSLASH expr .)
    error           reduce using rule 114 (expr2 -> expr BACKSLASH expr .)
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    DOT             shift and go to state 90
    DOTEXP          shift and go to state 104
    EXP             shift and go to state 85

  ! FIELD           [ reduce using rule 114 (expr2 -> expr BACKSLASH expr .) ]
  ! TRANSPOSE       [ reduce using rule 114 (expr2 -> expr BACKSLASH expr .) ]
  ! LBRACE          [ reduce using rule 114 (expr2 -> expr BACKSLASH expr .) ]
  ! LPAREN          [ reduce using rule 114 (expr2 -> expr BACKSLASH expr .) ]
  ! DOT             [ reduce using rule 114 (expr2 -> expr BACKSLASH expr .) ]
  ! DOTEXP          [ reduce using rule 114 (expr2 -> expr BACKSLASH expr .) ]
  ! EXP             [ reduce using rule 114 (expr2 -> expr BACKSLASH expr .) ]
  ! AND             [ shift and go to state 105 ]
  ! ANDAND          [ shift and go to state 99 ]
  ! BACKSLASH       [ shift and go to state 94 ]
  ! COLON           [ shift and go to state 96 ]
  ! DIV             [ shift and go to state 87 ]
  ! DOTDIV          [ shift and go to state 82 ]
  ! DOTMUL          [ shift and go to state 88 ]
  ! EQ              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 100 ]
  ! LE              [ shift and go to state 91 ]
  ! LT              [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 89 ]
  ! MUL             [ shift and go to state 86 ]
  ! NE              [ shift and go to state 84 ]
  ! OR              [ shift and go to state 107 ]
  ! OROR            [ shift and go to state 83 ]
  ! PLUS            [ shift and go to state 97 ]


state 147

    (126) expr2 -> expr LT expr .
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    ANDAND          reduce using rule 126 (expr2 -> expr LT expr .)
    COLON           reduce using rule 126 (expr2 -> expr LT expr .)
    EQ              reduce using rule 126 (expr2 -> expr LT expr .)
    GE              reduce using rule 126 (expr2 -> expr LT expr .)
    GT              reduce using rule 126 (expr2 -> expr LT expr .)
    LE              reduce using rule 126 (expr2 -> expr LT expr .)
    LT              reduce using rule 126 (expr2 -> expr LT expr .)
    NE              reduce using rule 126 (expr2 -> expr LT expr .)
    OROR            reduce using rule 126 (expr2 -> expr LT expr .)
    RPAREN          reduce using rule 126 (expr2 -> expr LT expr .)
    COMMA           reduce using rule 126 (expr2 -> expr LT expr .)
    =               reduce using rule 126 (expr2 -> expr LT expr .)
    SEMI            reduce using rule 126 (expr2 -> expr LT expr .)
    RBRACKET        reduce using rule 126 (expr2 -> expr LT expr .)
    RBRACE          reduce using rule 126 (expr2 -> expr LT expr .)
    CASE            reduce using rule 126 (expr2 -> expr LT expr .)
    OTHERWISE       reduce using rule 126 (expr2 -> expr LT expr .)
    END_STMT        reduce using rule 126 (expr2 -> expr LT expr .)
    error           reduce using rule 126 (expr2 -> expr LT expr .)
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    AND             shift and go to state 105
    BACKSLASH       shift and go to state 94
    DIV             shift and go to state 87
    DOT             shift and go to state 90
    DOTDIV          shift and go to state 82
    DOTEXP          shift and go to state 104
    DOTMUL          shift and go to state 88
    EXP             shift and go to state 85
    MINUS           shift and go to state 89
    MUL             shift and go to state 86
    OR              shift and go to state 107
    PLUS            shift and go to state 97

  ! FIELD           [ reduce using rule 126 (expr2 -> expr LT expr .) ]
  ! TRANSPOSE       [ reduce using rule 126 (expr2 -> expr LT expr .) ]
  ! LBRACE          [ reduce using rule 126 (expr2 -> expr LT expr .) ]
  ! LPAREN          [ reduce using rule 126 (expr2 -> expr LT expr .) ]
  ! AND             [ reduce using rule 126 (expr2 -> expr LT expr .) ]
  ! BACKSLASH       [ reduce using rule 126 (expr2 -> expr LT expr .) ]
  ! DIV             [ reduce using rule 126 (expr2 -> expr LT expr .) ]
  ! DOT             [ reduce using rule 126 (expr2 -> expr LT expr .) ]
  ! DOTDIV          [ reduce using rule 126 (expr2 -> expr LT expr .) ]
  ! DOTEXP          [ reduce using rule 126 (expr2 -> expr LT expr .) ]
  ! DOTMUL          [ reduce using rule 126 (expr2 -> expr LT expr .) ]
  ! EXP             [ reduce using rule 126 (expr2 -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 126 (expr2 -> expr LT expr .) ]
  ! MUL             [ reduce using rule 126 (expr2 -> expr LT expr .) ]
  ! OR              [ reduce using rule 126 (expr2 -> expr LT expr .) ]
  ! PLUS            [ reduce using rule 126 (expr2 -> expr LT expr .) ]
  ! ANDAND          [ shift and go to state 99 ]
  ! COLON           [ shift and go to state 96 ]
  ! EQ              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 100 ]
  ! LE              [ shift and go to state 91 ]
  ! LT              [ shift and go to state 95 ]
  ! NE              [ shift and go to state 84 ]
  ! OROR            [ shift and go to state 83 ]


state 148

    (115) expr2 -> expr COLON expr .
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    COLON           reduce using rule 115 (expr2 -> expr COLON expr .)
    RPAREN          reduce using rule 115 (expr2 -> expr COLON expr .)
    COMMA           reduce using rule 115 (expr2 -> expr COLON expr .)
    =               reduce using rule 115 (expr2 -> expr COLON expr .)
    SEMI            reduce using rule 115 (expr2 -> expr COLON expr .)
    RBRACKET        reduce using rule 115 (expr2 -> expr COLON expr .)
    RBRACE          reduce using rule 115 (expr2 -> expr COLON expr .)
    CASE            reduce using rule 115 (expr2 -> expr COLON expr .)
    OTHERWISE       reduce using rule 115 (expr2 -> expr COLON expr .)
    END_STMT        reduce using rule 115 (expr2 -> expr COLON expr .)
    error           reduce using rule 115 (expr2 -> expr COLON expr .)
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    AND             shift and go to state 105
    ANDAND          shift and go to state 99
    BACKSLASH       shift and go to state 94
    DIV             shift and go to state 87
    DOT             shift and go to state 90
    DOTDIV          shift and go to state 82
    DOTEXP          shift and go to state 104
    DOTMUL          shift and go to state 88
    EQ              shift and go to state 92
    EXP             shift and go to state 85
    GE              shift and go to state 102
    GT              shift and go to state 100
    LE              shift and go to state 91
    LT              shift and go to state 95
    MINUS           shift and go to state 89
    MUL             shift and go to state 86
    NE              shift and go to state 84
    OR              shift and go to state 107
    OROR            shift and go to state 83
    PLUS            shift and go to state 97

  ! FIELD           [ reduce using rule 115 (expr2 -> expr COLON expr .) ]
  ! TRANSPOSE       [ reduce using rule 115 (expr2 -> expr COLON expr .) ]
  ! LBRACE          [ reduce using rule 115 (expr2 -> expr COLON expr .) ]
  ! LPAREN          [ reduce using rule 115 (expr2 -> expr COLON expr .) ]
  ! AND             [ reduce using rule 115 (expr2 -> expr COLON expr .) ]
  ! ANDAND          [ reduce using rule 115 (expr2 -> expr COLON expr .) ]
  ! BACKSLASH       [ reduce using rule 115 (expr2 -> expr COLON expr .) ]
  ! DIV             [ reduce using rule 115 (expr2 -> expr COLON expr .) ]
  ! DOT             [ reduce using rule 115 (expr2 -> expr COLON expr .) ]
  ! DOTDIV          [ reduce using rule 115 (expr2 -> expr COLON expr .) ]
  ! DOTEXP          [ reduce using rule 115 (expr2 -> expr COLON expr .) ]
  ! DOTMUL          [ reduce using rule 115 (expr2 -> expr COLON expr .) ]
  ! EQ              [ reduce using rule 115 (expr2 -> expr COLON expr .) ]
  ! EXP             [ reduce using rule 115 (expr2 -> expr COLON expr .) ]
  ! GE              [ reduce using rule 115 (expr2 -> expr COLON expr .) ]
  ! GT              [ reduce using rule 115 (expr2 -> expr COLON expr .) ]
  ! LE              [ reduce using rule 115 (expr2 -> expr COLON expr .) ]
  ! LT              [ reduce using rule 115 (expr2 -> expr COLON expr .) ]
  ! MINUS           [ reduce using rule 115 (expr2 -> expr COLON expr .) ]
  ! MUL             [ reduce using rule 115 (expr2 -> expr COLON expr .) ]
  ! NE              [ reduce using rule 115 (expr2 -> expr COLON expr .) ]
  ! OR              [ reduce using rule 115 (expr2 -> expr COLON expr .) ]
  ! OROR            [ reduce using rule 115 (expr2 -> expr COLON expr .) ]
  ! PLUS            [ reduce using rule 115 (expr2 -> expr COLON expr .) ]
  ! COLON           [ shift and go to state 96 ]


state 149

    (132) expr2 -> expr PLUS expr .
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    AND             reduce using rule 132 (expr2 -> expr PLUS expr .)
    ANDAND          reduce using rule 132 (expr2 -> expr PLUS expr .)
    COLON           reduce using rule 132 (expr2 -> expr PLUS expr .)
    EQ              reduce using rule 132 (expr2 -> expr PLUS expr .)
    GE              reduce using rule 132 (expr2 -> expr PLUS expr .)
    GT              reduce using rule 132 (expr2 -> expr PLUS expr .)
    LE              reduce using rule 132 (expr2 -> expr PLUS expr .)
    LT              reduce using rule 132 (expr2 -> expr PLUS expr .)
    MINUS           reduce using rule 132 (expr2 -> expr PLUS expr .)
    NE              reduce using rule 132 (expr2 -> expr PLUS expr .)
    OR              reduce using rule 132 (expr2 -> expr PLUS expr .)
    OROR            reduce using rule 132 (expr2 -> expr PLUS expr .)
    PLUS            reduce using rule 132 (expr2 -> expr PLUS expr .)
    RPAREN          reduce using rule 132 (expr2 -> expr PLUS expr .)
    COMMA           reduce using rule 132 (expr2 -> expr PLUS expr .)
    =               reduce using rule 132 (expr2 -> expr PLUS expr .)
    SEMI            reduce using rule 132 (expr2 -> expr PLUS expr .)
    RBRACKET        reduce using rule 132 (expr2 -> expr PLUS expr .)
    RBRACE          reduce using rule 132 (expr2 -> expr PLUS expr .)
    CASE            reduce using rule 132 (expr2 -> expr PLUS expr .)
    OTHERWISE       reduce using rule 132 (expr2 -> expr PLUS expr .)
    END_STMT        reduce using rule 132 (expr2 -> expr PLUS expr .)
    error           reduce using rule 132 (expr2 -> expr PLUS expr .)
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    BACKSLASH       shift and go to state 94
    DIV             shift and go to state 87
    DOT             shift and go to state 90
    DOTDIV          shift and go to state 82
    DOTEXP          shift and go to state 104
    DOTMUL          shift and go to state 88
    EXP             shift and go to state 85
    MUL             shift and go to state 86

  ! FIELD           [ reduce using rule 132 (expr2 -> expr PLUS expr .) ]
  ! TRANSPOSE       [ reduce using rule 132 (expr2 -> expr PLUS expr .) ]
  ! LBRACE          [ reduce using rule 132 (expr2 -> expr PLUS expr .) ]
  ! LPAREN          [ reduce using rule 132 (expr2 -> expr PLUS expr .) ]
  ! BACKSLASH       [ reduce using rule 132 (expr2 -> expr PLUS expr .) ]
  ! DIV             [ reduce using rule 132 (expr2 -> expr PLUS expr .) ]
  ! DOT             [ reduce using rule 132 (expr2 -> expr PLUS expr .) ]
  ! DOTDIV          [ reduce using rule 132 (expr2 -> expr PLUS expr .) ]
  ! DOTEXP          [ reduce using rule 132 (expr2 -> expr PLUS expr .) ]
  ! DOTMUL          [ reduce using rule 132 (expr2 -> expr PLUS expr .) ]
  ! EXP             [ reduce using rule 132 (expr2 -> expr PLUS expr .) ]
  ! MUL             [ reduce using rule 132 (expr2 -> expr PLUS expr .) ]
  ! AND             [ shift and go to state 105 ]
  ! ANDAND          [ shift and go to state 99 ]
  ! COLON           [ shift and go to state 96 ]
  ! EQ              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 100 ]
  ! LE              [ shift and go to state 91 ]
  ! LT              [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 89 ]
  ! NE              [ shift and go to state 84 ]
  ! OR              [ shift and go to state 107 ]
  ! OROR            [ shift and go to state 83 ]
  ! PLUS            [ shift and go to state 97 ]


state 150

    (72) let -> expr = expr . SEMI
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    SEMI            shift and go to state 190
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    AND             shift and go to state 105
    ANDAND          shift and go to state 99
    BACKSLASH       shift and go to state 94
    COLON           shift and go to state 96
    DIV             shift and go to state 87
    DOT             shift and go to state 90
    DOTDIV          shift and go to state 82
    DOTEXP          shift and go to state 104
    DOTMUL          shift and go to state 88
    EQ              shift and go to state 92
    EXP             shift and go to state 85
    GE              shift and go to state 102
    GT              shift and go to state 100
    LE              shift and go to state 91
    LT              shift and go to state 95
    MINUS           shift and go to state 89
    MUL             shift and go to state 86
    NE              shift and go to state 84
    OR              shift and go to state 107
    OROR            shift and go to state 83
    PLUS            shift and go to state 97


state 151

    (113) expr2 -> expr ANDAND expr .
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    ANDAND          reduce using rule 113 (expr2 -> expr ANDAND expr .)
    COLON           reduce using rule 113 (expr2 -> expr ANDAND expr .)
    OROR            reduce using rule 113 (expr2 -> expr ANDAND expr .)
    RPAREN          reduce using rule 113 (expr2 -> expr ANDAND expr .)
    COMMA           reduce using rule 113 (expr2 -> expr ANDAND expr .)
    =               reduce using rule 113 (expr2 -> expr ANDAND expr .)
    SEMI            reduce using rule 113 (expr2 -> expr ANDAND expr .)
    RBRACKET        reduce using rule 113 (expr2 -> expr ANDAND expr .)
    RBRACE          reduce using rule 113 (expr2 -> expr ANDAND expr .)
    CASE            reduce using rule 113 (expr2 -> expr ANDAND expr .)
    OTHERWISE       reduce using rule 113 (expr2 -> expr ANDAND expr .)
    END_STMT        reduce using rule 113 (expr2 -> expr ANDAND expr .)
    error           reduce using rule 113 (expr2 -> expr ANDAND expr .)
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    AND             shift and go to state 105
    BACKSLASH       shift and go to state 94
    DIV             shift and go to state 87
    DOT             shift and go to state 90
    DOTDIV          shift and go to state 82
    DOTEXP          shift and go to state 104
    DOTMUL          shift and go to state 88
    EQ              shift and go to state 92
    EXP             shift and go to state 85
    GE              shift and go to state 102
    GT              shift and go to state 100
    LE              shift and go to state 91
    LT              shift and go to state 95
    MINUS           shift and go to state 89
    MUL             shift and go to state 86
    NE              shift and go to state 84
    OR              shift and go to state 107
    PLUS            shift and go to state 97

  ! FIELD           [ reduce using rule 113 (expr2 -> expr ANDAND expr .) ]
  ! TRANSPOSE       [ reduce using rule 113 (expr2 -> expr ANDAND expr .) ]
  ! LBRACE          [ reduce using rule 113 (expr2 -> expr ANDAND expr .) ]
  ! LPAREN          [ reduce using rule 113 (expr2 -> expr ANDAND expr .) ]
  ! AND             [ reduce using rule 113 (expr2 -> expr ANDAND expr .) ]
  ! BACKSLASH       [ reduce using rule 113 (expr2 -> expr ANDAND expr .) ]
  ! DIV             [ reduce using rule 113 (expr2 -> expr ANDAND expr .) ]
  ! DOT             [ reduce using rule 113 (expr2 -> expr ANDAND expr .) ]
  ! DOTDIV          [ reduce using rule 113 (expr2 -> expr ANDAND expr .) ]
  ! DOTEXP          [ reduce using rule 113 (expr2 -> expr ANDAND expr .) ]
  ! DOTMUL          [ reduce using rule 113 (expr2 -> expr ANDAND expr .) ]
  ! EQ              [ reduce using rule 113 (expr2 -> expr ANDAND expr .) ]
  ! EXP             [ reduce using rule 113 (expr2 -> expr ANDAND expr .) ]
  ! GE              [ reduce using rule 113 (expr2 -> expr ANDAND expr .) ]
  ! GT              [ reduce using rule 113 (expr2 -> expr ANDAND expr .) ]
  ! LE              [ reduce using rule 113 (expr2 -> expr ANDAND expr .) ]
  ! LT              [ reduce using rule 113 (expr2 -> expr ANDAND expr .) ]
  ! MINUS           [ reduce using rule 113 (expr2 -> expr ANDAND expr .) ]
  ! MUL             [ reduce using rule 113 (expr2 -> expr ANDAND expr .) ]
  ! NE              [ reduce using rule 113 (expr2 -> expr ANDAND expr .) ]
  ! OR              [ reduce using rule 113 (expr2 -> expr ANDAND expr .) ]
  ! PLUS            [ reduce using rule 113 (expr2 -> expr ANDAND expr .) ]
  ! ANDAND          [ shift and go to state 99 ]
  ! COLON           [ shift and go to state 96 ]
  ! OROR            [ shift and go to state 83 ]


state 152

    (124) expr2 -> expr GT expr .
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    ANDAND          reduce using rule 124 (expr2 -> expr GT expr .)
    COLON           reduce using rule 124 (expr2 -> expr GT expr .)
    EQ              reduce using rule 124 (expr2 -> expr GT expr .)
    GE              reduce using rule 124 (expr2 -> expr GT expr .)
    GT              reduce using rule 124 (expr2 -> expr GT expr .)
    LE              reduce using rule 124 (expr2 -> expr GT expr .)
    LT              reduce using rule 124 (expr2 -> expr GT expr .)
    NE              reduce using rule 124 (expr2 -> expr GT expr .)
    OROR            reduce using rule 124 (expr2 -> expr GT expr .)
    RPAREN          reduce using rule 124 (expr2 -> expr GT expr .)
    COMMA           reduce using rule 124 (expr2 -> expr GT expr .)
    =               reduce using rule 124 (expr2 -> expr GT expr .)
    SEMI            reduce using rule 124 (expr2 -> expr GT expr .)
    RBRACKET        reduce using rule 124 (expr2 -> expr GT expr .)
    RBRACE          reduce using rule 124 (expr2 -> expr GT expr .)
    CASE            reduce using rule 124 (expr2 -> expr GT expr .)
    OTHERWISE       reduce using rule 124 (expr2 -> expr GT expr .)
    END_STMT        reduce using rule 124 (expr2 -> expr GT expr .)
    error           reduce using rule 124 (expr2 -> expr GT expr .)
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    AND             shift and go to state 105
    BACKSLASH       shift and go to state 94
    DIV             shift and go to state 87
    DOT             shift and go to state 90
    DOTDIV          shift and go to state 82
    DOTEXP          shift and go to state 104
    DOTMUL          shift and go to state 88
    EXP             shift and go to state 85
    MINUS           shift and go to state 89
    MUL             shift and go to state 86
    OR              shift and go to state 107
    PLUS            shift and go to state 97

  ! FIELD           [ reduce using rule 124 (expr2 -> expr GT expr .) ]
  ! TRANSPOSE       [ reduce using rule 124 (expr2 -> expr GT expr .) ]
  ! LBRACE          [ reduce using rule 124 (expr2 -> expr GT expr .) ]
  ! LPAREN          [ reduce using rule 124 (expr2 -> expr GT expr .) ]
  ! AND             [ reduce using rule 124 (expr2 -> expr GT expr .) ]
  ! BACKSLASH       [ reduce using rule 124 (expr2 -> expr GT expr .) ]
  ! DIV             [ reduce using rule 124 (expr2 -> expr GT expr .) ]
  ! DOT             [ reduce using rule 124 (expr2 -> expr GT expr .) ]
  ! DOTDIV          [ reduce using rule 124 (expr2 -> expr GT expr .) ]
  ! DOTEXP          [ reduce using rule 124 (expr2 -> expr GT expr .) ]
  ! DOTMUL          [ reduce using rule 124 (expr2 -> expr GT expr .) ]
  ! EXP             [ reduce using rule 124 (expr2 -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 124 (expr2 -> expr GT expr .) ]
  ! MUL             [ reduce using rule 124 (expr2 -> expr GT expr .) ]
  ! OR              [ reduce using rule 124 (expr2 -> expr GT expr .) ]
  ! PLUS            [ reduce using rule 124 (expr2 -> expr GT expr .) ]
  ! ANDAND          [ shift and go to state 99 ]
  ! COLON           [ shift and go to state 96 ]
  ! EQ              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 100 ]
  ! LE              [ shift and go to state 91 ]
  ! LT              [ shift and go to state 95 ]
  ! NE              [ shift and go to state 84 ]
  ! OROR            [ shift and go to state 83 ]


state 153

    (123) expr2 -> expr GE expr .
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    ANDAND          reduce using rule 123 (expr2 -> expr GE expr .)
    COLON           reduce using rule 123 (expr2 -> expr GE expr .)
    EQ              reduce using rule 123 (expr2 -> expr GE expr .)
    GE              reduce using rule 123 (expr2 -> expr GE expr .)
    GT              reduce using rule 123 (expr2 -> expr GE expr .)
    LE              reduce using rule 123 (expr2 -> expr GE expr .)
    LT              reduce using rule 123 (expr2 -> expr GE expr .)
    NE              reduce using rule 123 (expr2 -> expr GE expr .)
    OROR            reduce using rule 123 (expr2 -> expr GE expr .)
    RPAREN          reduce using rule 123 (expr2 -> expr GE expr .)
    COMMA           reduce using rule 123 (expr2 -> expr GE expr .)
    =               reduce using rule 123 (expr2 -> expr GE expr .)
    SEMI            reduce using rule 123 (expr2 -> expr GE expr .)
    RBRACKET        reduce using rule 123 (expr2 -> expr GE expr .)
    RBRACE          reduce using rule 123 (expr2 -> expr GE expr .)
    CASE            reduce using rule 123 (expr2 -> expr GE expr .)
    OTHERWISE       reduce using rule 123 (expr2 -> expr GE expr .)
    END_STMT        reduce using rule 123 (expr2 -> expr GE expr .)
    error           reduce using rule 123 (expr2 -> expr GE expr .)
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    AND             shift and go to state 105
    BACKSLASH       shift and go to state 94
    DIV             shift and go to state 87
    DOT             shift and go to state 90
    DOTDIV          shift and go to state 82
    DOTEXP          shift and go to state 104
    DOTMUL          shift and go to state 88
    EXP             shift and go to state 85
    MINUS           shift and go to state 89
    MUL             shift and go to state 86
    OR              shift and go to state 107
    PLUS            shift and go to state 97

  ! FIELD           [ reduce using rule 123 (expr2 -> expr GE expr .) ]
  ! TRANSPOSE       [ reduce using rule 123 (expr2 -> expr GE expr .) ]
  ! LBRACE          [ reduce using rule 123 (expr2 -> expr GE expr .) ]
  ! LPAREN          [ reduce using rule 123 (expr2 -> expr GE expr .) ]
  ! AND             [ reduce using rule 123 (expr2 -> expr GE expr .) ]
  ! BACKSLASH       [ reduce using rule 123 (expr2 -> expr GE expr .) ]
  ! DIV             [ reduce using rule 123 (expr2 -> expr GE expr .) ]
  ! DOT             [ reduce using rule 123 (expr2 -> expr GE expr .) ]
  ! DOTDIV          [ reduce using rule 123 (expr2 -> expr GE expr .) ]
  ! DOTEXP          [ reduce using rule 123 (expr2 -> expr GE expr .) ]
  ! DOTMUL          [ reduce using rule 123 (expr2 -> expr GE expr .) ]
  ! EXP             [ reduce using rule 123 (expr2 -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 123 (expr2 -> expr GE expr .) ]
  ! MUL             [ reduce using rule 123 (expr2 -> expr GE expr .) ]
  ! OR              [ reduce using rule 123 (expr2 -> expr GE expr .) ]
  ! PLUS            [ reduce using rule 123 (expr2 -> expr GE expr .) ]
  ! ANDAND          [ shift and go to state 99 ]
  ! COLON           [ shift and go to state 96 ]
  ! EQ              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 100 ]
  ! LE              [ shift and go to state 91 ]
  ! LT              [ shift and go to state 95 ]
  ! NE              [ shift and go to state 84 ]
  ! OROR            [ shift and go to state 83 ]


state 154

    (110) expr -> expr LPAREN expr_list . RPAREN

    RPAREN          shift and go to state 191


state 155

    (111) expr -> expr LPAREN RPAREN .

    RPAREN          reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    FIELD           reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    TRANSPOSE       reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    LBRACE          reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    LPAREN          reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    AND             reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    ANDAND          reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    BACKSLASH       reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    COLON           reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    DIV             reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    DOT             reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    DOTDIV          reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    DOTEXP          reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    DOTMUL          reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    EQ              reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    EXP             reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    GE              reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    GT              reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    LE              reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    LT              reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    MINUS           reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    MUL             reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    NE              reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    OR              reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    OROR            reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    PLUS            reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    =               reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    COMMA           reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    SEMI            reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    RBRACKET        reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    RBRACE          reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    CASE            reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    OTHERWISE       reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    END_STMT        reduce using rule 111 (expr -> expr LPAREN RPAREN .)
    error           reduce using rule 111 (expr -> expr LPAREN RPAREN .)


state 156

    (119) expr2 -> expr DOTEXP expr .
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    TRANSPOSE       reduce using rule 119 (expr2 -> expr DOTEXP expr .)
    AND             reduce using rule 119 (expr2 -> expr DOTEXP expr .)
    ANDAND          reduce using rule 119 (expr2 -> expr DOTEXP expr .)
    BACKSLASH       reduce using rule 119 (expr2 -> expr DOTEXP expr .)
    COLON           reduce using rule 119 (expr2 -> expr DOTEXP expr .)
    DIV             reduce using rule 119 (expr2 -> expr DOTEXP expr .)
    DOTDIV          reduce using rule 119 (expr2 -> expr DOTEXP expr .)
    DOTMUL          reduce using rule 119 (expr2 -> expr DOTEXP expr .)
    EQ              reduce using rule 119 (expr2 -> expr DOTEXP expr .)
    GE              reduce using rule 119 (expr2 -> expr DOTEXP expr .)
    GT              reduce using rule 119 (expr2 -> expr DOTEXP expr .)
    LE              reduce using rule 119 (expr2 -> expr DOTEXP expr .)
    LT              reduce using rule 119 (expr2 -> expr DOTEXP expr .)
    MINUS           reduce using rule 119 (expr2 -> expr DOTEXP expr .)
    MUL             reduce using rule 119 (expr2 -> expr DOTEXP expr .)
    NE              reduce using rule 119 (expr2 -> expr DOTEXP expr .)
    OR              reduce using rule 119 (expr2 -> expr DOTEXP expr .)
    OROR            reduce using rule 119 (expr2 -> expr DOTEXP expr .)
    PLUS            reduce using rule 119 (expr2 -> expr DOTEXP expr .)
    RPAREN          reduce using rule 119 (expr2 -> expr DOTEXP expr .)
    COMMA           reduce using rule 119 (expr2 -> expr DOTEXP expr .)
    =               reduce using rule 119 (expr2 -> expr DOTEXP expr .)
    SEMI            reduce using rule 119 (expr2 -> expr DOTEXP expr .)
    RBRACKET        reduce using rule 119 (expr2 -> expr DOTEXP expr .)
    RBRACE          reduce using rule 119 (expr2 -> expr DOTEXP expr .)
    CASE            reduce using rule 119 (expr2 -> expr DOTEXP expr .)
    OTHERWISE       reduce using rule 119 (expr2 -> expr DOTEXP expr .)
    END_STMT        reduce using rule 119 (expr2 -> expr DOTEXP expr .)
    error           reduce using rule 119 (expr2 -> expr DOTEXP expr .)
    FIELD           shift and go to state 101
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    DOT             shift and go to state 90
    DOTEXP          shift and go to state 104
    EXP             shift and go to state 85

  ! FIELD           [ reduce using rule 119 (expr2 -> expr DOTEXP expr .) ]
  ! LBRACE          [ reduce using rule 119 (expr2 -> expr DOTEXP expr .) ]
  ! LPAREN          [ reduce using rule 119 (expr2 -> expr DOTEXP expr .) ]
  ! DOT             [ reduce using rule 119 (expr2 -> expr DOTEXP expr .) ]
  ! DOTEXP          [ reduce using rule 119 (expr2 -> expr DOTEXP expr .) ]
  ! EXP             [ reduce using rule 119 (expr2 -> expr DOTEXP expr .) ]
  ! TRANSPOSE       [ shift and go to state 93 ]
  ! AND             [ shift and go to state 105 ]
  ! ANDAND          [ shift and go to state 99 ]
  ! BACKSLASH       [ shift and go to state 94 ]
  ! COLON           [ shift and go to state 96 ]
  ! DIV             [ shift and go to state 87 ]
  ! DOTDIV          [ shift and go to state 82 ]
  ! DOTMUL          [ shift and go to state 88 ]
  ! EQ              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 100 ]
  ! LE              [ shift and go to state 91 ]
  ! LT              [ shift and go to state 95 ]
  ! MINUS           [ shift and go to state 89 ]
  ! MUL             [ shift and go to state 86 ]
  ! NE              [ shift and go to state 84 ]
  ! OR              [ shift and go to state 107 ]
  ! OROR            [ shift and go to state 83 ]
  ! PLUS            [ shift and go to state 97 ]


state 157

    (112) expr2 -> expr AND expr .
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    AND             reduce using rule 112 (expr2 -> expr AND expr .)
    ANDAND          reduce using rule 112 (expr2 -> expr AND expr .)
    COLON           reduce using rule 112 (expr2 -> expr AND expr .)
    EQ              reduce using rule 112 (expr2 -> expr AND expr .)
    GE              reduce using rule 112 (expr2 -> expr AND expr .)
    GT              reduce using rule 112 (expr2 -> expr AND expr .)
    LE              reduce using rule 112 (expr2 -> expr AND expr .)
    LT              reduce using rule 112 (expr2 -> expr AND expr .)
    NE              reduce using rule 112 (expr2 -> expr AND expr .)
    OR              reduce using rule 112 (expr2 -> expr AND expr .)
    OROR            reduce using rule 112 (expr2 -> expr AND expr .)
    RPAREN          reduce using rule 112 (expr2 -> expr AND expr .)
    COMMA           reduce using rule 112 (expr2 -> expr AND expr .)
    =               reduce using rule 112 (expr2 -> expr AND expr .)
    SEMI            reduce using rule 112 (expr2 -> expr AND expr .)
    RBRACKET        reduce using rule 112 (expr2 -> expr AND expr .)
    RBRACE          reduce using rule 112 (expr2 -> expr AND expr .)
    CASE            reduce using rule 112 (expr2 -> expr AND expr .)
    OTHERWISE       reduce using rule 112 (expr2 -> expr AND expr .)
    END_STMT        reduce using rule 112 (expr2 -> expr AND expr .)
    error           reduce using rule 112 (expr2 -> expr AND expr .)
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    BACKSLASH       shift and go to state 94
    DIV             shift and go to state 87
    DOT             shift and go to state 90
    DOTDIV          shift and go to state 82
    DOTEXP          shift and go to state 104
    DOTMUL          shift and go to state 88
    EXP             shift and go to state 85
    MINUS           shift and go to state 89
    MUL             shift and go to state 86
    PLUS            shift and go to state 97

  ! FIELD           [ reduce using rule 112 (expr2 -> expr AND expr .) ]
  ! TRANSPOSE       [ reduce using rule 112 (expr2 -> expr AND expr .) ]
  ! LBRACE          [ reduce using rule 112 (expr2 -> expr AND expr .) ]
  ! LPAREN          [ reduce using rule 112 (expr2 -> expr AND expr .) ]
  ! BACKSLASH       [ reduce using rule 112 (expr2 -> expr AND expr .) ]
  ! DIV             [ reduce using rule 112 (expr2 -> expr AND expr .) ]
  ! DOT             [ reduce using rule 112 (expr2 -> expr AND expr .) ]
  ! DOTDIV          [ reduce using rule 112 (expr2 -> expr AND expr .) ]
  ! DOTEXP          [ reduce using rule 112 (expr2 -> expr AND expr .) ]
  ! DOTMUL          [ reduce using rule 112 (expr2 -> expr AND expr .) ]
  ! EXP             [ reduce using rule 112 (expr2 -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 112 (expr2 -> expr AND expr .) ]
  ! MUL             [ reduce using rule 112 (expr2 -> expr AND expr .) ]
  ! PLUS            [ reduce using rule 112 (expr2 -> expr AND expr .) ]
  ! AND             [ shift and go to state 105 ]
  ! ANDAND          [ shift and go to state 99 ]
  ! COLON           [ shift and go to state 96 ]
  ! EQ              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 100 ]
  ! LE              [ shift and go to state 91 ]
  ! LT              [ shift and go to state 95 ]
  ! NE              [ shift and go to state 84 ]
  ! OR              [ shift and go to state 107 ]
  ! OROR            [ shift and go to state 83 ]


state 158

    (108) expr -> expr LBRACE expr_list . RBRACE

    RBRACE          shift and go to state 192


state 159

    (109) expr -> expr LBRACE RBRACE .

    RPAREN          reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    FIELD           reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    TRANSPOSE       reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    LBRACE          reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    LPAREN          reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    AND             reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    ANDAND          reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    BACKSLASH       reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    COLON           reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    DIV             reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    DOT             reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    DOTDIV          reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    DOTEXP          reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    DOTMUL          reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    EQ              reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    EXP             reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    GE              reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    GT              reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    LE              reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    LT              reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    MINUS           reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    MUL             reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    NE              reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    OR              reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    OROR            reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    PLUS            reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    =               reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    COMMA           reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    SEMI            reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    RBRACKET        reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    RBRACE          reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    CASE            reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    OTHERWISE       reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    END_STMT        reduce using rule 109 (expr -> expr LBRACE RBRACE .)
    error           reduce using rule 109 (expr -> expr LBRACE RBRACE .)


state 160

    (130) expr2 -> expr OR expr .
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    AND             reduce using rule 130 (expr2 -> expr OR expr .)
    ANDAND          reduce using rule 130 (expr2 -> expr OR expr .)
    COLON           reduce using rule 130 (expr2 -> expr OR expr .)
    EQ              reduce using rule 130 (expr2 -> expr OR expr .)
    GE              reduce using rule 130 (expr2 -> expr OR expr .)
    GT              reduce using rule 130 (expr2 -> expr OR expr .)
    LE              reduce using rule 130 (expr2 -> expr OR expr .)
    LT              reduce using rule 130 (expr2 -> expr OR expr .)
    NE              reduce using rule 130 (expr2 -> expr OR expr .)
    OR              reduce using rule 130 (expr2 -> expr OR expr .)
    OROR            reduce using rule 130 (expr2 -> expr OR expr .)
    RPAREN          reduce using rule 130 (expr2 -> expr OR expr .)
    COMMA           reduce using rule 130 (expr2 -> expr OR expr .)
    =               reduce using rule 130 (expr2 -> expr OR expr .)
    SEMI            reduce using rule 130 (expr2 -> expr OR expr .)
    RBRACKET        reduce using rule 130 (expr2 -> expr OR expr .)
    RBRACE          reduce using rule 130 (expr2 -> expr OR expr .)
    CASE            reduce using rule 130 (expr2 -> expr OR expr .)
    OTHERWISE       reduce using rule 130 (expr2 -> expr OR expr .)
    END_STMT        reduce using rule 130 (expr2 -> expr OR expr .)
    error           reduce using rule 130 (expr2 -> expr OR expr .)
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    BACKSLASH       shift and go to state 94
    DIV             shift and go to state 87
    DOT             shift and go to state 90
    DOTDIV          shift and go to state 82
    DOTEXP          shift and go to state 104
    DOTMUL          shift and go to state 88
    EXP             shift and go to state 85
    MINUS           shift and go to state 89
    MUL             shift and go to state 86
    PLUS            shift and go to state 97

  ! FIELD           [ reduce using rule 130 (expr2 -> expr OR expr .) ]
  ! TRANSPOSE       [ reduce using rule 130 (expr2 -> expr OR expr .) ]
  ! LBRACE          [ reduce using rule 130 (expr2 -> expr OR expr .) ]
  ! LPAREN          [ reduce using rule 130 (expr2 -> expr OR expr .) ]
  ! BACKSLASH       [ reduce using rule 130 (expr2 -> expr OR expr .) ]
  ! DIV             [ reduce using rule 130 (expr2 -> expr OR expr .) ]
  ! DOT             [ reduce using rule 130 (expr2 -> expr OR expr .) ]
  ! DOTDIV          [ reduce using rule 130 (expr2 -> expr OR expr .) ]
  ! DOTEXP          [ reduce using rule 130 (expr2 -> expr OR expr .) ]
  ! DOTMUL          [ reduce using rule 130 (expr2 -> expr OR expr .) ]
  ! EXP             [ reduce using rule 130 (expr2 -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 130 (expr2 -> expr OR expr .) ]
  ! MUL             [ reduce using rule 130 (expr2 -> expr OR expr .) ]
  ! PLUS            [ reduce using rule 130 (expr2 -> expr OR expr .) ]
  ! AND             [ shift and go to state 105 ]
  ! ANDAND          [ shift and go to state 99 ]
  ! COLON           [ shift and go to state 96 ]
  ! EQ              [ shift and go to state 92 ]
  ! GE              [ shift and go to state 102 ]
  ! GT              [ shift and go to state 100 ]
  ! LE              [ shift and go to state 91 ]
  ! LT              [ shift and go to state 95 ]
  ! NE              [ shift and go to state 84 ]
  ! OR              [ shift and go to state 107 ]
  ! OROR            [ shift and go to state 83 ]


state 161

    (88) lambda_expr -> HANDLE lambda_args expr .
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    =               reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .)
    COMMA           reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .)
    SEMI            reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .)
    RBRACKET        reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .)
    RBRACE          reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .)
    CASE            reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .)
    OTHERWISE       reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .)
    END_STMT        reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .)
    RPAREN          reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .)
    error           reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .)
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    AND             shift and go to state 105
    ANDAND          shift and go to state 99
    BACKSLASH       shift and go to state 94
    COLON           shift and go to state 96
    DIV             shift and go to state 87
    DOT             shift and go to state 90
    DOTDIV          shift and go to state 82
    DOTEXP          shift and go to state 104
    DOTMUL          shift and go to state 88
    EQ              shift and go to state 92
    EXP             shift and go to state 85
    GE              shift and go to state 102
    GT              shift and go to state 100
    LE              shift and go to state 91
    LT              shift and go to state 95
    MINUS           shift and go to state 89
    MUL             shift and go to state 86
    NE              shift and go to state 84
    OR              shift and go to state 107
    OROR            shift and go to state 83
    PLUS            shift and go to state 97

  ! FIELD           [ reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! TRANSPOSE       [ reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! LBRACE          [ reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! LPAREN          [ reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! AND             [ reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! ANDAND          [ reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! BACKSLASH       [ reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! COLON           [ reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! DIV             [ reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! DOT             [ reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! DOTDIV          [ reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! DOTEXP          [ reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! DOTMUL          [ reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! EQ              [ reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! EXP             [ reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! GE              [ reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! GT              [ reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! LE              [ reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! LT              [ reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! MINUS           [ reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! MUL             [ reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! NE              [ reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! OR              [ reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! OROR            [ reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .) ]
  ! PLUS            [ reduce using rule 88 (lambda_expr -> HANDLE lambda_args expr .) ]


state 162

    (46) arg_list -> ident .
    (47) arg_list -> ident . = expr

    RPAREN          reduce using rule 46 (arg_list -> ident .)
    COMMA           reduce using rule 46 (arg_list -> ident .)
    =               shift and go to state 193


state 163

    (86) lambda_args -> LPAREN RPAREN .

    NE              reduce using rule 86 (lambda_args -> LPAREN RPAREN .)
    LPAREN          reduce using rule 86 (lambda_args -> LPAREN RPAREN .)
    IDENT           reduce using rule 86 (lambda_args -> LPAREN RPAREN .)
    END_EXPR        reduce using rule 86 (lambda_args -> LPAREN RPAREN .)
    NUMBER          reduce using rule 86 (lambda_args -> LPAREN RPAREN .)
    STRING          reduce using rule 86 (lambda_args -> LPAREN RPAREN .)
    COLON           reduce using rule 86 (lambda_args -> LPAREN RPAREN .)
    LBRACKET        reduce using rule 86 (lambda_args -> LPAREN RPAREN .)
    LBRACE          reduce using rule 86 (lambda_args -> LPAREN RPAREN .)
    MINUS           reduce using rule 86 (lambda_args -> LPAREN RPAREN .)
    PLUS            reduce using rule 86 (lambda_args -> LPAREN RPAREN .)
    NEG             reduce using rule 86 (lambda_args -> LPAREN RPAREN .)
    HANDLE          reduce using rule 86 (lambda_args -> LPAREN RPAREN .)


state 164

    (87) lambda_args -> LPAREN arg_list . RPAREN
    (48) arg_list -> arg_list . COMMA ident
    (49) arg_list -> arg_list . COMMA ident = expr

    RPAREN          shift and go to state 194
    COMMA           shift and go to state 195


state 165

    (105) expr -> LPAREN expr RPAREN .

    RPAREN          reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    FIELD           reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    TRANSPOSE       reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    LBRACE          reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    LPAREN          reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    ANDAND          reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    BACKSLASH       reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    COLON           reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    DIV             reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    DOT             reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    DOTDIV          reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    DOTEXP          reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    DOTMUL          reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    EQ              reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    EXP             reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    GE              reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    GT              reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    LE              reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    LT              reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    MUL             reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    NE              reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    OROR            reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    =               reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    COMMA           reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    SEMI            reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    RBRACKET        reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    RBRACE          reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    CASE            reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    OTHERWISE       reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    END_STMT        reduce using rule 105 (expr -> LPAREN expr RPAREN .)
    error           reduce using rule 105 (expr -> LPAREN expr RPAREN .)


state 166

    (67) if_stmt -> IF expr sep . stmt_list_opt elseif_stmt END_STMT
    (53) stmt_list_opt -> .
    (54) stmt_list_opt -> . stmt_list
    (55) stmt_list -> . stmt
    (56) stmt_list -> . stmt_list stmt
    (8) stmt -> . let
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (72) let -> . expr = expr SEMI
    (32) continue_stmt -> . CONTINUE SEMI
    (33) break_stmt -> . BREAK SEMI
    (63) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (27) command -> . ident args SEMI
    (73) for_stmt -> . FOR ident = expr SEMI stmt_list END_STMT
    (74) for_stmt -> . FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT
    (67) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (68) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (39) null_stmt -> . SEMI
    (40) null_stmt -> . COMMA
    (31) return_stmt -> . RETURN SEMI
    (34) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (38) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (64) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (59) expr_list -> . exprs
    (60) expr_list -> . exprs COMMA
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr
    (61) exprs -> . expr
    (62) exprs -> . exprs COMMA expr

    ELSE            reduce using rule 53 (stmt_list_opt -> .)
    ELSEIF          reduce using rule 53 (stmt_list_opt -> .)
    END_STMT        reduce using rule 53 (stmt_list_opt -> .)
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 35
    GLOBAL          shift and go to state 22
    FOR             shift and go to state 13
    IF              shift and go to state 47
    SEMI            shift and go to state 41
    COMMA           shift and go to state 43
    RETURN          shift and go to state 8
    SWITCH          shift and go to state 31
    TRY             shift and go to state 15
    WHILE           shift and go to state 24
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    expr_list                      shift and go to state 9
    number                         shift and go to state 23
    stmt_list_opt                  shift and go to state 196
    return_stmt                    shift and go to state 25
    switch_stmt                    shift and go to state 26
    break_stmt                     shift and go to state 39
    lambda_expr                    shift and go to state 27
    end                            shift and go to state 40
    matrix                         shift and go to state 10
    continue_stmt                  shift and go to state 28
    cellarray                      shift and go to state 18
    expr2                          shift and go to state 3
    expr1                          shift and go to state 42
    global_stmt                    shift and go to state 44
    string                         shift and go to state 38
    colon                          shift and go to state 7
    stmt                           shift and go to state 14
    for_stmt                       shift and go to state 49
    let                            shift and go to state 16
    expr_stmt                      shift and go to state 5
    stmt_list                      shift and go to state 197
    ident                          shift and go to state 32
    if_stmt                        shift and go to state 6
    expr                           shift and go to state 33
    try_catch                      shift and go to state 34
    exprs                          shift and go to state 50
    while_stmt                     shift and go to state 51
    command                        shift and go to state 52
    null_stmt                      shift and go to state 53

state 167

    (66) sep -> SEMI .

    CONTINUE        reduce using rule 66 (sep -> SEMI .)
    BREAK           reduce using rule 66 (sep -> SEMI .)
    GLOBAL          reduce using rule 66 (sep -> SEMI .)
    FOR             reduce using rule 66 (sep -> SEMI .)
    IF              reduce using rule 66 (sep -> SEMI .)
    SEMI            reduce using rule 66 (sep -> SEMI .)
    COMMA           reduce using rule 66 (sep -> SEMI .)
    RETURN          reduce using rule 66 (sep -> SEMI .)
    SWITCH          reduce using rule 66 (sep -> SEMI .)
    TRY             reduce using rule 66 (sep -> SEMI .)
    WHILE           reduce using rule 66 (sep -> SEMI .)
    NE              reduce using rule 66 (sep -> SEMI .)
    LPAREN          reduce using rule 66 (sep -> SEMI .)
    IDENT           reduce using rule 66 (sep -> SEMI .)
    END_EXPR        reduce using rule 66 (sep -> SEMI .)
    NUMBER          reduce using rule 66 (sep -> SEMI .)
    STRING          reduce using rule 66 (sep -> SEMI .)
    COLON           reduce using rule 66 (sep -> SEMI .)
    LBRACKET        reduce using rule 66 (sep -> SEMI .)
    LBRACE          reduce using rule 66 (sep -> SEMI .)
    MINUS           reduce using rule 66 (sep -> SEMI .)
    PLUS            reduce using rule 66 (sep -> SEMI .)
    NEG             reduce using rule 66 (sep -> SEMI .)
    HANDLE          reduce using rule 66 (sep -> SEMI .)
    CASE            reduce using rule 66 (sep -> SEMI .)
    OTHERWISE       reduce using rule 66 (sep -> SEMI .)
    END_STMT        reduce using rule 66 (sep -> SEMI .)
    ELSE            reduce using rule 66 (sep -> SEMI .)
    ELSEIF          reduce using rule 66 (sep -> SEMI .)


state 168

    (68) if_stmt -> IF expr error . stmt_list_opt elseif_stmt END_STMT
    (53) stmt_list_opt -> .
    (54) stmt_list_opt -> . stmt_list
    (55) stmt_list -> . stmt
    (56) stmt_list -> . stmt_list stmt
    (8) stmt -> . let
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (72) let -> . expr = expr SEMI
    (32) continue_stmt -> . CONTINUE SEMI
    (33) break_stmt -> . BREAK SEMI
    (63) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (27) command -> . ident args SEMI
    (73) for_stmt -> . FOR ident = expr SEMI stmt_list END_STMT
    (74) for_stmt -> . FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT
    (67) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (68) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (39) null_stmt -> . SEMI
    (40) null_stmt -> . COMMA
    (31) return_stmt -> . RETURN SEMI
    (34) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (38) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (64) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (59) expr_list -> . exprs
    (60) expr_list -> . exprs COMMA
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr
    (61) exprs -> . expr
    (62) exprs -> . exprs COMMA expr

    ELSE            reduce using rule 53 (stmt_list_opt -> .)
    ELSEIF          reduce using rule 53 (stmt_list_opt -> .)
    END_STMT        reduce using rule 53 (stmt_list_opt -> .)
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 35
    GLOBAL          shift and go to state 22
    FOR             shift and go to state 13
    IF              shift and go to state 47
    SEMI            shift and go to state 41
    COMMA           shift and go to state 43
    RETURN          shift and go to state 8
    SWITCH          shift and go to state 31
    TRY             shift and go to state 15
    WHILE           shift and go to state 24
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    expr_list                      shift and go to state 9
    number                         shift and go to state 23
    stmt_list_opt                  shift and go to state 198
    return_stmt                    shift and go to state 25
    switch_stmt                    shift and go to state 26
    break_stmt                     shift and go to state 39
    lambda_expr                    shift and go to state 27
    end                            shift and go to state 40
    matrix                         shift and go to state 10
    continue_stmt                  shift and go to state 28
    cellarray                      shift and go to state 18
    expr2                          shift and go to state 3
    expr1                          shift and go to state 42
    global_stmt                    shift and go to state 44
    string                         shift and go to state 38
    colon                          shift and go to state 7
    stmt                           shift and go to state 14
    for_stmt                       shift and go to state 49
    let                            shift and go to state 16
    expr_stmt                      shift and go to state 5
    stmt_list                      shift and go to state 197
    ident                          shift and go to state 32
    if_stmt                        shift and go to state 6
    expr                           shift and go to state 33
    try_catch                      shift and go to state 34
    exprs                          shift and go to state 50
    while_stmt                     shift and go to state 51
    command                        shift and go to state 52
    null_stmt                      shift and go to state 53

state 169

    (65) sep -> COMMA .

    CONTINUE        reduce using rule 65 (sep -> COMMA .)
    BREAK           reduce using rule 65 (sep -> COMMA .)
    GLOBAL          reduce using rule 65 (sep -> COMMA .)
    FOR             reduce using rule 65 (sep -> COMMA .)
    IF              reduce using rule 65 (sep -> COMMA .)
    SEMI            reduce using rule 65 (sep -> COMMA .)
    COMMA           reduce using rule 65 (sep -> COMMA .)
    RETURN          reduce using rule 65 (sep -> COMMA .)
    SWITCH          reduce using rule 65 (sep -> COMMA .)
    TRY             reduce using rule 65 (sep -> COMMA .)
    WHILE           reduce using rule 65 (sep -> COMMA .)
    NE              reduce using rule 65 (sep -> COMMA .)
    LPAREN          reduce using rule 65 (sep -> COMMA .)
    IDENT           reduce using rule 65 (sep -> COMMA .)
    END_EXPR        reduce using rule 65 (sep -> COMMA .)
    NUMBER          reduce using rule 65 (sep -> COMMA .)
    STRING          reduce using rule 65 (sep -> COMMA .)
    COLON           reduce using rule 65 (sep -> COMMA .)
    LBRACKET        reduce using rule 65 (sep -> COMMA .)
    LBRACE          reduce using rule 65 (sep -> COMMA .)
    MINUS           reduce using rule 65 (sep -> COMMA .)
    PLUS            reduce using rule 65 (sep -> COMMA .)
    NEG             reduce using rule 65 (sep -> COMMA .)
    HANDLE          reduce using rule 65 (sep -> COMMA .)
    CASE            reduce using rule 65 (sep -> COMMA .)
    OTHERWISE       reduce using rule 65 (sep -> COMMA .)
    END_STMT        reduce using rule 65 (sep -> COMMA .)
    ELSE            reduce using rule 65 (sep -> COMMA .)
    ELSEIF          reduce using rule 65 (sep -> COMMA .)


state 170

    (62) exprs -> exprs COMMA expr .
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    COMMA           reduce using rule 62 (exprs -> exprs COMMA expr .)
    RBRACKET        reduce using rule 62 (exprs -> exprs COMMA expr .)
    SEMI            reduce using rule 62 (exprs -> exprs COMMA expr .)
    RBRACE          reduce using rule 62 (exprs -> exprs COMMA expr .)
    RPAREN          reduce using rule 62 (exprs -> exprs COMMA expr .)
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    AND             shift and go to state 105
    ANDAND          shift and go to state 99
    BACKSLASH       shift and go to state 94
    COLON           shift and go to state 96
    DIV             shift and go to state 87
    DOT             shift and go to state 90
    DOTDIV          shift and go to state 82
    DOTEXP          shift and go to state 104
    DOTMUL          shift and go to state 88
    EQ              shift and go to state 92
    EXP             shift and go to state 85
    GE              shift and go to state 102
    GT              shift and go to state 100
    LE              shift and go to state 91
    LT              shift and go to state 95
    MINUS           shift and go to state 89
    MUL             shift and go to state 86
    NE              shift and go to state 84
    OR              shift and go to state 107
    OROR            shift and go to state 83
    PLUS            shift and go to state 97


state 171

    (57) concat_list -> expr_list SEMI expr_list .

    RBRACKET        reduce using rule 57 (concat_list -> expr_list SEMI expr_list .)
    SEMI            reduce using rule 57 (concat_list -> expr_list SEMI expr_list .)


state 172

    (104) matrix -> LBRACKET expr_list SEMI RBRACKET .

    =               reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    FIELD           reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    TRANSPOSE       reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    LBRACE          reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    LPAREN          reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    AND             reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    ANDAND          reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    BACKSLASH       reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    COLON           reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    DIV             reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    DOT             reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    DOTDIV          reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    DOTEXP          reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    DOTMUL          reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    EQ              reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    EXP             reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    GE              reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    GT              reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    LE              reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    LT              reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    MINUS           reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    MUL             reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    NE              reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    OR              reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    OROR            reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    PLUS            reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    COMMA           reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    SEMI            reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    RPAREN          reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    RBRACKET        reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    RBRACE          reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    CASE            reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    OTHERWISE       reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    END_STMT        reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)
    error           reduce using rule 104 (matrix -> LBRACKET expr_list SEMI RBRACKET .)


state 173

    (58) concat_list -> concat_list SEMI expr_list .

    RBRACKET        reduce using rule 58 (concat_list -> concat_list SEMI expr_list .)
    SEMI            reduce using rule 58 (concat_list -> concat_list SEMI expr_list .)


state 174

    (102) matrix -> LBRACKET concat_list SEMI RBRACKET .

    =               reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    FIELD           reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    TRANSPOSE       reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    LBRACE          reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    LPAREN          reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    AND             reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    ANDAND          reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    BACKSLASH       reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    COLON           reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    DIV             reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    DOT             reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    DOTDIV          reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    DOTEXP          reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    DOTMUL          reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    EQ              reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    EXP             reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    GE              reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    GT              reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    LE              reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    LT              reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    MINUS           reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    MUL             reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    NE              reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    OR              reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    OROR            reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    PLUS            reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    COMMA           reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    SEMI            reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    RPAREN          reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    RBRACKET        reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    RBRACE          reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    CASE            reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    OTHERWISE       reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    END_STMT        reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)
    error           reduce using rule 102 (matrix -> LBRACKET concat_list SEMI RBRACKET .)


state 175

    (73) for_stmt -> FOR ident = expr . SEMI stmt_list END_STMT
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    SEMI            shift and go to state 199
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    AND             shift and go to state 105
    ANDAND          shift and go to state 99
    BACKSLASH       shift and go to state 94
    COLON           shift and go to state 96
    DIV             shift and go to state 87
    DOT             shift and go to state 90
    DOTDIV          shift and go to state 82
    DOTEXP          shift and go to state 104
    DOTMUL          shift and go to state 88
    EQ              shift and go to state 92
    EXP             shift and go to state 85
    GE              shift and go to state 102
    GT              shift and go to state 100
    LE              shift and go to state 91
    LT              shift and go to state 95
    MINUS           shift and go to state 89
    MUL             shift and go to state 86
    NE              shift and go to state 84
    OR              shift and go to state 107
    OROR            shift and go to state 83
    PLUS            shift and go to state 97


state 176

    (74) for_stmt -> FOR LPAREN ident = . expr RPAREN SEMI stmt_list END_STMT
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 200
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 177

    (38) try_catch -> TRY stmt_list CATCH stmt_list . END_STMT
    (56) stmt_list -> stmt_list . stmt
    (8) stmt -> . let
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (72) let -> . expr = expr SEMI
    (32) continue_stmt -> . CONTINUE SEMI
    (33) break_stmt -> . BREAK SEMI
    (63) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (27) command -> . ident args SEMI
    (73) for_stmt -> . FOR ident = expr SEMI stmt_list END_STMT
    (74) for_stmt -> . FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT
    (67) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (68) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (39) null_stmt -> . SEMI
    (40) null_stmt -> . COMMA
    (31) return_stmt -> . RETURN SEMI
    (34) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (38) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (64) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (59) expr_list -> . exprs
    (60) expr_list -> . exprs COMMA
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr
    (61) exprs -> . expr
    (62) exprs -> . exprs COMMA expr

    END_STMT        shift and go to state 201
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 35
    GLOBAL          shift and go to state 22
    FOR             shift and go to state 13
    IF              shift and go to state 47
    SEMI            shift and go to state 41
    COMMA           shift and go to state 43
    RETURN          shift and go to state 8
    SWITCH          shift and go to state 31
    TRY             shift and go to state 15
    WHILE           shift and go to state 24
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    expr_list                      shift and go to state 9
    number                         shift and go to state 23
    return_stmt                    shift and go to state 25
    switch_stmt                    shift and go to state 26
    break_stmt                     shift and go to state 39
    lambda_expr                    shift and go to state 27
    end                            shift and go to state 40
    matrix                         shift and go to state 10
    continue_stmt                  shift and go to state 28
    cellarray                      shift and go to state 18
    expr2                          shift and go to state 3
    expr1                          shift and go to state 42
    global_stmt                    shift and go to state 44
    string                         shift and go to state 38
    colon                          shift and go to state 7
    stmt                           shift and go to state 114
    for_stmt                       shift and go to state 49
    let                            shift and go to state 16
    expr_stmt                      shift and go to state 5
    ident                          shift and go to state 32
    if_stmt                        shift and go to state 6
    expr                           shift and go to state 33
    try_catch                      shift and go to state 34
    exprs                          shift and go to state 50
    while_stmt                     shift and go to state 51
    command                        shift and go to state 52
    null_stmt                      shift and go to state 53

state 178

    (64) while_stmt -> WHILE expr SEMI stmt_list . END_STMT
    (56) stmt_list -> stmt_list . stmt
    (8) stmt -> . let
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (72) let -> . expr = expr SEMI
    (32) continue_stmt -> . CONTINUE SEMI
    (33) break_stmt -> . BREAK SEMI
    (63) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (27) command -> . ident args SEMI
    (73) for_stmt -> . FOR ident = expr SEMI stmt_list END_STMT
    (74) for_stmt -> . FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT
    (67) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (68) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (39) null_stmt -> . SEMI
    (40) null_stmt -> . COMMA
    (31) return_stmt -> . RETURN SEMI
    (34) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (38) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (64) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (59) expr_list -> . exprs
    (60) expr_list -> . exprs COMMA
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr
    (61) exprs -> . expr
    (62) exprs -> . exprs COMMA expr

    END_STMT        shift and go to state 202
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 35
    GLOBAL          shift and go to state 22
    FOR             shift and go to state 13
    IF              shift and go to state 47
    SEMI            shift and go to state 41
    COMMA           shift and go to state 43
    RETURN          shift and go to state 8
    SWITCH          shift and go to state 31
    TRY             shift and go to state 15
    WHILE           shift and go to state 24
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    expr_list                      shift and go to state 9
    number                         shift and go to state 23
    return_stmt                    shift and go to state 25
    switch_stmt                    shift and go to state 26
    break_stmt                     shift and go to state 39
    lambda_expr                    shift and go to state 27
    end                            shift and go to state 40
    matrix                         shift and go to state 10
    continue_stmt                  shift and go to state 28
    cellarray                      shift and go to state 18
    expr2                          shift and go to state 3
    expr1                          shift and go to state 42
    global_stmt                    shift and go to state 44
    string                         shift and go to state 38
    colon                          shift and go to state 7
    stmt                           shift and go to state 114
    for_stmt                       shift and go to state 49
    let                            shift and go to state 16
    expr_stmt                      shift and go to state 5
    ident                          shift and go to state 32
    if_stmt                        shift and go to state 6
    expr                           shift and go to state 33
    try_catch                      shift and go to state 34
    exprs                          shift and go to state 50
    while_stmt                     shift and go to state 51
    command                        shift and go to state 52
    null_stmt                      shift and go to state 53

state 179

    (4) top -> top func_decl stmt_list END_STMT . semi_opt
    (5) semi_opt -> .
    (6) semi_opt -> . semi_opt SEMI
    (7) semi_opt -> . semi_opt COMMA

    SEMI            reduce using rule 5 (semi_opt -> .)
    COMMA           reduce using rule 5 (semi_opt -> .)
    FUNCTION        reduce using rule 5 (semi_opt -> .)
    $end            reduce using rule 5 (semi_opt -> .)

    semi_opt                       shift and go to state 203

state 180

    (41) func_decl -> FUNCTION ident args_opt . SEMI

    SEMI            shift and go to state 204


state 181

    (44) args_opt -> LPAREN . RPAREN
    (45) args_opt -> LPAREN . arg_list RPAREN
    (46) arg_list -> . ident
    (47) arg_list -> . ident = expr
    (48) arg_list -> . arg_list COMMA ident
    (49) arg_list -> . arg_list COMMA ident = expr
    (89) ident -> . IDENT

    RPAREN          shift and go to state 205
    IDENT           shift and go to state 12

    ident                          shift and go to state 162
    arg_list                       shift and go to state 206

state 182

    (42) func_decl -> FUNCTION ret = . ident args_opt SEMI
    (89) ident -> . IDENT

    IDENT           shift and go to state 12

    ident                          shift and go to state 207

state 183

    (52) ret -> LBRACKET expr_list . RBRACKET

    RBRACKET        shift and go to state 208


state 184

    (51) ret -> LBRACKET RBRACKET .

    =               reduce using rule 51 (ret -> LBRACKET RBRACKET .)


state 185

    (36) case_list -> CASE . expr sep stmt_list_opt case_list
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    expr2                          shift and go to state 3
    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 209
    number                         shift and go to state 23
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 186

    (6) semi_opt -> semi_opt SEMI .

    SEMI            reduce using rule 6 (semi_opt -> semi_opt SEMI .)
    COMMA           reduce using rule 6 (semi_opt -> semi_opt SEMI .)
    CASE            reduce using rule 6 (semi_opt -> semi_opt SEMI .)
    OTHERWISE       reduce using rule 6 (semi_opt -> semi_opt SEMI .)
    END_STMT        reduce using rule 6 (semi_opt -> semi_opt SEMI .)
    FUNCTION        reduce using rule 6 (semi_opt -> semi_opt SEMI .)
    $end            reduce using rule 6 (semi_opt -> semi_opt SEMI .)


state 187

    (34) switch_stmt -> SWITCH expr semi_opt case_list . END_STMT

    END_STMT        shift and go to state 210


state 188

    (7) semi_opt -> semi_opt COMMA .

    SEMI            reduce using rule 7 (semi_opt -> semi_opt COMMA .)
    COMMA           reduce using rule 7 (semi_opt -> semi_opt COMMA .)
    CASE            reduce using rule 7 (semi_opt -> semi_opt COMMA .)
    OTHERWISE       reduce using rule 7 (semi_opt -> semi_opt COMMA .)
    END_STMT        reduce using rule 7 (semi_opt -> semi_opt COMMA .)
    FUNCTION        reduce using rule 7 (semi_opt -> semi_opt COMMA .)
    $end            reduce using rule 7 (semi_opt -> semi_opt COMMA .)


state 189

    (37) case_list -> OTHERWISE . stmt_list
    (55) stmt_list -> . stmt
    (56) stmt_list -> . stmt_list stmt
    (8) stmt -> . let
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (72) let -> . expr = expr SEMI
    (32) continue_stmt -> . CONTINUE SEMI
    (33) break_stmt -> . BREAK SEMI
    (63) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (27) command -> . ident args SEMI
    (73) for_stmt -> . FOR ident = expr SEMI stmt_list END_STMT
    (74) for_stmt -> . FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT
    (67) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (68) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (39) null_stmt -> . SEMI
    (40) null_stmt -> . COMMA
    (31) return_stmt -> . RETURN SEMI
    (34) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (38) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (64) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (59) expr_list -> . exprs
    (60) expr_list -> . exprs COMMA
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr
    (61) exprs -> . expr
    (62) exprs -> . exprs COMMA expr

    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 35
    GLOBAL          shift and go to state 22
    FOR             shift and go to state 13
    IF              shift and go to state 47
    SEMI            shift and go to state 41
    COMMA           shift and go to state 43
    RETURN          shift and go to state 8
    SWITCH          shift and go to state 31
    TRY             shift and go to state 15
    WHILE           shift and go to state 24
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    expr_list                      shift and go to state 9
    number                         shift and go to state 23
    return_stmt                    shift and go to state 25
    switch_stmt                    shift and go to state 26
    break_stmt                     shift and go to state 39
    lambda_expr                    shift and go to state 27
    end                            shift and go to state 40
    matrix                         shift and go to state 10
    continue_stmt                  shift and go to state 28
    cellarray                      shift and go to state 18
    expr2                          shift and go to state 3
    expr1                          shift and go to state 42
    global_stmt                    shift and go to state 44
    string                         shift and go to state 38
    colon                          shift and go to state 7
    stmt                           shift and go to state 14
    for_stmt                       shift and go to state 49
    let                            shift and go to state 16
    expr_stmt                      shift and go to state 5
    stmt_list                      shift and go to state 211
    ident                          shift and go to state 32
    if_stmt                        shift and go to state 6
    expr                           shift and go to state 33
    try_catch                      shift and go to state 34
    exprs                          shift and go to state 50
    while_stmt                     shift and go to state 51
    command                        shift and go to state 52
    null_stmt                      shift and go to state 53

state 190

    (72) let -> expr = expr SEMI .

    CONTINUE        reduce using rule 72 (let -> expr = expr SEMI .)
    BREAK           reduce using rule 72 (let -> expr = expr SEMI .)
    GLOBAL          reduce using rule 72 (let -> expr = expr SEMI .)
    FOR             reduce using rule 72 (let -> expr = expr SEMI .)
    IF              reduce using rule 72 (let -> expr = expr SEMI .)
    SEMI            reduce using rule 72 (let -> expr = expr SEMI .)
    COMMA           reduce using rule 72 (let -> expr = expr SEMI .)
    RETURN          reduce using rule 72 (let -> expr = expr SEMI .)
    SWITCH          reduce using rule 72 (let -> expr = expr SEMI .)
    TRY             reduce using rule 72 (let -> expr = expr SEMI .)
    WHILE           reduce using rule 72 (let -> expr = expr SEMI .)
    NE              reduce using rule 72 (let -> expr = expr SEMI .)
    LPAREN          reduce using rule 72 (let -> expr = expr SEMI .)
    IDENT           reduce using rule 72 (let -> expr = expr SEMI .)
    END_EXPR        reduce using rule 72 (let -> expr = expr SEMI .)
    NUMBER          reduce using rule 72 (let -> expr = expr SEMI .)
    STRING          reduce using rule 72 (let -> expr = expr SEMI .)
    COLON           reduce using rule 72 (let -> expr = expr SEMI .)
    LBRACKET        reduce using rule 72 (let -> expr = expr SEMI .)
    LBRACE          reduce using rule 72 (let -> expr = expr SEMI .)
    MINUS           reduce using rule 72 (let -> expr = expr SEMI .)
    PLUS            reduce using rule 72 (let -> expr = expr SEMI .)
    NEG             reduce using rule 72 (let -> expr = expr SEMI .)
    HANDLE          reduce using rule 72 (let -> expr = expr SEMI .)
    FUNCTION        reduce using rule 72 (let -> expr = expr SEMI .)
    $end            reduce using rule 72 (let -> expr = expr SEMI .)
    END_STMT        reduce using rule 72 (let -> expr = expr SEMI .)
    ELSE            reduce using rule 72 (let -> expr = expr SEMI .)
    ELSEIF          reduce using rule 72 (let -> expr = expr SEMI .)
    CATCH           reduce using rule 72 (let -> expr = expr SEMI .)
    CASE            reduce using rule 72 (let -> expr = expr SEMI .)
    OTHERWISE       reduce using rule 72 (let -> expr = expr SEMI .)


state 191

    (110) expr -> expr LPAREN expr_list RPAREN .

    RPAREN          reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    FIELD           reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    TRANSPOSE       reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    LBRACE          reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    LPAREN          reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    AND             reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    ANDAND          reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    BACKSLASH       reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    COLON           reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    DIV             reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    DOT             reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    DOTDIV          reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    DOTEXP          reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    DOTMUL          reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    EQ              reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    EXP             reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    GE              reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    GT              reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    LE              reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    LT              reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    MINUS           reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    MUL             reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    NE              reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    OR              reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    OROR            reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    PLUS            reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    =               reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    COMMA           reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    SEMI            reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    RBRACKET        reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    RBRACE          reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    CASE            reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    OTHERWISE       reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    END_STMT        reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)
    error           reduce using rule 110 (expr -> expr LPAREN expr_list RPAREN .)


state 192

    (108) expr -> expr LBRACE expr_list RBRACE .

    RPAREN          reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    FIELD           reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    TRANSPOSE       reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    LBRACE          reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    LPAREN          reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    AND             reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    ANDAND          reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    BACKSLASH       reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    COLON           reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    DIV             reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    DOT             reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    DOTDIV          reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    DOTEXP          reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    DOTMUL          reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    EQ              reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    EXP             reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    GE              reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    GT              reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    LE              reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    LT              reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    MINUS           reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    MUL             reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    NE              reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    OR              reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    OROR            reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    PLUS            reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    =               reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    COMMA           reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    SEMI            reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    RBRACKET        reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    RBRACE          reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    CASE            reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    OTHERWISE       reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    END_STMT        reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)
    error           reduce using rule 108 (expr -> expr LBRACE expr_list RBRACE .)


state 193

    (47) arg_list -> ident = . expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 212
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 194

    (87) lambda_args -> LPAREN arg_list RPAREN .

    NE              reduce using rule 87 (lambda_args -> LPAREN arg_list RPAREN .)
    LPAREN          reduce using rule 87 (lambda_args -> LPAREN arg_list RPAREN .)
    IDENT           reduce using rule 87 (lambda_args -> LPAREN arg_list RPAREN .)
    END_EXPR        reduce using rule 87 (lambda_args -> LPAREN arg_list RPAREN .)
    NUMBER          reduce using rule 87 (lambda_args -> LPAREN arg_list RPAREN .)
    STRING          reduce using rule 87 (lambda_args -> LPAREN arg_list RPAREN .)
    COLON           reduce using rule 87 (lambda_args -> LPAREN arg_list RPAREN .)
    LBRACKET        reduce using rule 87 (lambda_args -> LPAREN arg_list RPAREN .)
    LBRACE          reduce using rule 87 (lambda_args -> LPAREN arg_list RPAREN .)
    MINUS           reduce using rule 87 (lambda_args -> LPAREN arg_list RPAREN .)
    PLUS            reduce using rule 87 (lambda_args -> LPAREN arg_list RPAREN .)
    NEG             reduce using rule 87 (lambda_args -> LPAREN arg_list RPAREN .)
    HANDLE          reduce using rule 87 (lambda_args -> LPAREN arg_list RPAREN .)


state 195

    (48) arg_list -> arg_list COMMA . ident
    (49) arg_list -> arg_list COMMA . ident = expr
    (89) ident -> . IDENT

    IDENT           shift and go to state 12

    ident                          shift and go to state 213

state 196

    (67) if_stmt -> IF expr sep stmt_list_opt . elseif_stmt END_STMT
    (69) elseif_stmt -> .
    (70) elseif_stmt -> . ELSE stmt_list_opt
    (71) elseif_stmt -> . ELSEIF expr sep stmt_list_opt elseif_stmt

    END_STMT        reduce using rule 69 (elseif_stmt -> .)
    ELSE            shift and go to state 214
    ELSEIF          shift and go to state 215

    elseif_stmt                    shift and go to state 216

state 197

    (54) stmt_list_opt -> stmt_list .
    (56) stmt_list -> stmt_list . stmt
    (8) stmt -> . let
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (72) let -> . expr = expr SEMI
    (32) continue_stmt -> . CONTINUE SEMI
    (33) break_stmt -> . BREAK SEMI
    (63) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (27) command -> . ident args SEMI
    (73) for_stmt -> . FOR ident = expr SEMI stmt_list END_STMT
    (74) for_stmt -> . FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT
    (67) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (68) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (39) null_stmt -> . SEMI
    (40) null_stmt -> . COMMA
    (31) return_stmt -> . RETURN SEMI
    (34) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (38) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (64) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (59) expr_list -> . exprs
    (60) expr_list -> . exprs COMMA
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr
    (61) exprs -> . expr
    (62) exprs -> . exprs COMMA expr

    ELSE            reduce using rule 54 (stmt_list_opt -> stmt_list .)
    ELSEIF          reduce using rule 54 (stmt_list_opt -> stmt_list .)
    END_STMT        reduce using rule 54 (stmt_list_opt -> stmt_list .)
    CASE            reduce using rule 54 (stmt_list_opt -> stmt_list .)
    OTHERWISE       reduce using rule 54 (stmt_list_opt -> stmt_list .)
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 35
    GLOBAL          shift and go to state 22
    FOR             shift and go to state 13
    IF              shift and go to state 47
    SEMI            shift and go to state 41
    COMMA           shift and go to state 43
    RETURN          shift and go to state 8
    SWITCH          shift and go to state 31
    TRY             shift and go to state 15
    WHILE           shift and go to state 24
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    expr_list                      shift and go to state 9
    number                         shift and go to state 23
    return_stmt                    shift and go to state 25
    switch_stmt                    shift and go to state 26
    break_stmt                     shift and go to state 39
    lambda_expr                    shift and go to state 27
    end                            shift and go to state 40
    matrix                         shift and go to state 10
    continue_stmt                  shift and go to state 28
    cellarray                      shift and go to state 18
    expr2                          shift and go to state 3
    expr1                          shift and go to state 42
    global_stmt                    shift and go to state 44
    string                         shift and go to state 38
    colon                          shift and go to state 7
    stmt                           shift and go to state 114
    for_stmt                       shift and go to state 49
    let                            shift and go to state 16
    expr_stmt                      shift and go to state 5
    ident                          shift and go to state 32
    if_stmt                        shift and go to state 6
    expr                           shift and go to state 33
    try_catch                      shift and go to state 34
    exprs                          shift and go to state 50
    while_stmt                     shift and go to state 51
    command                        shift and go to state 52
    null_stmt                      shift and go to state 53

state 198

    (68) if_stmt -> IF expr error stmt_list_opt . elseif_stmt END_STMT
    (69) elseif_stmt -> .
    (70) elseif_stmt -> . ELSE stmt_list_opt
    (71) elseif_stmt -> . ELSEIF expr sep stmt_list_opt elseif_stmt

    END_STMT        reduce using rule 69 (elseif_stmt -> .)
    ELSE            shift and go to state 214
    ELSEIF          shift and go to state 215

    elseif_stmt                    shift and go to state 217

state 199

    (73) for_stmt -> FOR ident = expr SEMI . stmt_list END_STMT
    (55) stmt_list -> . stmt
    (56) stmt_list -> . stmt_list stmt
    (8) stmt -> . let
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (72) let -> . expr = expr SEMI
    (32) continue_stmt -> . CONTINUE SEMI
    (33) break_stmt -> . BREAK SEMI
    (63) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (27) command -> . ident args SEMI
    (73) for_stmt -> . FOR ident = expr SEMI stmt_list END_STMT
    (74) for_stmt -> . FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT
    (67) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (68) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (39) null_stmt -> . SEMI
    (40) null_stmt -> . COMMA
    (31) return_stmt -> . RETURN SEMI
    (34) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (38) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (64) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (59) expr_list -> . exprs
    (60) expr_list -> . exprs COMMA
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr
    (61) exprs -> . expr
    (62) exprs -> . exprs COMMA expr

    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 35
    GLOBAL          shift and go to state 22
    FOR             shift and go to state 13
    IF              shift and go to state 47
    SEMI            shift and go to state 41
    COMMA           shift and go to state 43
    RETURN          shift and go to state 8
    SWITCH          shift and go to state 31
    TRY             shift and go to state 15
    WHILE           shift and go to state 24
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    expr_list                      shift and go to state 9
    number                         shift and go to state 23
    return_stmt                    shift and go to state 25
    switch_stmt                    shift and go to state 26
    break_stmt                     shift and go to state 39
    lambda_expr                    shift and go to state 27
    end                            shift and go to state 40
    matrix                         shift and go to state 10
    continue_stmt                  shift and go to state 28
    cellarray                      shift and go to state 18
    expr2                          shift and go to state 3
    expr1                          shift and go to state 42
    global_stmt                    shift and go to state 44
    string                         shift and go to state 38
    colon                          shift and go to state 7
    stmt                           shift and go to state 14
    for_stmt                       shift and go to state 49
    let                            shift and go to state 16
    expr_stmt                      shift and go to state 5
    stmt_list                      shift and go to state 218
    ident                          shift and go to state 32
    if_stmt                        shift and go to state 6
    expr                           shift and go to state 33
    try_catch                      shift and go to state 34
    exprs                          shift and go to state 50
    while_stmt                     shift and go to state 51
    command                        shift and go to state 52
    null_stmt                      shift and go to state 53

state 200

    (74) for_stmt -> FOR LPAREN ident = expr . RPAREN SEMI stmt_list END_STMT
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    RPAREN          shift and go to state 219
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    AND             shift and go to state 105
    ANDAND          shift and go to state 99
    BACKSLASH       shift and go to state 94
    COLON           shift and go to state 96
    DIV             shift and go to state 87
    DOT             shift and go to state 90
    DOTDIV          shift and go to state 82
    DOTEXP          shift and go to state 104
    DOTMUL          shift and go to state 88
    EQ              shift and go to state 92
    EXP             shift and go to state 85
    GE              shift and go to state 102
    GT              shift and go to state 100
    LE              shift and go to state 91
    LT              shift and go to state 95
    MINUS           shift and go to state 89
    MUL             shift and go to state 86
    NE              shift and go to state 84
    OR              shift and go to state 107
    OROR            shift and go to state 83
    PLUS            shift and go to state 97


state 201

    (38) try_catch -> TRY stmt_list CATCH stmt_list END_STMT .

    END_STMT        reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    CONTINUE        reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    BREAK           reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    GLOBAL          reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    FOR             reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    IF              reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    SEMI            reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    COMMA           reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    RETURN          reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    SWITCH          reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    TRY             reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    WHILE           reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    NE              reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    LPAREN          reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    IDENT           reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    END_EXPR        reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    NUMBER          reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    STRING          reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    COLON           reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    LBRACKET        reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    LBRACE          reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    MINUS           reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    PLUS            reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    NEG             reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    HANDLE          reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    FUNCTION        reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    $end            reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    ELSE            reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    ELSEIF          reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    CATCH           reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    CASE            reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)
    OTHERWISE       reduce using rule 38 (try_catch -> TRY stmt_list CATCH stmt_list END_STMT .)


state 202

    (64) while_stmt -> WHILE expr SEMI stmt_list END_STMT .

    CONTINUE        reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    BREAK           reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    GLOBAL          reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    FOR             reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    IF              reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    SEMI            reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    COMMA           reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    RETURN          reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    SWITCH          reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    TRY             reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    WHILE           reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    NE              reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    LPAREN          reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    IDENT           reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    END_EXPR        reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    NUMBER          reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    STRING          reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    COLON           reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    LBRACKET        reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    LBRACE          reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    MINUS           reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    PLUS            reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    NEG             reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    HANDLE          reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    CASE            reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    OTHERWISE       reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    END_STMT        reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    CATCH           reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    FUNCTION        reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    $end            reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    ELSE            reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)
    ELSEIF          reduce using rule 64 (while_stmt -> WHILE expr SEMI stmt_list END_STMT .)


state 203

    (4) top -> top func_decl stmt_list END_STMT semi_opt .
    (6) semi_opt -> semi_opt . SEMI
    (7) semi_opt -> semi_opt . COMMA

    FUNCTION        reduce using rule 4 (top -> top func_decl stmt_list END_STMT semi_opt .)
    $end            reduce using rule 4 (top -> top func_decl stmt_list END_STMT semi_opt .)
    SEMI            shift and go to state 186
    COMMA           shift and go to state 188


state 204

    (41) func_decl -> FUNCTION ident args_opt SEMI .

    CONTINUE        reduce using rule 41 (func_decl -> FUNCTION ident args_opt SEMI .)
    BREAK           reduce using rule 41 (func_decl -> FUNCTION ident args_opt SEMI .)
    GLOBAL          reduce using rule 41 (func_decl -> FUNCTION ident args_opt SEMI .)
    FOR             reduce using rule 41 (func_decl -> FUNCTION ident args_opt SEMI .)
    IF              reduce using rule 41 (func_decl -> FUNCTION ident args_opt SEMI .)
    SEMI            reduce using rule 41 (func_decl -> FUNCTION ident args_opt SEMI .)
    COMMA           reduce using rule 41 (func_decl -> FUNCTION ident args_opt SEMI .)
    RETURN          reduce using rule 41 (func_decl -> FUNCTION ident args_opt SEMI .)
    SWITCH          reduce using rule 41 (func_decl -> FUNCTION ident args_opt SEMI .)
    TRY             reduce using rule 41 (func_decl -> FUNCTION ident args_opt SEMI .)
    WHILE           reduce using rule 41 (func_decl -> FUNCTION ident args_opt SEMI .)
    NE              reduce using rule 41 (func_decl -> FUNCTION ident args_opt SEMI .)
    LPAREN          reduce using rule 41 (func_decl -> FUNCTION ident args_opt SEMI .)
    IDENT           reduce using rule 41 (func_decl -> FUNCTION ident args_opt SEMI .)
    END_EXPR        reduce using rule 41 (func_decl -> FUNCTION ident args_opt SEMI .)
    NUMBER          reduce using rule 41 (func_decl -> FUNCTION ident args_opt SEMI .)
    STRING          reduce using rule 41 (func_decl -> FUNCTION ident args_opt SEMI .)
    COLON           reduce using rule 41 (func_decl -> FUNCTION ident args_opt SEMI .)
    LBRACKET        reduce using rule 41 (func_decl -> FUNCTION ident args_opt SEMI .)
    LBRACE          reduce using rule 41 (func_decl -> FUNCTION ident args_opt SEMI .)
    MINUS           reduce using rule 41 (func_decl -> FUNCTION ident args_opt SEMI .)
    PLUS            reduce using rule 41 (func_decl -> FUNCTION ident args_opt SEMI .)
    NEG             reduce using rule 41 (func_decl -> FUNCTION ident args_opt SEMI .)
    HANDLE          reduce using rule 41 (func_decl -> FUNCTION ident args_opt SEMI .)
    FUNCTION        reduce using rule 41 (func_decl -> FUNCTION ident args_opt SEMI .)
    $end            reduce using rule 41 (func_decl -> FUNCTION ident args_opt SEMI .)


state 205

    (44) args_opt -> LPAREN RPAREN .

    SEMI            reduce using rule 44 (args_opt -> LPAREN RPAREN .)


state 206

    (45) args_opt -> LPAREN arg_list . RPAREN
    (48) arg_list -> arg_list . COMMA ident
    (49) arg_list -> arg_list . COMMA ident = expr

    RPAREN          shift and go to state 220
    COMMA           shift and go to state 195


state 207

    (42) func_decl -> FUNCTION ret = ident . args_opt SEMI
    (43) args_opt -> .
    (44) args_opt -> . LPAREN RPAREN
    (45) args_opt -> . LPAREN arg_list RPAREN

    SEMI            reduce using rule 43 (args_opt -> .)
    LPAREN          shift and go to state 181

    args_opt                       shift and go to state 221

state 208

    (52) ret -> LBRACKET expr_list RBRACKET .

    =               reduce using rule 52 (ret -> LBRACKET expr_list RBRACKET .)


state 209

    (36) case_list -> CASE expr . sep stmt_list_opt case_list
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr
    (65) sep -> . COMMA
    (66) sep -> . SEMI

    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    AND             shift and go to state 105
    ANDAND          shift and go to state 99
    BACKSLASH       shift and go to state 94
    COLON           shift and go to state 96
    DIV             shift and go to state 87
    DOT             shift and go to state 90
    DOTDIV          shift and go to state 82
    DOTEXP          shift and go to state 104
    DOTMUL          shift and go to state 88
    EQ              shift and go to state 92
    EXP             shift and go to state 85
    GE              shift and go to state 102
    GT              shift and go to state 100
    LE              shift and go to state 91
    LT              shift and go to state 95
    MINUS           shift and go to state 89
    MUL             shift and go to state 86
    NE              shift and go to state 84
    OR              shift and go to state 107
    OROR            shift and go to state 83
    PLUS            shift and go to state 97
    COMMA           shift and go to state 169
    SEMI            shift and go to state 167

    sep                            shift and go to state 222

state 210

    (34) switch_stmt -> SWITCH expr semi_opt case_list END_STMT .

    CONTINUE        reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    BREAK           reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    GLOBAL          reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    FOR             reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    IF              reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    SEMI            reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    COMMA           reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    RETURN          reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    SWITCH          reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    TRY             reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    WHILE           reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    NE              reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    LPAREN          reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    IDENT           reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    END_EXPR        reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    NUMBER          reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    STRING          reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    COLON           reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    LBRACKET        reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    LBRACE          reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    MINUS           reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    PLUS            reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    NEG             reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    HANDLE          reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    FUNCTION        reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    $end            reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    CATCH           reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    END_STMT        reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    CASE            reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    OTHERWISE       reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    ELSE            reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)
    ELSEIF          reduce using rule 34 (switch_stmt -> SWITCH expr semi_opt case_list END_STMT .)


state 211

    (37) case_list -> OTHERWISE stmt_list .
    (56) stmt_list -> stmt_list . stmt
    (8) stmt -> . let
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (72) let -> . expr = expr SEMI
    (32) continue_stmt -> . CONTINUE SEMI
    (33) break_stmt -> . BREAK SEMI
    (63) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (27) command -> . ident args SEMI
    (73) for_stmt -> . FOR ident = expr SEMI stmt_list END_STMT
    (74) for_stmt -> . FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT
    (67) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (68) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (39) null_stmt -> . SEMI
    (40) null_stmt -> . COMMA
    (31) return_stmt -> . RETURN SEMI
    (34) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (38) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (64) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (59) expr_list -> . exprs
    (60) expr_list -> . exprs COMMA
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr
    (61) exprs -> . expr
    (62) exprs -> . exprs COMMA expr

    END_STMT        reduce using rule 37 (case_list -> OTHERWISE stmt_list .)
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 35
    GLOBAL          shift and go to state 22
    FOR             shift and go to state 13
    IF              shift and go to state 47
    SEMI            shift and go to state 41
    COMMA           shift and go to state 43
    RETURN          shift and go to state 8
    SWITCH          shift and go to state 31
    TRY             shift and go to state 15
    WHILE           shift and go to state 24
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    expr_list                      shift and go to state 9
    number                         shift and go to state 23
    return_stmt                    shift and go to state 25
    switch_stmt                    shift and go to state 26
    break_stmt                     shift and go to state 39
    lambda_expr                    shift and go to state 27
    end                            shift and go to state 40
    matrix                         shift and go to state 10
    continue_stmt                  shift and go to state 28
    cellarray                      shift and go to state 18
    expr2                          shift and go to state 3
    expr1                          shift and go to state 42
    global_stmt                    shift and go to state 44
    string                         shift and go to state 38
    colon                          shift and go to state 7
    stmt                           shift and go to state 114
    for_stmt                       shift and go to state 49
    let                            shift and go to state 16
    expr_stmt                      shift and go to state 5
    ident                          shift and go to state 32
    if_stmt                        shift and go to state 6
    expr                           shift and go to state 33
    try_catch                      shift and go to state 34
    exprs                          shift and go to state 50
    while_stmt                     shift and go to state 51
    command                        shift and go to state 52
    null_stmt                      shift and go to state 53

state 212

    (47) arg_list -> ident = expr .
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    RPAREN          reduce using rule 47 (arg_list -> ident = expr .)
    COMMA           reduce using rule 47 (arg_list -> ident = expr .)
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    AND             shift and go to state 105
    ANDAND          shift and go to state 99
    BACKSLASH       shift and go to state 94
    COLON           shift and go to state 96
    DIV             shift and go to state 87
    DOT             shift and go to state 90
    DOTDIV          shift and go to state 82
    DOTEXP          shift and go to state 104
    DOTMUL          shift and go to state 88
    EQ              shift and go to state 92
    EXP             shift and go to state 85
    GE              shift and go to state 102
    GT              shift and go to state 100
    LE              shift and go to state 91
    LT              shift and go to state 95
    MINUS           shift and go to state 89
    MUL             shift and go to state 86
    NE              shift and go to state 84
    OR              shift and go to state 107
    OROR            shift and go to state 83
    PLUS            shift and go to state 97


state 213

    (48) arg_list -> arg_list COMMA ident .
    (49) arg_list -> arg_list COMMA ident . = expr

    RPAREN          reduce using rule 48 (arg_list -> arg_list COMMA ident .)
    COMMA           reduce using rule 48 (arg_list -> arg_list COMMA ident .)
    =               shift and go to state 223


state 214

    (70) elseif_stmt -> ELSE . stmt_list_opt
    (53) stmt_list_opt -> .
    (54) stmt_list_opt -> . stmt_list
    (55) stmt_list -> . stmt
    (56) stmt_list -> . stmt_list stmt
    (8) stmt -> . let
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (72) let -> . expr = expr SEMI
    (32) continue_stmt -> . CONTINUE SEMI
    (33) break_stmt -> . BREAK SEMI
    (63) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (27) command -> . ident args SEMI
    (73) for_stmt -> . FOR ident = expr SEMI stmt_list END_STMT
    (74) for_stmt -> . FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT
    (67) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (68) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (39) null_stmt -> . SEMI
    (40) null_stmt -> . COMMA
    (31) return_stmt -> . RETURN SEMI
    (34) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (38) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (64) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (59) expr_list -> . exprs
    (60) expr_list -> . exprs COMMA
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr
    (61) exprs -> . expr
    (62) exprs -> . exprs COMMA expr

    END_STMT        reduce using rule 53 (stmt_list_opt -> .)
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 35
    GLOBAL          shift and go to state 22
    FOR             shift and go to state 13
    IF              shift and go to state 47
    SEMI            shift and go to state 41
    COMMA           shift and go to state 43
    RETURN          shift and go to state 8
    SWITCH          shift and go to state 31
    TRY             shift and go to state 15
    WHILE           shift and go to state 24
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    expr_list                      shift and go to state 9
    number                         shift and go to state 23
    stmt_list_opt                  shift and go to state 224
    return_stmt                    shift and go to state 25
    switch_stmt                    shift and go to state 26
    break_stmt                     shift and go to state 39
    lambda_expr                    shift and go to state 27
    end                            shift and go to state 40
    matrix                         shift and go to state 10
    continue_stmt                  shift and go to state 28
    cellarray                      shift and go to state 18
    expr2                          shift and go to state 3
    expr1                          shift and go to state 42
    global_stmt                    shift and go to state 44
    string                         shift and go to state 38
    colon                          shift and go to state 7
    stmt                           shift and go to state 14
    for_stmt                       shift and go to state 49
    let                            shift and go to state 16
    expr_stmt                      shift and go to state 5
    stmt_list                      shift and go to state 197
    ident                          shift and go to state 32
    if_stmt                        shift and go to state 6
    expr                           shift and go to state 33
    try_catch                      shift and go to state 34
    exprs                          shift and go to state 50
    while_stmt                     shift and go to state 51
    command                        shift and go to state 52
    null_stmt                      shift and go to state 53

state 215

    (71) elseif_stmt -> ELSEIF . expr sep stmt_list_opt elseif_stmt
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    expr2                          shift and go to state 3
    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 225
    number                         shift and go to state 23
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7
    matrix                         shift and go to state 10

state 216

    (67) if_stmt -> IF expr sep stmt_list_opt elseif_stmt . END_STMT

    END_STMT        shift and go to state 226


state 217

    (68) if_stmt -> IF expr error stmt_list_opt elseif_stmt . END_STMT

    END_STMT        shift and go to state 227


state 218

    (73) for_stmt -> FOR ident = expr SEMI stmt_list . END_STMT
    (56) stmt_list -> stmt_list . stmt
    (8) stmt -> . let
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (72) let -> . expr = expr SEMI
    (32) continue_stmt -> . CONTINUE SEMI
    (33) break_stmt -> . BREAK SEMI
    (63) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (27) command -> . ident args SEMI
    (73) for_stmt -> . FOR ident = expr SEMI stmt_list END_STMT
    (74) for_stmt -> . FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT
    (67) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (68) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (39) null_stmt -> . SEMI
    (40) null_stmt -> . COMMA
    (31) return_stmt -> . RETURN SEMI
    (34) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (38) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (64) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (59) expr_list -> . exprs
    (60) expr_list -> . exprs COMMA
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr
    (61) exprs -> . expr
    (62) exprs -> . exprs COMMA expr

    END_STMT        shift and go to state 228
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 35
    GLOBAL          shift and go to state 22
    FOR             shift and go to state 13
    IF              shift and go to state 47
    SEMI            shift and go to state 41
    COMMA           shift and go to state 43
    RETURN          shift and go to state 8
    SWITCH          shift and go to state 31
    TRY             shift and go to state 15
    WHILE           shift and go to state 24
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    expr_list                      shift and go to state 9
    number                         shift and go to state 23
    return_stmt                    shift and go to state 25
    switch_stmt                    shift and go to state 26
    break_stmt                     shift and go to state 39
    lambda_expr                    shift and go to state 27
    end                            shift and go to state 40
    matrix                         shift and go to state 10
    continue_stmt                  shift and go to state 28
    cellarray                      shift and go to state 18
    expr2                          shift and go to state 3
    expr1                          shift and go to state 42
    global_stmt                    shift and go to state 44
    string                         shift and go to state 38
    colon                          shift and go to state 7
    stmt                           shift and go to state 114
    for_stmt                       shift and go to state 49
    let                            shift and go to state 16
    expr_stmt                      shift and go to state 5
    ident                          shift and go to state 32
    if_stmt                        shift and go to state 6
    expr                           shift and go to state 33
    try_catch                      shift and go to state 34
    exprs                          shift and go to state 50
    while_stmt                     shift and go to state 51
    command                        shift and go to state 52
    null_stmt                      shift and go to state 53

state 219

    (74) for_stmt -> FOR LPAREN ident = expr RPAREN . SEMI stmt_list END_STMT

    SEMI            shift and go to state 229


state 220

    (45) args_opt -> LPAREN arg_list RPAREN .

    SEMI            reduce using rule 45 (args_opt -> LPAREN arg_list RPAREN .)


state 221

    (42) func_decl -> FUNCTION ret = ident args_opt . SEMI

    SEMI            shift and go to state 230


state 222

    (36) case_list -> CASE expr sep . stmt_list_opt case_list
    (53) stmt_list_opt -> .
    (54) stmt_list_opt -> . stmt_list
    (55) stmt_list -> . stmt
    (56) stmt_list -> . stmt_list stmt
    (8) stmt -> . let
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (72) let -> . expr = expr SEMI
    (32) continue_stmt -> . CONTINUE SEMI
    (33) break_stmt -> . BREAK SEMI
    (63) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (27) command -> . ident args SEMI
    (73) for_stmt -> . FOR ident = expr SEMI stmt_list END_STMT
    (74) for_stmt -> . FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT
    (67) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (68) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (39) null_stmt -> . SEMI
    (40) null_stmt -> . COMMA
    (31) return_stmt -> . RETURN SEMI
    (34) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (38) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (64) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (59) expr_list -> . exprs
    (60) expr_list -> . exprs COMMA
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr
    (61) exprs -> . expr
    (62) exprs -> . exprs COMMA expr

    CASE            reduce using rule 53 (stmt_list_opt -> .)
    OTHERWISE       reduce using rule 53 (stmt_list_opt -> .)
    END_STMT        reduce using rule 53 (stmt_list_opt -> .)
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 35
    GLOBAL          shift and go to state 22
    FOR             shift and go to state 13
    IF              shift and go to state 47
    SEMI            shift and go to state 41
    COMMA           shift and go to state 43
    RETURN          shift and go to state 8
    SWITCH          shift and go to state 31
    TRY             shift and go to state 15
    WHILE           shift and go to state 24
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    expr_list                      shift and go to state 9
    number                         shift and go to state 23
    stmt_list_opt                  shift and go to state 231
    return_stmt                    shift and go to state 25
    switch_stmt                    shift and go to state 26
    break_stmt                     shift and go to state 39
    lambda_expr                    shift and go to state 27
    end                            shift and go to state 40
    matrix                         shift and go to state 10
    continue_stmt                  shift and go to state 28
    cellarray                      shift and go to state 18
    expr2                          shift and go to state 3
    expr1                          shift and go to state 42
    global_stmt                    shift and go to state 44
    string                         shift and go to state 38
    colon                          shift and go to state 7
    stmt                           shift and go to state 14
    for_stmt                       shift and go to state 49
    let                            shift and go to state 16
    expr_stmt                      shift and go to state 5
    stmt_list                      shift and go to state 197
    ident                          shift and go to state 32
    if_stmt                        shift and go to state 6
    expr                           shift and go to state 33
    try_catch                      shift and go to state 34
    exprs                          shift and go to state 50
    while_stmt                     shift and go to state 51
    command                        shift and go to state 52
    null_stmt                      shift and go to state 53

state 223

    (49) arg_list -> arg_list COMMA ident = . expr
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr

    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    lambda_expr                    shift and go to state 27
    ident                          shift and go to state 56
    end                            shift and go to state 40
    string                         shift and go to state 38
    expr                           shift and go to state 232
    number                         shift and go to state 23
    expr2                          shift and go to state 3
    matrix                         shift and go to state 10
    cellarray                      shift and go to state 18
    expr1                          shift and go to state 42
    colon                          shift and go to state 7

state 224

    (70) elseif_stmt -> ELSE stmt_list_opt .

    END_STMT        reduce using rule 70 (elseif_stmt -> ELSE stmt_list_opt .)


state 225

    (71) elseif_stmt -> ELSEIF expr . sep stmt_list_opt elseif_stmt
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr
    (65) sep -> . COMMA
    (66) sep -> . SEMI

    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    AND             shift and go to state 105
    ANDAND          shift and go to state 99
    BACKSLASH       shift and go to state 94
    COLON           shift and go to state 96
    DIV             shift and go to state 87
    DOT             shift and go to state 90
    DOTDIV          shift and go to state 82
    DOTEXP          shift and go to state 104
    DOTMUL          shift and go to state 88
    EQ              shift and go to state 92
    EXP             shift and go to state 85
    GE              shift and go to state 102
    GT              shift and go to state 100
    LE              shift and go to state 91
    LT              shift and go to state 95
    MINUS           shift and go to state 89
    MUL             shift and go to state 86
    NE              shift and go to state 84
    OR              shift and go to state 107
    OROR            shift and go to state 83
    PLUS            shift and go to state 97
    COMMA           shift and go to state 169
    SEMI            shift and go to state 167

    sep                            shift and go to state 233

state 226

    (67) if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .

    CATCH           reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    CONTINUE        reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    BREAK           reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    GLOBAL          reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    FOR             reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    IF              reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    SEMI            reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    COMMA           reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    RETURN          reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    SWITCH          reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    TRY             reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    WHILE           reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    NE              reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    LPAREN          reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    IDENT           reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    END_EXPR        reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    NUMBER          reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    STRING          reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    COLON           reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    LBRACKET        reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    LBRACE          reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    MINUS           reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    PLUS            reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    NEG             reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    HANDLE          reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    END_STMT        reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    FUNCTION        reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    $end            reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    ELSE            reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    ELSEIF          reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    CASE            reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)
    OTHERWISE       reduce using rule 67 (if_stmt -> IF expr sep stmt_list_opt elseif_stmt END_STMT .)


state 227

    (68) if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .

    CATCH           reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    CONTINUE        reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    BREAK           reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    GLOBAL          reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    FOR             reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    IF              reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    SEMI            reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    COMMA           reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    RETURN          reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    SWITCH          reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    TRY             reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    WHILE           reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    NE              reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    LPAREN          reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    IDENT           reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    END_EXPR        reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    NUMBER          reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    STRING          reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    COLON           reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    LBRACKET        reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    LBRACE          reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    MINUS           reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    PLUS            reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    NEG             reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    HANDLE          reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    END_STMT        reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    FUNCTION        reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    $end            reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    ELSE            reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    ELSEIF          reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    CASE            reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)
    OTHERWISE       reduce using rule 68 (if_stmt -> IF expr error stmt_list_opt elseif_stmt END_STMT .)


state 228

    (73) for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .

    END_STMT        reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    CONTINUE        reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    BREAK           reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    GLOBAL          reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    FOR             reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    IF              reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    SEMI            reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    COMMA           reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    RETURN          reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    SWITCH          reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    TRY             reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    WHILE           reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    NE              reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    LPAREN          reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    IDENT           reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    END_EXPR        reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    NUMBER          reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    STRING          reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    COLON           reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    LBRACKET        reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    LBRACE          reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    MINUS           reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    PLUS            reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    NEG             reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    HANDLE          reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    FUNCTION        reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    $end            reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    ELSE            reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    ELSEIF          reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    CATCH           reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    CASE            reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)
    OTHERWISE       reduce using rule 73 (for_stmt -> FOR ident = expr SEMI stmt_list END_STMT .)


state 229

    (74) for_stmt -> FOR LPAREN ident = expr RPAREN SEMI . stmt_list END_STMT
    (55) stmt_list -> . stmt
    (56) stmt_list -> . stmt_list stmt
    (8) stmt -> . let
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (72) let -> . expr = expr SEMI
    (32) continue_stmt -> . CONTINUE SEMI
    (33) break_stmt -> . BREAK SEMI
    (63) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (27) command -> . ident args SEMI
    (73) for_stmt -> . FOR ident = expr SEMI stmt_list END_STMT
    (74) for_stmt -> . FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT
    (67) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (68) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (39) null_stmt -> . SEMI
    (40) null_stmt -> . COMMA
    (31) return_stmt -> . RETURN SEMI
    (34) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (38) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (64) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (59) expr_list -> . exprs
    (60) expr_list -> . exprs COMMA
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr
    (61) exprs -> . expr
    (62) exprs -> . exprs COMMA expr

    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 35
    GLOBAL          shift and go to state 22
    FOR             shift and go to state 13
    IF              shift and go to state 47
    SEMI            shift and go to state 41
    COMMA           shift and go to state 43
    RETURN          shift and go to state 8
    SWITCH          shift and go to state 31
    TRY             shift and go to state 15
    WHILE           shift and go to state 24
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    expr_list                      shift and go to state 9
    number                         shift and go to state 23
    return_stmt                    shift and go to state 25
    switch_stmt                    shift and go to state 26
    break_stmt                     shift and go to state 39
    lambda_expr                    shift and go to state 27
    end                            shift and go to state 40
    matrix                         shift and go to state 10
    continue_stmt                  shift and go to state 28
    cellarray                      shift and go to state 18
    expr2                          shift and go to state 3
    expr1                          shift and go to state 42
    global_stmt                    shift and go to state 44
    string                         shift and go to state 38
    colon                          shift and go to state 7
    stmt                           shift and go to state 14
    for_stmt                       shift and go to state 49
    let                            shift and go to state 16
    expr_stmt                      shift and go to state 5
    stmt_list                      shift and go to state 234
    ident                          shift and go to state 32
    if_stmt                        shift and go to state 6
    expr                           shift and go to state 33
    try_catch                      shift and go to state 34
    exprs                          shift and go to state 50
    while_stmt                     shift and go to state 51
    command                        shift and go to state 52
    null_stmt                      shift and go to state 53

state 230

    (42) func_decl -> FUNCTION ret = ident args_opt SEMI .

    CONTINUE        reduce using rule 42 (func_decl -> FUNCTION ret = ident args_opt SEMI .)
    BREAK           reduce using rule 42 (func_decl -> FUNCTION ret = ident args_opt SEMI .)
    GLOBAL          reduce using rule 42 (func_decl -> FUNCTION ret = ident args_opt SEMI .)
    FOR             reduce using rule 42 (func_decl -> FUNCTION ret = ident args_opt SEMI .)
    IF              reduce using rule 42 (func_decl -> FUNCTION ret = ident args_opt SEMI .)
    SEMI            reduce using rule 42 (func_decl -> FUNCTION ret = ident args_opt SEMI .)
    COMMA           reduce using rule 42 (func_decl -> FUNCTION ret = ident args_opt SEMI .)
    RETURN          reduce using rule 42 (func_decl -> FUNCTION ret = ident args_opt SEMI .)
    SWITCH          reduce using rule 42 (func_decl -> FUNCTION ret = ident args_opt SEMI .)
    TRY             reduce using rule 42 (func_decl -> FUNCTION ret = ident args_opt SEMI .)
    WHILE           reduce using rule 42 (func_decl -> FUNCTION ret = ident args_opt SEMI .)
    NE              reduce using rule 42 (func_decl -> FUNCTION ret = ident args_opt SEMI .)
    LPAREN          reduce using rule 42 (func_decl -> FUNCTION ret = ident args_opt SEMI .)
    IDENT           reduce using rule 42 (func_decl -> FUNCTION ret = ident args_opt SEMI .)
    END_EXPR        reduce using rule 42 (func_decl -> FUNCTION ret = ident args_opt SEMI .)
    NUMBER          reduce using rule 42 (func_decl -> FUNCTION ret = ident args_opt SEMI .)
    STRING          reduce using rule 42 (func_decl -> FUNCTION ret = ident args_opt SEMI .)
    COLON           reduce using rule 42 (func_decl -> FUNCTION ret = ident args_opt SEMI .)
    LBRACKET        reduce using rule 42 (func_decl -> FUNCTION ret = ident args_opt SEMI .)
    LBRACE          reduce using rule 42 (func_decl -> FUNCTION ret = ident args_opt SEMI .)
    MINUS           reduce using rule 42 (func_decl -> FUNCTION ret = ident args_opt SEMI .)
    PLUS            reduce using rule 42 (func_decl -> FUNCTION ret = ident args_opt SEMI .)
    NEG             reduce using rule 42 (func_decl -> FUNCTION ret = ident args_opt SEMI .)
    HANDLE          reduce using rule 42 (func_decl -> FUNCTION ret = ident args_opt SEMI .)
    FUNCTION        reduce using rule 42 (func_decl -> FUNCTION ret = ident args_opt SEMI .)
    $end            reduce using rule 42 (func_decl -> FUNCTION ret = ident args_opt SEMI .)


state 231

    (36) case_list -> CASE expr sep stmt_list_opt . case_list
    (35) case_list -> .
    (36) case_list -> . CASE expr sep stmt_list_opt case_list
    (37) case_list -> . OTHERWISE stmt_list

    END_STMT        reduce using rule 35 (case_list -> .)
    CASE            shift and go to state 185
    OTHERWISE       shift and go to state 189

    case_list                      shift and go to state 235

state 232

    (49) arg_list -> arg_list COMMA ident = expr .
    (106) expr -> expr . FIELD
    (107) expr -> expr . TRANSPOSE
    (108) expr -> expr . LBRACE expr_list RBRACE
    (109) expr -> expr . LBRACE RBRACE
    (110) expr -> expr . LPAREN expr_list RPAREN
    (111) expr -> expr . LPAREN RPAREN
    (112) expr2 -> expr . AND expr
    (113) expr2 -> expr . ANDAND expr
    (114) expr2 -> expr . BACKSLASH expr
    (115) expr2 -> expr . COLON expr
    (116) expr2 -> expr . DIV expr
    (117) expr2 -> expr . DOT expr
    (118) expr2 -> expr . DOTDIV expr
    (119) expr2 -> expr . DOTEXP expr
    (120) expr2 -> expr . DOTMUL expr
    (121) expr2 -> expr . EQ expr
    (122) expr2 -> expr . EXP expr
    (123) expr2 -> expr . GE expr
    (124) expr2 -> expr . GT expr
    (125) expr2 -> expr . LE expr
    (126) expr2 -> expr . LT expr
    (127) expr2 -> expr . MINUS expr
    (128) expr2 -> expr . MUL expr
    (129) expr2 -> expr . NE expr
    (130) expr2 -> expr . OR expr
    (131) expr2 -> expr . OROR expr
    (132) expr2 -> expr . PLUS expr

    RPAREN          reduce using rule 49 (arg_list -> arg_list COMMA ident = expr .)
    COMMA           reduce using rule 49 (arg_list -> arg_list COMMA ident = expr .)
    FIELD           shift and go to state 101
    TRANSPOSE       shift and go to state 93
    LBRACE          shift and go to state 106
    LPAREN          shift and go to state 103
    AND             shift and go to state 105
    ANDAND          shift and go to state 99
    BACKSLASH       shift and go to state 94
    COLON           shift and go to state 96
    DIV             shift and go to state 87
    DOT             shift and go to state 90
    DOTDIV          shift and go to state 82
    DOTEXP          shift and go to state 104
    DOTMUL          shift and go to state 88
    EQ              shift and go to state 92
    EXP             shift and go to state 85
    GE              shift and go to state 102
    GT              shift and go to state 100
    LE              shift and go to state 91
    LT              shift and go to state 95
    MINUS           shift and go to state 89
    MUL             shift and go to state 86
    NE              shift and go to state 84
    OR              shift and go to state 107
    OROR            shift and go to state 83
    PLUS            shift and go to state 97


state 233

    (71) elseif_stmt -> ELSEIF expr sep . stmt_list_opt elseif_stmt
    (53) stmt_list_opt -> .
    (54) stmt_list_opt -> . stmt_list
    (55) stmt_list -> . stmt
    (56) stmt_list -> . stmt_list stmt
    (8) stmt -> . let
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (72) let -> . expr = expr SEMI
    (32) continue_stmt -> . CONTINUE SEMI
    (33) break_stmt -> . BREAK SEMI
    (63) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (27) command -> . ident args SEMI
    (73) for_stmt -> . FOR ident = expr SEMI stmt_list END_STMT
    (74) for_stmt -> . FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT
    (67) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (68) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (39) null_stmt -> . SEMI
    (40) null_stmt -> . COMMA
    (31) return_stmt -> . RETURN SEMI
    (34) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (38) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (64) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (59) expr_list -> . exprs
    (60) expr_list -> . exprs COMMA
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr
    (61) exprs -> . expr
    (62) exprs -> . exprs COMMA expr

    ELSE            reduce using rule 53 (stmt_list_opt -> .)
    ELSEIF          reduce using rule 53 (stmt_list_opt -> .)
    END_STMT        reduce using rule 53 (stmt_list_opt -> .)
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 35
    GLOBAL          shift and go to state 22
    FOR             shift and go to state 13
    IF              shift and go to state 47
    SEMI            shift and go to state 41
    COMMA           shift and go to state 43
    RETURN          shift and go to state 8
    SWITCH          shift and go to state 31
    TRY             shift and go to state 15
    WHILE           shift and go to state 24
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    expr_list                      shift and go to state 9
    number                         shift and go to state 23
    stmt_list_opt                  shift and go to state 236
    return_stmt                    shift and go to state 25
    switch_stmt                    shift and go to state 26
    break_stmt                     shift and go to state 39
    lambda_expr                    shift and go to state 27
    end                            shift and go to state 40
    matrix                         shift and go to state 10
    continue_stmt                  shift and go to state 28
    cellarray                      shift and go to state 18
    expr2                          shift and go to state 3
    expr1                          shift and go to state 42
    global_stmt                    shift and go to state 44
    string                         shift and go to state 38
    colon                          shift and go to state 7
    stmt                           shift and go to state 14
    for_stmt                       shift and go to state 49
    let                            shift and go to state 16
    expr_stmt                      shift and go to state 5
    stmt_list                      shift and go to state 197
    ident                          shift and go to state 32
    if_stmt                        shift and go to state 6
    expr                           shift and go to state 33
    try_catch                      shift and go to state 34
    exprs                          shift and go to state 50
    while_stmt                     shift and go to state 51
    command                        shift and go to state 52
    null_stmt                      shift and go to state 53

state 234

    (74) for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list . END_STMT
    (56) stmt_list -> stmt_list . stmt
    (8) stmt -> . let
    (9) stmt -> . continue_stmt
    (10) stmt -> . break_stmt
    (11) stmt -> . expr_stmt
    (12) stmt -> . global_stmt
    (13) stmt -> . command
    (14) stmt -> . for_stmt
    (15) stmt -> . if_stmt
    (16) stmt -> . null_stmt
    (17) stmt -> . return_stmt
    (18) stmt -> . switch_stmt
    (19) stmt -> . try_catch
    (20) stmt -> . while_stmt
    (72) let -> . expr = expr SEMI
    (32) continue_stmt -> . CONTINUE SEMI
    (33) break_stmt -> . BREAK SEMI
    (63) expr_stmt -> . expr_list SEMI
    (30) global_stmt -> . GLOBAL global_list SEMI
    (27) command -> . ident args SEMI
    (73) for_stmt -> . FOR ident = expr SEMI stmt_list END_STMT
    (74) for_stmt -> . FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT
    (67) if_stmt -> . IF expr sep stmt_list_opt elseif_stmt END_STMT
    (68) if_stmt -> . IF expr error stmt_list_opt elseif_stmt END_STMT
    (39) null_stmt -> . SEMI
    (40) null_stmt -> . COMMA
    (31) return_stmt -> . RETURN SEMI
    (34) switch_stmt -> . SWITCH expr semi_opt case_list END_STMT
    (38) try_catch -> . TRY stmt_list CATCH stmt_list END_STMT
    (64) while_stmt -> . WHILE expr SEMI stmt_list END_STMT
    (75) expr -> . ident
    (76) expr -> . end
    (77) expr -> . number
    (78) expr -> . string
    (79) expr -> . colon
    (80) expr -> . matrix
    (81) expr -> . cellarray
    (82) expr -> . expr2
    (83) expr -> . expr1
    (84) expr -> . lambda_expr
    (85) expr -> . NE
    (105) expr -> . LPAREN expr RPAREN
    (106) expr -> . expr FIELD
    (107) expr -> . expr TRANSPOSE
    (108) expr -> . expr LBRACE expr_list RBRACE
    (109) expr -> . expr LBRACE RBRACE
    (110) expr -> . expr LPAREN expr_list RPAREN
    (111) expr -> . expr LPAREN RPAREN
    (59) expr_list -> . exprs
    (60) expr_list -> . exprs COMMA
    (89) ident -> . IDENT
    (91) end -> . END_EXPR
    (90) number -> . NUMBER
    (92) string -> . STRING
    (93) colon -> . COLON
    (100) matrix -> . LBRACKET RBRACKET
    (101) matrix -> . LBRACKET concat_list RBRACKET
    (102) matrix -> . LBRACKET concat_list SEMI RBRACKET
    (103) matrix -> . LBRACKET expr_list RBRACKET
    (104) matrix -> . LBRACKET expr_list SEMI RBRACKET
    (98) cellarray -> . LBRACE RBRACE
    (99) cellarray -> . LBRACE expr_list RBRACE
    (112) expr2 -> . expr AND expr
    (113) expr2 -> . expr ANDAND expr
    (114) expr2 -> . expr BACKSLASH expr
    (115) expr2 -> . expr COLON expr
    (116) expr2 -> . expr DIV expr
    (117) expr2 -> . expr DOT expr
    (118) expr2 -> . expr DOTDIV expr
    (119) expr2 -> . expr DOTEXP expr
    (120) expr2 -> . expr DOTMUL expr
    (121) expr2 -> . expr EQ expr
    (122) expr2 -> . expr EXP expr
    (123) expr2 -> . expr GE expr
    (124) expr2 -> . expr GT expr
    (125) expr2 -> . expr LE expr
    (126) expr2 -> . expr LT expr
    (127) expr2 -> . expr MINUS expr
    (128) expr2 -> . expr MUL expr
    (129) expr2 -> . expr NE expr
    (130) expr2 -> . expr OR expr
    (131) expr2 -> . expr OROR expr
    (132) expr2 -> . expr PLUS expr
    (94) expr1 -> . MINUS expr
    (95) expr1 -> . PLUS expr
    (96) expr1 -> . NEG expr
    (97) expr1 -> . HANDLE ident
    (88) lambda_expr -> . HANDLE lambda_args expr
    (61) exprs -> . expr
    (62) exprs -> . exprs COMMA expr

    END_STMT        shift and go to state 237
    CONTINUE        shift and go to state 19
    BREAK           shift and go to state 35
    GLOBAL          shift and go to state 22
    FOR             shift and go to state 13
    IF              shift and go to state 47
    SEMI            shift and go to state 41
    COMMA           shift and go to state 43
    RETURN          shift and go to state 8
    SWITCH          shift and go to state 31
    TRY             shift and go to state 15
    WHILE           shift and go to state 24
    NE              shift and go to state 30
    LPAREN          shift and go to state 46
    IDENT           shift and go to state 12
    END_EXPR        shift and go to state 20
    NUMBER          shift and go to state 36
    STRING          shift and go to state 45
    COLON           shift and go to state 11
    LBRACKET        shift and go to state 1
    LBRACE          shift and go to state 17
    MINUS           shift and go to state 2
    PLUS            shift and go to state 4
    NEG             shift and go to state 21
    HANDLE          shift and go to state 37

    expr_list                      shift and go to state 9
    number                         shift and go to state 23
    return_stmt                    shift and go to state 25
    switch_stmt                    shift and go to state 26
    break_stmt                     shift and go to state 39
    lambda_expr                    shift and go to state 27
    end                            shift and go to state 40
    matrix                         shift and go to state 10
    continue_stmt                  shift and go to state 28
    cellarray                      shift and go to state 18
    expr2                          shift and go to state 3
    expr1                          shift and go to state 42
    global_stmt                    shift and go to state 44
    string                         shift and go to state 38
    colon                          shift and go to state 7
    stmt                           shift and go to state 114
    for_stmt                       shift and go to state 49
    let                            shift and go to state 16
    expr_stmt                      shift and go to state 5
    ident                          shift and go to state 32
    if_stmt                        shift and go to state 6
    expr                           shift and go to state 33
    try_catch                      shift and go to state 34
    exprs                          shift and go to state 50
    while_stmt                     shift and go to state 51
    command                        shift and go to state 52
    null_stmt                      shift and go to state 53

state 235

    (36) case_list -> CASE expr sep stmt_list_opt case_list .

    END_STMT        reduce using rule 36 (case_list -> CASE expr sep stmt_list_opt case_list .)


state 236

    (71) elseif_stmt -> ELSEIF expr sep stmt_list_opt . elseif_stmt
    (69) elseif_stmt -> .
    (70) elseif_stmt -> . ELSE stmt_list_opt
    (71) elseif_stmt -> . ELSEIF expr sep stmt_list_opt elseif_stmt

    END_STMT        reduce using rule 69 (elseif_stmt -> .)
    ELSE            shift and go to state 214
    ELSEIF          shift and go to state 215

    elseif_stmt                    shift and go to state 238

state 237

    (74) for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .

    END_STMT        reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    CONTINUE        reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    BREAK           reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    GLOBAL          reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    FOR             reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    IF              reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    SEMI            reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    COMMA           reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    RETURN          reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    SWITCH          reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    TRY             reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    WHILE           reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    NE              reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    LPAREN          reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    IDENT           reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    END_EXPR        reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    NUMBER          reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    STRING          reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    COLON           reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    LBRACKET        reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    LBRACE          reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    MINUS           reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    PLUS            reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    NEG             reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    HANDLE          reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    FUNCTION        reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    $end            reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    ELSE            reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    ELSEIF          reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    CATCH           reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    CASE            reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)
    OTHERWISE       reduce using rule 74 (for_stmt -> FOR LPAREN ident = expr RPAREN SEMI stmt_list END_STMT .)


state 238

    (71) elseif_stmt -> ELSEIF expr sep stmt_list_opt elseif_stmt .

    END_STMT        reduce using rule 71 (elseif_stmt -> ELSEIF expr sep stmt_list_opt elseif_stmt .)

