# Autogenerated with SMOP version 0.20
import numpy,sys
from copy import copy as _copy
from smop.runtime import *
numpy.random.seed(0)
def about_ef(opt,**kwargs):
    if nargin()==0:
        opt='command'
    v=ver('ezyfit')
    if 'command'==opt:
        disp('EzyFit')
        disp('A free curve fitting toolbox for Matlab')
        disp(m_array(['Version ',v.Version,' (',v.Date,')']).reshape(1,-1))
        disp('Frederic Moisy')
    else:
        a=imread('about_ef.jpg')
        ss=get(0,'ScreenSize')
        figure('Position',m_array([(ss[int(3-1)]-size(a,2))/2,(ss[int(4-1)]-size(a,1))/2,size(a,2),size(a,1)]).reshape(1,-1))
        image(a)
        set(gca(),'Position',m_array([0,0,1,1]).reshape(1,-1))
        axis('off')
        set(gcf(),'Toolbar','none')
        set(gcf(),'Menubar','none')
        set(gcf(),'Numbertitle','off')
        set(gcf(),'Name','About EzyFit')
        set(gcf(),'Resize','off')
        set(gcf(),'WindowStyle','modal')
        delete(findobj(gcf(),'Label','Ezyfit'))
        annotation('textbox',m_array([0.175,0.33,0.4,0.2]).reshape(1,-1),'Color',0.65*m_array([1,1,1]).reshape(1,-1),'LineStyle','none','FontName','Verdana','FontSize',8,'FontWeight','bold','String',m_array(['Version ',v.Version,' (',v.Date,')']).reshape(1,-1))
    return 
def axis0(opt,**kwargs):
    if nargin()==0:
        opt='xy'
    a=axis()
    if 'x'==lower(opt):
        axis(m_array([min(m_array([0,a[int(1-1)]]).reshape(1,-1)),max(m_array([0,a[int(2-1)]]).reshape(1,-1)),a[int(3-1)],a[int(4-1)]]).reshape(1,-1))
    else:
        if 'y'==lower(opt):
            axis(m_array([a[int(1-1)],a[int(2-1)],min(m_array([0,a[int(3-1)]]).reshape(1,-1)),max(m_array([0,a[int(4-1)]]).reshape(1,-1))]).reshape(1,-1))
        else:
            axis(m_array([min(m_array([0,a[int(1-1)]]).reshape(1,-1)),max(m_array([0,a[int(2-1)]]).reshape(1,-1)),min(m_array([0,a[int(3-1)]]).reshape(1,-1)),max(m_array([0,a[int(4-1)]]).reshape(1,-1))]).reshape(1,-1))
    return 
def axisc(opt,**kwargs):
    if nargin()==0:
        opt='xy'
    a=axis()
    xbound=max(m_array([abs(a[int(1-1)]),abs(a[int(2-1)])]).reshape(1,-1))
    ybound=max(m_array([abs(a[int(3-1)]),abs(a[int(4-1)])]).reshape(1,-1))
    if 'x'==lower(opt):
        axis(m_array([-xbound,xbound,a[int(3-1)],a[int(4-1)]]).reshape(1,-1))
    else:
        if 'y'==lower(opt):
            axis(m_array([a[int(1-1)],a[int(2-1)],-ybound,ybound]).reshape(1,-1))
        else:
            axis(m_array([-xbound,xbound,-ybound,ybound]).reshape(1,-1))
    return 
def axisl(opt,**kwargs):
    if nargin()==0:
        opt='xy'
    a=axis()
    if 'x'==lower(opt):
        axis(m_array([10**(floor(log10(a[int(1-1)]))),10**(ceil(log10(a[int(2-1)]))),a[int(3-1)],a[int(4-1)]]).reshape(1,-1))
    else:
        if 'y'==lower(opt):
            axis(m_array([a[int(1-1)],a[int(2-1)],10**(floor(log10(a[int(3-1)]))),10**(ceil(log10(a[int(4-1)])))]).reshape(1,-1))
        else:
            axis(m_array([10**(floor(log10(a[int(1-1)]))),10**(ceil(log10(a[int(2-1)]))),10**(floor(log10(a[int(3-1)]))),10**(ceil(log10(a[int(4-1)])))]).reshape(1,-1))
    return 
def dfig(h,**kwargs):
    if nargin()==0:
        h=figure()
    else:
        figure(h)
    set(h,'WindowStyle','docked')
    if nargout()!=0:
        hh=h
    return hh
def dispeqfit(f,fp,**kwargs):
    if nargin()<2:
        try: 
            fp=fitparam()
        except: 
            error('No fitparam file found.')
    streq=f.eq
    if strcmp(fp.eqreplacemode,'on'):
        for n in arange(1,length(f.m)+1).reshape(1,-1).flat:
            streq=strrep(streq,f.param[n-1],num2str(f.m[int(n-1)],fp.numberofdigit))
        streq=strrep(streq,'+-','-')
        disp(m_array(['Equation: ',f.yvar,'(',f.xvar,') = ',streq]).reshape(1,-1))
    else:
        disp(m_array(['Equation: ',f.yvar,'(',f.xvar,') = ',streq]).reshape(1,-1))
        for i in arange(1,length(f.m)+1).reshape(1,-1).flat:
            disp(m_array(['     ',f.param[i-1],' = ',num2str(f.m[int(i-1)],fp.numberofdigit)]).reshape(1,-1))
    lastline=''
    if 'r'==lower(fp.corrcoefmode):
        lastline=m_array(['R = ',num2str(f.r,fp.numberofdigit),'  ']).reshape(1,-1)
    else:
        if 'r2'==lower(fp.corrcoefmode):
            lastline=m_array(['R^2 = ',num2str(f.r**2,fp.numberofdigit),'  ']).reshape(1,-1)
    if strcmp(fp.linlogdisp,'on'):
        lastline=m_array([lastline,'(',f.fitmode,')']).reshape(1,-1)
    if  not isempty(lastline):
        disp(m_array(['     ',lastline]).reshape(1,-1))
    return 
def docezyfit(filename,**kwargs):
    if nargin()==0:
        filename='ezyfit.html'
    pathstr=fileparts(which('docezyfit'))
    if strfind(filename,'.html'):
        htmlfile=fullfile(pathstr,'html',filename)
    else:
        htmlfile=fullfile(pathstr,'html',m_array([filename,'.html']).reshape(1,-1))
    web(htmlfile,'-helpbrowser')
    return 
def editfit(n,name,eq,**kwargs):
    efroot=fileparts(mfilename('fullpath'))
    userfitfile=m_array([efroot,filesep(),'userfit.mat']).reshape(1,-1)
    if (nargin()==1) and ( not isnumeric(n)):
        if strcmp(n,'reset'):
            clear('userfit')
            if exist(userfitfile,'file'):
                delete(userfitfile)
            loadfit('user')
            return 
        else:
            if strcmp(n,'list'):
                userfit=loadfit('user')
                for i in arange(1,length(userfit)+1).reshape(1,-1).flat:
                    disp(m_array(['Fit #',num2str(i),': ',userfit[int(i-1)].name]).reshape(1,-1))
                    disp(m_array(['        ',userfit[int(i-1)].eq]).reshape(1,-1))
                return 
    userfit=loadfit('user')
    if (nargin()==3):
        if n<=(length(userfit)+1):
            userfit[int(n-1)].name=name
            userfit[int(n-1)].eq=eq
            save(userfitfile,'userfit')
            efmenu()
            return 
        else:
            error('Wrong fit number.')
    if (nargin()==0):
        n=length(userfit)+1
        userfit[int(n-1)].name=m_array(['fit',num2str(n)]).reshape(1,-1)
        userfit[int(n-1)].eq='a*x+b*x^2 ; a=1 ; b=0.1'
    if n>length(userfit):
        error('Wrong fit number.')
    answer=inputdlg(['Name (enter an empty string to delete this fit):','Equation y(x) = a*x + b*x^2...; a=1; ...'],m_array(['Edit User Fit #',num2str(n)]).reshape(1,-1),1,[userfit[int(n-1)].name,userfit[int(n-1)].eq])
    if  not isempty(answer):
        if isempty(answer[1-1]):
            userfit=userfit[int(m_array([arange(1,(n-1)+1).reshape(1,-1),arange((n+1),userfit.shape[0]+1).reshape(1,-1)]).reshape(1,-1)-1)]
        else:
            userfit[int(n-1)].name=answer[1-1]
            userfit[int(n-1)].eq=answer[2-1]
        save(userfitfile,'userfit')
        efmenu()
    else:
        return 
    return 
def install_ef(**kwargs):
    sufolder=strrep(userpath(),';','')
    sufolder=strrep(sufolder,':','')
    sufile=fullfile(sufolder,'startup.m')
    ft=m_array()
    if exist(sufile,'file'):
        try: 
            ft=textread(sufile,'%s')
        except: 
            ft=m_array()
    if  not isempty(ft):
        for num in arange(1,length(ft)+1).reshape(1,-1).flat:
            if strfind(ft[num-1],'efmenu'):
                disp('The EzyFit menu is already installed in your startup.m file:')
                disp(sufile)
                return 
        copyfile(sufile,fullfile(sufolder,'startup_previous.m'))
        fid=fopen(sufile,'a')
        fprintf(fid,'%s\\n',' ')
        fprintf(fid,'%s\\n',m_array(["%   These lines have been added by 'efmenu install' (",datestr(now()),'):']).reshape(1,-1))
        fprintf(fid,'%s\\n','efmenu;   % Includes the EzyFit menu for all new figure.')
        fprintf(fid,'%s\\n\\n','fprintf(\' To get started with the EzyFit toolbox, select <a href="matlab:docezyfit">EzyFit</a> from the Help browser.\\n\\n\');')
        fclose(fid)
        disp('The EzyFit menu has been correctly installed.')
        disp('To get started, select <a href="matlab:docezyfit">EzyFit</a> from the Help browser.')
    else:
        fid=fopen(sufile,'w')
        fprintf(fid,'%s\\n','%STARTUP   Startup file')
        fprintf(fid,'%s\\n','%   This file is executed when MATLAB starts up.')
        fprintf(fid,'%s\\n',' ')
        fclose(fid)
        install_ef()
    return 
def evalfit(f,x,**kwargs):
    m=f.m
    x__ref=x
    y=eval(eq2ml(f.eq,f.xvar))
    if length(y)==1:
        y=y*ones(1,length(x))
    return y
def ezfft(varargin,**kwargs):
    error(nargchk(1,inf(),nargin()))
    if nargin()==1:
        u=varargin[1-1]
        dt=1
    else:
        dt=varargin[1-1]
        u=varargin[2-1]
    if length(dt)>1:
        if length(u)!=length(dt):
            error('Vectors T and U should be of equal length.')
        dt=abs(dt[int(2-1)]-dt[int(1-1)])
    if mod(length(u),2)!=0:
        u=u[1-1:(u.shape[0]-1)+1-1]
    u=real(u)
    if size(u,2)==1:
        u=u.T
    if any(strcmpi(varargin,'hann')):
        u=u*hann(length(u)).T
    n=length(u)/2
    w=linspace(0,pi(),n)/dt
    e=abs(fft(u))**2
    e=2*e[1-1:n+1-1]/(2*n)**2/w[int(2-1)]
    e[int(1-1)]=e[int(1-1)]/2
    if nargout()==0 or any(strncmpi(varargin,'disp',1)):
        if any(strncmpi(varargin,'freq',1)) and any(strncmpi(varargin,'space',1)):
            error("Properties 'freq' and 'space' cannot be specified simultaneously")
        else:
            if any(strncmpi(varargin,'freq',1)) and  not any(strncmpi(varargin,'space',1)):
                hh=loglog(w/(2*pi()),2*pi()*e)
                xlabel('f = \\omega / 2\\pi')
                ylabel('E(f)')
            else:
                if  not any(strncmpi(varargin,'freq',1)) and any(strncmpi(varargin,'space',1)):
                    hh=loglog(w,e)
                    xlabel('k')
                    ylabel('E(k)')
                else:
                    hh=loglog(w,e)
                    xlabel('\\omega')
                    ylabel('E(\\omega)')
    if nargout()>0 and any(strncmpi(varargin,'handle',4)) and any(strncmpi(varargin,'disp',1)):
        w=hh
        clear('e')
        return w,e
    if nargout()==0:
        clear('w','e')
    return w,e
def hann(n,**kwargs):
    error(nargchk(1,1,nargin()))
    y=0.5*(1-cos(2*pi()*(arange(0,n-1+1).reshape(1,-1))/(n-1))).T
    return y
def getlineinfo(varargin,**kwargs):
    if false():
        if  not exist('imline','file'):
            error('The Image Processing Toolbox is required for this operation.')
        try: 
            h=imline(gca(),m_array())
        except: 
            error('Unselect the current selection.')
        hline=get(h,'Children')
        x=get(hline[int(3-1)],'XData')
        y=get(hline[int(3-1)],'YData')
    else:
        if  not exist('getline','file'):
            error('The Image Processing Toolbox is required for this operation.')
        x,y=getline(nargout=2)
        x=x[1-1:2+1-1]
        y=y[1-1:2+1-1]
        oldhold=ishold()
        hold('on')
        plot(x,y,'k:')
        if oldhold==false():
            hold('off')
    dx=x[int(2-1)]-x[int(1-1)]
    dy=y[int(2-1)]-y[int(1-1)]
    len=sqrt(dx**2+dy**2)
    if any(strcmpi(varargin,'rad')):
        angle=atan(dy/dx)
        txtangle=m_array(['Angle = ',num2str(angle),' rad']).reshape(1,-1)
    else:
        if any(strcmpi(varargin,'slope')):
            angle=dy/dx
            txtangle=m_array(['Slope = ',num2str(angle)]).reshape(1,-1)
        else:
            angle=atan(dy/dx)*180/pi()
            txtangle=m_array(['Angle = ',num2str(angle),' deg']).reshape(1,-1)
    if any(strcmpi(varargin,'angle')):
        txt=txtangle
    else:
        txt=[m_array(['(',num2str(dx),', ',num2str(dy),')']).reshape(1,-1),m_array(['Length = ',num2str(len)]).reshape(1,-1),txtangle]
    if nargout()==0:
        text((x[int(1-1)]+x[int(2-1)])/2,(y[int(1-1)]+y[int(2-1)])/2,txt)
        clear('len','angle','dx','dy')
    return len,angle,dx,dy
def getslope(varargin,**kwargs):
    try: 
        fp=fitparam()
    except: 
        fp.numberofdigit=3
    if isempty(get(0,'CurrentFigure')):
        error('No figure.')
    if isempty(legend()):
        islegend=false()
    else:
        islegend=true()
        legend('off')
    strv=version()
    v=str2double(strv[1-1:3+1-1])
    if v>=7.4 or v==7.1:
        if  not ishandle(gco()):
            if any(strncmpi(varargin,'dialog',4)):
                errordlg('First select a line (Menu Insert > Line)','GetSlope')
                return n(),a()
            error('First select a line (Menu Insert > Line).')
        h=gco()
        o=get(h)
        if  not isfield(o,'X'):
            if any(strncmpi(varargin,'dialog',4)):
                errordlg('First select a line (Menu Insert > Line)','GetSlope')
                return n(),a()
            error('First select a line (Menu Insert > Line).')
        xw1=o.X[int(1-1)]
        xw2=o.X[int(2-1)]
        yw1=o.Y[int(1-1)]
        yw2=o.Y[int(2-1)]
    else:
        if ishandle(gco()):
            if  not isfield(get(gco()),'XData'):
                if (gco()==gcf()):
                    if any(strncmpi(varargin,'dialog',4)):
                        errordlg('First select a line (Menu Insert > Line)','GetSlope')
                        return n(),a()
                    error('First select a line (Menu Insert > Line).')
                else:
                    h=findall(gcf(),'Type','line')
                    if length(h)<4:
                        if any(strncmpi(varargin,'dialog',4)):
                            errordlg('First select a line (Menu Insert > Line)','GetSlope')
                            return n(),a()
                        error('First select a line (Menu Insert > Line).')
                    else:
                        h=h[int(4-1)]
            else:
                h=gco()
                o=get(gco())
                if  not (length(o.XData)==2):
                    if (length(o.XData)==1):
                        o=get(o.Parent)
                        h=o.Children[int(3-1)]
                    else:
                        if any(strncmpi(varargin,'dialog',4)):
                            errordlg('First select a line (Menu Insert > Line)','GetSlope')
                            return n(),a()
                        error('First select a line (Menu Insert > Line).')
        else:
            if any(strncmpi(varargin,'dialog',5)):
                errordlg('First select a line (Menu Insert > Line)','GetSlope')
                return n(),a()
            error('First select a line (Menu Insert > Line).')
        o=get(h)
        xw1=o.XData[int(1-1)]
        xw2=o.XData[int(2-1)]
        yw1=o.YData[int(1-1)]
        yw2=o.YData[int(2-1)]
    icg=get(gca())
    xr1=(xw1-icg.Position[int(1-1)])/(icg.Position[int(3-1)])
    xr2=(xw2-icg.Position[int(1-1)])/(icg.Position[int(3-1)])
    yr1=(yw1-icg.Position[int(2-1)])/(icg.Position[int(4-1)])
    yr2=(yw2-icg.Position[int(2-1)])/(icg.Position[int(4-1)])
    xb1=icg.XLim[int(1-1)]
    xb2=icg.XLim[int(2-1)]
    if strcmpi(icg.YDir,'reverse'):
        yb2=icg.YLim[int(1-1)]
        yb1=icg.YLim[int(2-1)]
    else:
        yb1=icg.YLim[int(1-1)]
        yb2=icg.YLim[int(2-1)]
    if strncmpi(icg.XScale,'log',3) and strncmpi(icg.YScale,'log',3):
        x1=xb1*(xb2/xb1)**xr1
        x2=xb1*(xb2/xb1)**xr2
        y1=yb1*(yb2/yb1)**yr1
        y2=yb1*(yb2/yb1)**yr2
        n=log(y2/y1)/log(x2/x1)
        a=y1/(x1**n)
        if any(strncmpi(varargin,'equation',2)):
            str=m_array([num2str(a,fp.numberofdigit),' x^{',num2str(n,fp.numberofdigit),'}']).reshape(1,-1)
        else:
            str=num2str(n,fp.numberofdigit)
    else:
        if strncmpi(icg.XScale,'linear',3) and strncmpi(icg.YScale,'linear',3):
            x1=xb1+(xb2-xb1)*xr1
            x2=xb1+(xb2-xb1)*xr2
            y1=yb1+(yb2-yb1)*yr1
            y2=yb1+(yb2-yb1)*yr2
            n=(y2-y1)/(x2-x1)
            a=y1-n*x1
            if any(strncmpi(varargin,'equation',2)):
                if a>0:
                    str=m_array([num2str(n,fp.numberofdigit),' x + ',num2str(a,fp.numberofdigit)]).reshape(1,-1)
                else:
                    str=m_array([num2str(n,fp.numberofdigit),' x ',num2str(a,fp.numberofdigit)]).reshape(1,-1)
            else:
                str=num2str(n,fp.numberofdigit)
        else:
            if strncmpi(icg.XScale,'linear',3) and strncmpi(icg.YScale,'log',3):
                x1=xb1+(xb2-xb1)*xr1
                x2=xb1+(xb2-xb1)*xr2
                y1=yb1*(yb2/yb1)**yr1
                y2=yb1*(yb2/yb1)**yr2
                n=log(y2/y1)/(x2-x1)
                a=y1/exp(n*x1)
                if any(strncmpi(varargin,'equation',2)):
                    str=m_array([num2str(a,fp.numberofdigit),' e^{',num2str(n,fp.numberofdigit),' x}']).reshape(1,-1)
                else:
                    str=num2str(n,fp.numberofdigit)
            else:
                if strncmpi(icg.XScale,'log',3) and strncmpi(icg.YScale,'linear',3):
                    x1=xb1*(xb2/xb1)**xr1
                    x2=xb1*(xb2/xb1)**xr2
                    y1=yb1+(yb2-yb1)*yr1
                    y2=yb1+(yb2-yb1)*yr2
                    n=(y2-y1)/log(x2/x1)
                    if n!=0:
                        a=y1-n*log(x1)
                    else:
                        a=NaN()
                    if any(strncmpi(varargin,'equation',2)):
                        str=m_array([num2str(a,fp.numberofdigit),' ln (',num2str(n,fp.numberofdigit),' x)']).reshape(1,-1)
                    else:
                        str=num2str(n,fp.numberofdigit)
    if ishandle(get(h,'UserData')):
        delete(get(h,'UserData'))
    if  not any(strncmpi(varargin,'nodisplay',3)):
        if any(strncmpi(varargin,'command',3)):
            disp(str)
        if ( not any(strncmpi(varargin,'figure',3)) and  not any(strncmpi(varargin,'command',3))) or any(strncmpi(varargin,'figure',3)):
            textlocation=m_array([(xw1+xw2)/2,(yw1+yw2)/2-0.075-sign(n)*0.025,0.4,0.1]).reshape(1,-1)
            htext=annotation('textbox',textlocation,'LineStyle','none','UserData','getslopetextbox','String',str)
            set(h,'UserData',htext)
    if islegend:
        legend('show')
    if nargout()==0:
        clear('n')
    return n,a
def gridc(opt,**kwargs):
    if nargin()==0:
        opt='xy'
    a=axis()
    hold('on')
    if findstr(lower(opt),'x'):
        plot(m_array([a[int(1-1)],a[int(2-1)]]).reshape(1,-1),m_array([0,0]).reshape(1,-1),'k:')
    if findstr(lower(opt),'y'):
        plot(m_array([0,0]).reshape(1,-1),m_array([a[int(3-1)],a[int(4-1)]]).reshape(1,-1),'k:')
    hold('off')
    return 
def linx(**kwargs):
    set(gca(),'XScale','lin')
    return 
def liny(**kwargs):
    set(gca(),'YScale','lin')
    return 
def loglogpn(x,y,specpos,specneg,varargin,**kwargs):
    error(nargchk(1,inf(),nargin()))
    if nargin()<2:
        y=x
        x=arange(1,length(y)+1).reshape(1,-1)
    if nargin()<3:
        specpos='b-'
        specneg='b--'
    else:
        if nargin()<4:
            if findstr(specpos,'--'):
                specneg=strrep(specpos,'--','-')
            else:
                specneg=specpos
                specneg=strrep(specneg,'-.','')
                specneg=strrep(specneg,':','')
                specneg=strrep(specneg,'-','')
                specneg=m_array([specneg,'--']).reshape(1,-1)
    indpos=find(y>0)
    indneg=find(y<0)
    ypos=_copy(y)
    ypos[int(indneg-1)]=0
    yneg=_copy(y)
    yneg[int(indpos-1)]=0
    if isempty(indneg) and  not isempty(indpos):
        hp=loglog(x,ypos,specpos,varargin[:])
        hn=m_array()
    else:
        if  not isempty(indneg) and isempty(indpos):
            hp=m_array()
            hn=loglog(x,-yneg,specneg,varargin[:])
        else:
            statehold=ishold()
            hp=loglog(x,ypos,specpos,varargin[:])
            hold('on')
            hn=loglog(x,-yneg,specneg,varargin[:])
            if statehold==false():
                hold('off')
    if  not nargout():
        clear('hp','hn')
    return hp,hn
def logx(**kwargs):
    set(gca(),'XScale','log')
    return 
def logy(**kwargs):
    set(gca(),'YScale','log')
    return 
def makevarfit(f,**kwargs):
    if nargin()==0:
        if evalin('base',"exist('lastfit','var')"):
            f=evalin('base','lastfit')
        else:
            errordlg('No existing fit coefficients. First fit a curve.','Edit Fit Coefficients','on')
            return 
    for i in arange(1,length(f.param)+1).reshape(1,-1).flat:
        assignin('base',f.param[i-1],f.m[int(i-1)])
    return 
def myginput(arg1,strpointertype,**kwargs):
    out1=m_array()
    out2=m_array()
    out3=m_array()
    y=m_array()
    if nargin()<1:
        strpointertype='fullcrosshair'
    c=computer()
    if  not strcmp(c[1-1:2+1-1],'PC'):
        tp=get(0,'TerminalProtocol')
    else:
        tp='micro'
    if  not strcmp(tp,'none')& not strcmp(tp,'x')& not strcmp(tp,'micro'):
        if nargout()==1:
            if nargin()==1:
                out1=trmginput(arg1)
            else:
                out1=trmginput()
        else:
            if nargout()==2|nargout()==0:
                if nargin()==1:
                    out1,out2=trmginput(arg1,nargout=2)
                else:
                    out1,out2=trmginput(nargout=2)
                if nargout()==0:
                    out1=m_array([out1,out2]).reshape(1,-1)
            else:
                if nargout()==3:
                    if nargin()==1:
                        out1,out2,out3=trmginput(arg1,nargout=3)
                    else:
                        out1,out2,out3=trmginput(nargout=3)
    else:
        fig=gcf()
        figure(gcf())
        if nargin()==0:
            how_many=-1
            b=m_array()
        else:
            how_many=arg1
            b=m_array()
            if isstr(how_many)|size(how_many,1)!=1|size(how_many,2)!=1| not (fix(how_many)==how_many)|how_many<0:
                error('Requires a positive integer.')
            if how_many==0:
                ptr_fig=0
                while (ptr_fig!=fig):
                    ptr_fig=get(0,'PointerWindow')
                scrn_pt=get(0,'PointerLocation')
                loc=get(fig,'Position')
                pt=m_array([scrn_pt[int(1-1)]-loc[int(1-1)],scrn_pt[int(2-1)]-loc[int(2-1)]]).reshape(1,-1)
                out1=pt[int(1-1)]
                y=pt[int(2-1)]
            else:
                if how_many<0:
                    error('Argument must be a positive integer.')
        state=uisuspend(fig)
        pointer=get(gcf(),'pointer')
        set(gcf(),'pointer',strpointertype)
        fig_units=get(fig,'units')
        char=0
        drawnow()
        while how_many!=0:
            waserr=0
            try: 
                keydown=wfbp()
            except: 
                waserr=1
            if (waserr==1):
                if (ishandle(fig)):
                    set(fig,'units',fig_units)
                    uirestore(state)
                    error('Interrupted')
                else:
                    error('Interrupted by figure deletion')
            ptr_fig=get(0,'CurrentFigure')
            if (ptr_fig==fig):
                if keydown:
                    char=get(fig,'CurrentCharacter')
                    button=abs(get(fig,'CurrentCharacter'))
                    scrn_pt=get(0,'PointerLocation')
                    set(fig,'units','pixels')
                    loc=get(fig,'Position')
                    pt=m_array([scrn_pt[int(1-1)]-loc[int(1-1)],scrn_pt[int(2-1)]-loc[int(2-1)]]).reshape(1,-1)
                    set(fig,'CurrentPoint',pt)
                else:
                    button=get(fig,'SelectionType')
                    if strcmp(button,'open'):
                        button=1
                    else:
                        if strcmp(button,'normal'):
                            button=1
                        else:
                            if strcmp(button,'extend'):
                                button=2
                            else:
                                if strcmp(button,'alt'):
                                    button=3
                                else:
                                    error('Invalid mouse selection.')
                pt=get(gca(),'CurrentPoint')
                how_many=how_many-1
                if (char==13):
                    break
                out1=m_array([[out1],[pt[1-1,1-1]]]).reshape(1,-1)
                y=m_array([[y],[pt[1-1,2-1]]]).reshape(1,-1)
                b=m_array([[b],[button]]).reshape(1,-1)
        uirestore(state)
        set(fig,'units',fig_units)
        if nargout()>1:
            out2=y
            if nargout()>2:
                out3=b
        else:
            out1=m_array([out1,y]).reshape(1,-1)
    return out1,out2,out3
def wfbp(**kwargs):
    fig=gcf()
    current_char=m_array()
    waserr=0
    try: 
        h=findall(fig,'type','uimenu','accel','C')
        set(h,'accel','')
        keydown=waitforbuttonpress()
        current_char=double(get(fig,'CurrentCharacter'))
        if  not isempty(current_char)&(keydown==1):
            if (current_char==3):
                waserr=1
        set(h,'accel','C')
    except: 
        waserr=1
    drawnow()
    if (waserr==1):
        set(h,'accel','C')
        error('Interrupted')
    if nargout()>0:
        key=keydown
    return key
def pickdata(varargin,**kwargs):
    hf=get(0,'CurrentFigure')
    if isempty(hf):
        error('EzyFit:pickdata:InvalidInput','No active figure.')
    h=gco()
    if nargin()==1:
        if ishandle(varargin[1-1]):
            h=varargin[1-1]
        else:
            if isstruct(varargin[1-1]):
                fp=varargin[1-1]
    else:
        if nargin()==2:
            h=varargin[1-1]
            fp=varargin[2-1]
    if  not exist('fp','var'):
        try: 
            fp=fitparam()
        except: 
            error('No fitparam file found.')
    co=get(h)
    if ((isempty(co)) or ( not isfield(co,'XData'))):
        ha=get(gcf(),'CurrentAxes')
        if  not isempty(ha):
            ca=get(ha)
            if  not isempty(ca.Children):
                if strcmp(fp.whichpickdata,'first'):
                    h=ca.Children[int(ca.Children.shape[0]-1)]
                else:
                    h=ca.Children[int(1-1)]
                co=get(h)
            else:
                error('EzyFit:pickdata:InvalidInput','No curve in the active figure.')
        else:
            error('EzyFit:pickdata:InvalidInput','No axis in the active figure.')
    x=co.XData
    y=co.YData
    if isfield(co,'BrushData'):
        if any(co.BrushData):
            x=x[int(co.BrushData==1)]
            y=y[int(co.BrushData==1)]
    if size(x,1)!=1:
        x=(x[2-1,:]+x[3-1,:])/2
        y=y[2-1,:]
    if nargout()==0:
        x
        y
        clear('x','y')
    return x,y,h
def plotsample(opt,varargin,**kwargs):
    error(nargchk(0,2,nargin()))
    rmfit()
    listopt=['power','linear','osc','damposc','cste','exp','hist','hist2','powco','poly2']
    nsample=length(listopt)
    if nargin()==0:
        opt=floor(nsample*rand()+1)
    if isnumeric(opt):
        opt=listopt[max(1,min(opt,nsample))-1]
    if 'power'==lower(opt):
        np=10+round(50*rand())
        x=logspace(1,3,np)*exp((rand()-0.5)*6)
        x=(1+0.3*(rand(1,np)-0.5))*x
        expo=(0.5+rand()*2)*sign(rand()-0.5)
        y=exp((rand()-0.5)*6)*rand()*(1+0.5*(rand(1,np)-0.5))*x**expo
        loglog(x,y,'bo')
        axisl()
        xlabel('x')
        ylabel('y')
        f='power'
        txtl=m_array(['Try to fit with <a href="matlab:showfit(\'',f,'\')">showfit(\'',f,"')</a>"]).reshape(1,-1)
    else:
        if 'linear'==lower(opt):
            x=linspace(0,12,20)
            y=(rand()*1.4+0.9)*x+(rand()-0.5)*20
            x=x+(rand(1,20)-0.5)*1.2
            y=y+(rand(1,20)-0.5)*1.6
            plot(x,y,'ks')
            xlabel('x')
            ylabel('y')
            f='affine'
            txtl='Try to fit with <a href="matlab:showfit(\'poly1\')">showfit(\'poly1\')</a> or <a href="matlab:showfit(\'affine\')">showfit(\'affine\')</a>'
        else:
            if 'osc'==lower(opt):
                np=200+round(600*rand())
                x=linspace(0,40,np)
                y=2*rand()+(2*rand()+1)*(1+0.2*rand(1,np))*sin(rand()+x/(1+0.1*rand()))
                plot(x,y,'b.')
                xlabel('t (seconds)')
                ylabel('U(t) [Volts]')
                f='U(t)=U_0+A*sin(omega*t + phi); U_0=1; omega=1; A=2; phi=0.5'
                txtl=m_array(['Try to fit with <a href="matlab:showfit(\'',f,'\')">showfit(\'',f,"')</a>"]).reshape(1,-1)
            else:
                if 'damposc'==lower(opt):
                    np=200+round(600*rand())
                    x=linspace(0,40,np)
                    y=2*rand()+(2*rand()+1)*(1+0.7*rand(1,np))*sin(x/(1+0.3*rand()))*exp(-x/(8+0.3*rand()))
                    plot(x,y,'b.')
                    xlabel('t (seconds)')
                    ylabel('U(t) [Volts]')
                    f='U(t)=offset+U_0*sin(2*pi*t/T)*exp(-t/tau_0); offset=1; T=5; U_0=2; tau_0=10'
                    txtl=m_array(['Try to fit with <a href="matlab:showfit(\'',f,'\')">showfit(\'',f,"')</a>"]).reshape(1,-1)
                else:
                    if 'cste'==lower(opt):
                        x=linspace(0,20,20)
                        y=(rand()+0.5)*11.1+(rand(1,20)-0.5)*(rand()+1)*1.3
                        x=x+(rand(1,20)-0.5)*0.7
                        plot(x,y,'ro')
                        axis(m_array([0,20,0,1.3*max(y)]).reshape(1,-1))
                        xlabel('x')
                        ylabel('y')
                        f='cste'
                        txtl='Try to fit with <a href="matlab:showfit(\'cste\')">showfit(\'cste\')</a> or <a href="matlab:showfit(\'affine\')">showfit(\'affine\')</a>'
                    else:
                        if 'exp'==lower(opt):
                            np=15+round(rand()*30)
                            x=linspace(0,10+round(20*rand()),np)
                            y=(rand()+0.5)*3*exp(-x/(3.8*rand()+2))
                            x=abs(x+(rand(1,np)-0.5)*0.7)
                            y=abs(y+(rand(1,np)-0.5)*0.05)
                            plot(x,y,'k*')
                            xlabel('t (s)')
                            ylabel('N(t)')
                            f='N(t)=N_0*exp(-t/tau)'
                            txtl=m_array(['Try to fit with <a href="matlab:showfit(\'',f,'\')">showfit(\'',f,"')</a>"]).reshape(1,-1)
                        else:
                            if 'hist'==lower(opt):
                                np=300+round(3000*rand())
                                a=ones(1,np)
                                for i in arange(1,np+1).reshape(1,-1).flat:
                                    a[int(i-1)]=rand()+rand()+rand()+rand()+rand()+rand()+rand()+rand()-4
                                a=a+(rand()-0.5)*2
                                x=linspace(-5,5,15+round(rand()*100))
                                scal=exp(8*(rand()-0.5))
                                hist(a*scal,x*scal)
                                xlabel('x')
                                ylabel('hist')
                                f='gauss'
                                txtl=m_array(['Try to fit with <a href="matlab:showfit(\'',f,'\')">showfit(\'',f,"')</a>"]).reshape(1,-1)
                            else:
                                if 'hist2'==lower(opt):
                                    np=7000+round(rand()*3000)
                                    a=ones(1,np)
                                    for i in arange(1,round(np/3)+1).reshape(1,-1).flat:
                                        a[int(i-1)]=(rand()+rand()+rand()+rand()+rand()+rand()+rand()+rand())/2+5
                                    for i in arange((round(np/3)+1),np+1).reshape(1,-1).flat:
                                        a[int(i-1)]=(rand()+rand()+rand()+rand()+rand()+rand()+rand()+rand())*1.7+8
                                    a[(np+1)-1:(np+500)+1-1]=rand(1,500)*20
                                    x=linspace(0,20,400+round(rand()*100))
                                    y=hist(a,x)
                                    plot(x,y,'r+')
                                    xlabel('x')
                                    ylabel('hist')
                                    f='a_1*exp(-(x-m_1)^2/(2*s_1^2))+a_2*exp(-(x-m_2)^2/(2*s_2^2)); a_1=100; a_2=100; m_1=8; m_2=16'
                                    txtl=m_array(['Try to fit with <a href="matlab:showfit(\'',f,'\')">showfit(\'',f,"')</a>"]).reshape(1,-1)
                                else:
                                    if 'powco'==lower(opt):
                                        x=logspace(0,3,50)
                                        x=(1+0.4*(rand(1,50)-0.5))*x
                                        y=4*rand()*(1+0.9*(rand(1,50)-0.5))*x**(-(rand()+1))*exp(-x/(100*(rand()+0.5)))
                                        loglog(x,y,'d')
                                        xlabel('k')
                                        ylabel('E(k)')
                                        f='E(k)=C*k^(-n)*exp(-k/k_c); log; C=5; n=2; k_c=100'
                                        txtl=m_array(['Try to fit with <a href="matlab:showfit(\'',f,'\')">showfit(\'',f,"')</a>"]).reshape(1,-1)
                                    else:
                                        if 'poly2'==lower(opt):
                                            x=linspace(0,15,20)
                                            y=rand()*2.2*x+(rand()*0.6-0.35)*x**2+(rand(1,20)-0.5)*2.5
                                            y2=rand()*2.2*x+(rand()*0.6-0.35)*x**2+(rand(1,20)-0.5)*2.5
                                            y3=rand()*2.2*x+(rand()*0.6-0.35)*x**2+(rand(1,20)-0.5)*2.5
                                            plot(x,y,'bo',x,y2,'rs',x,y3,'md')
                                            xlabel('x')
                                            ylabel('y')
                                            f='poly2'
                                            txtl=m_array(['Click on a curve, and try to fit with <a href="matlab:showfit(\'',f,'\')">showfit(\'',f,"')</a>"]).reshape(1,-1)
                                        else:
                                            error('Invalid plotsample option.')
    title('Sample data')
    efmenu()
    if any(strcmpi(varargin,'fit')):
        showfit(f)
    else:
        if  not any(strncmpi(varargin,'nodisp',2)):
            disp(txtl)
    if nargout()==0:
        clear('x','y')
    return x,y
def rmfit(opt,**kwargs):
    if exist('fitparam.m','file'):
        fp=fitparam()
    else:
        error('No fitparam file found.')
    if nargin()==0:
        opt=''
    if isempty(get(0,'CurrentFigure')):
        return 
    if isnumeric(opt):
        h=findall(gcf(),'UserData','equationbox')
        h=h[h.shape[0]-1:-1:1+1-1]
        if length(h)>=opt:
            delete(h[int(opt-1)])
        h=findobj(gcf(),'UserData','fit')
        h=h[h.shape[0]-1:-1:1+1-1]
        if length(h)>=opt:
            delete(h[int(opt-1)])
    else:
        if ischar(opt):
            if 'first'==lower(opt):
                h=findall(gcf(),'UserData','equationbox')
                if  not isempty(h):
                    delete(h[int(h.shape[0]-1)])
                h=findobj(gcf(),'UserData','fit')
                if  not isempty(h):
                    delete(h[int(h.shape[0]-1)])
            else:
                if 'last'==lower(opt):
                    h=findall(gcf(),'UserData','equationbox')
                    if  not isempty(h):
                        delete(h[int(1-1)])
                    h=findobj(gcf(),'UserData','fit')
                    if  not isempty(h):
                        delete(h[int(1-1)])
                else:
                    if 'boxonly'==lower(opt):
                        delete(findall(gcf(),'UserData','equationbox'))
                    else:
                        if 'getslope'==lower(opt):
                            delete(findall(gcf(),'UserData','getslopetextbox'))
                            delete(findall(gcf(),'UserData','showslopetextbox'))
                        else:
                            delete(findall(gcf(),'UserData','equationbox'))
                            delete(findobj(gcf(),'UserData','fit'))
    if strcmp(fp.dispfitlegend,'on'):
        legend('off')
        legend('show')
    return 
def semilogypn(x,y,specpos,specneg,varargin,**kwargs):
    error(nargchk(1,inf(),nargin()))
    if nargin()<2:
        y=x
        x=arange(1,length(y)+1).reshape(1,-1)
    if nargin()<3:
        specpos='b-'
        specneg='b--'
    else:
        if nargin()<4:
            if findstr(specpos,'--'):
                specneg=strrep(specpos,'--','-')
            else:
                specneg=specpos
                specneg=strrep(specneg,'-.','')
                specneg=strrep(specneg,':','')
                specneg=strrep(specneg,'-','')
                specneg=m_array([specneg,'--']).reshape(1,-1)
    indpos=find(y>0)
    indneg=find(y<0)
    ypos=_copy(y)
    ypos[int(indneg-1)]=0
    yneg=_copy(y)
    yneg[int(indpos-1)]=0
    if isempty(indneg) and  not isempty(indpos):
        hp=semilogy(x,ypos,specpos,varargin[:])
        hn=m_array()
    else:
        if  not isempty(indneg) and isempty(indpos):
            hp=m_array()
            hn=semilogy(x,-yneg,specneg,varargin[:])
        else:
            statehold=ishold()
            hp=semilogy(x,ypos,specpos,varargin[:])
            hold('on')
            hn=semilogy(x,-yneg,specneg,varargin[:])
            if statehold==false():
                hold('off')
    if  not nargout():
        clear('hp','hn')
    return hp,hn
def showeqbox(f,varargin,**kwargs):
    if nargin()>1:
        if isstruct(varargin[1-1]):
            fp=varargin[1-1]
    if  not exist('fp','var'):
        try: 
            fp=fitparam()
        except: 
            error('No fitparam file found.')
    if isfield(f,'eq'):
        streq=m_array([f.yvar,'(',f.xvar,') = ',f.eq]).reshape(1,-1)
        if strcmp(fp.eqreplacemode,'on'):
            for n in arange(1,length(f.m)+1).reshape(1,-1).flat:
                streq=strrep(streq,f.param[n-1],num2str(f.m[int(n-1)],fp.numberofdigit))
            if length(streq)>fp.maxlengtheq:
                streq=m_array([streq[1-1:fp.maxlengtheq+1-1],'...']).reshape(1,-1)
            streq=greekize(streq)
            streq=[streq]
        else:
            if length(streq)>fp.maxlengtheq:
                streq=m_array([streq[1-1:fp.maxlengtheq+1-1],'...']).reshape(1,-1)
            streq=[greekize(streq)]
            for n in arange(1,length(f.m)+1).reshape(1,-1).flat:
                strm=m_array([greekize(f.param[n-1]),' = ',num2str(f.m[int(n-1)],fp.numberofdigit)]).reshape(1,-1)
                streq=[streq[:],strm]
        lastline=''
        if 'r'==lower(fp.corrcoefmode):
            lastline=m_array(['R = ',num2str(f.r,fp.numberofdigit),'  ']).reshape(1,-1)
        else:
            if 'r2'==lower(fp.corrcoefmode):
                lastline=m_array(['R^2 = ',num2str(f.r**2,fp.numberofdigit),'  ']).reshape(1,-1)
        if strcmp(fp.linlogdisp,'on'):
            lastline=m_array([lastline,'(',f.fitmode,')']).reshape(1,-1)
        if  not isempty(lastline):
            streq=[streq[:],lastline]
    else:
        streq=f.name
    numann=length(findall(gcf(),'UserData','equationbox'))
    position=fp.boxlocation+numann*m_array([0.01,-0.01,0,0]).reshape(1,-1)
    if ischar(fp.fitcolor) or length(fp.fitcolor)==3:
        fitcolor=fp.fitcolor
    else:
        fitcolor=m_array([0,0,0]).reshape(1,-1)
        if isfield(f,'hdata'):
            if ishandle(f.hdata):
                co=get(f.hdata)
                if isfield(co,'Color'):
                    fitcolor=max(0,min(1,co.Color*fp.fitcolor))
    if any(strncmpi(varargin,'transparent',5)):
        bgcolor='none'
    else:
        bgcolor='white'
    hboxeq=annotation('textbox',position,'BackgroundColor',bgcolor,'Color',fitcolor,'EdgeColor',fitcolor,'FitBoxToText','on','UserData','equationbox','String',streq,'FontSize',get(0,'DefaultAxesFontSize'),'FontName',get(0,'DefaultAxesFontName'))
    return hboxeq
def showresidual(f,h,**kwargs):
    if nargin()==0:
        if evalin('base',"exist('lastfit','var')"):
            f=evalin('base','lastfit')
        else:
            errordlg('No existing fit. First fit a curve.','Show fit residual','on')
            return yres()
    yfit=evalfit(f,f.x)
    yres=f.y-yfit
    if exist('h','var'):
        figure(h)
        hold('on')
    else:
        figure()
    hres=plot(f.x,yres,'o')
    title(m_array(['Fit Residuals for ',strrep(f.name,'^','\\^')]).reshape(1,-1))
    ylabel(m_array([f.yvar,' - ',f.yvar,'_{fit}']).reshape(1,-1))
    if isfield(f,'hdata'):
        if ishandle(f.hdata):
            set(hres,'Color',get(f.hdata,'Color'))
            set(hres,'LineStyle',get(f.hdata,'LineStyle'))
            set(hres,'LineWidth',get(f.hdata,'LineWidth'))
            set(hres,'Marker',get(f.hdata,'Marker'))
            set(hres,'MarkerSize',get(f.hdata,'MarkerSize'))
            p=get(f.hdata)
            pp=get(p.Parent)
            ppl=get(pp.XLabel)
            xlabel(ppl.String)
            set(gca(),'XScale',pp.XScale)
    gridc('x')
    axisc('y')
    hold('off')
    if nargout()==0:
        clear('yres')
    return yres
def showslope(n,varargin,**kwargs):
    error(nargchk(0,2,nargin()))
    if isempty(get(0,'CurrentFigure')):
        error('No figure.')
    if strcmpi(get(gcf(),'WindowStyle'),'Docked'):
        if any(strncmpi(varargin,'dialog',4)):
            errordlg('Sorry, ShowSlope does not work on docked windows. Please undock your window first.','ShowSlope')
            return hl()
        error('Sorry, showslope does not work on docked windows. Please undock your window first.')
    if nargin()==0 or isempty(n):
        efroot=fileparts(mfilename('fullpath'))
        prevslopefile=m_array([efroot,filesep(),'prevslope.mat']).reshape(1,-1)
        if exist(prevslopefile,'file'):
            load(prevslopefile)
        else:
            n=1
        n=inputdlg('Enter the slope','Showslope',1,[num2str(n)])
        if  not isempty(n):
            n=n[1-1]
            save(prevslopefile,'n')
        else:
            return hl()
    if ischar(n):
        strn=n
        n=eval(n)
    else:
        strn=num2str(n)
    icg=get(gca())
    fig=gcf()
    initial_pointer=get(fig,'Pointer')
    uistate=uisuspend(fig)
    xv,yv,but=myginput(1,'crosshair',nargout=3)
    set(fig,'Pointer','crosshair')
    if (but==1):
        spt0=get(0,'PointerLocation')
        wls=get(fig,'Position')
        xw1=(spt0[int(1-1)]-wls[int(1-1)])/wls[int(3-1)]
        yw1=(spt0[int(2-1)]-wls[int(2-1)])/wls[int(4-1)]
        hold('on')
        set(fig,'SelectionType','extend')
        while strcmp(get(fig,'SelectionType'),'extend'):
            if get(0,'PointerWindow')==fig:
                sptcur=get(0,'PointerLocation')
                wls=get(fig,'Position')
                xw2=(sptcur[int(1-1)]-wls[int(1-1)])/wls[int(3-1)]
                xr2=(xw2-icg.Position[int(1-1)])/(icg.Position[int(3-1)])
                if isequal(icg.XScale,'log') and isequal(icg.YScale,'log'):
                    xv[int(2-1)]=icg.XLim[int(1-1)]*(icg.XLim[int(2-1)]/icg.XLim[int(1-1)])**xr2
                    yv[int(2-1)]=yv[int(1-1)]*(xv[int(2-1)]/xv[int(1-1)])**n
                    yr2=log(yv[int(2-1)]/icg.YLim[int(1-1)])/log(icg.YLim[int(2-1)]/icg.YLim[int(1-1)])
                else:
                    if isequal(icg.XScale,'linear') and isequal(icg.YScale,'linear'):
                        xv[int(2-1)]=icg.XLim[int(1-1)]+(icg.XLim[int(2-1)]-icg.XLim[int(1-1)])*xr2
                        yv[int(2-1)]=yv[int(1-1)]+n*(xv[int(2-1)]-xv[int(1-1)])
                        yr2=(yv[int(2-1)]-icg.YLim[int(1-1)])/(icg.YLim[int(2-1)]-icg.YLim[int(1-1)])
                    else:
                        if isequal(icg.XScale,'linear') and isequal(icg.YScale,'log'):
                            xv[int(2-1)]=icg.XLim[int(1-1)]+(icg.XLim[int(2-1)]-icg.XLim[int(1-1)])*xr2
                            yv[int(2-1)]=yv[int(1-1)]*exp(n*(xv[int(2-1)]-xv[int(1-1)]))
                            yr2=log(yv[int(2-1)]/icg.YLim[int(1-1)])/log(icg.YLim[int(2-1)]/icg.YLim[int(1-1)])
                        else:
                            if isequal(icg.XScale,'log') and isequal(icg.YScale,'linear'):
                                xv[int(2-1)]=icg.XLim[int(1-1)]*(icg.XLim[int(2-1)]/icg.XLim[int(1-1)])**xr2
                                yv[int(2-1)]=yv[int(1-1)]+n*log(xv[int(2-1)]/xv[int(1-1)])
                                yr2=(yv[int(2-1)]-icg.YLim[int(1-1)])/(icg.YLim[int(2-1)]-icg.YLim[int(1-1)])
                if n!=0:
                    yw2=icg.Position[int(2-1)]+icg.Position[int(4-1)]*yr2
                else:
                    yw2=yw1
                hl=findall(fig,'UserData','showslopedashedline')
                if  not isempty(hl):
                    set(hl,'X',m_array([xw1,xw2]).reshape(1,-1))
                    set(hl,'Y',m_array([yw1,yw2]).reshape(1,-1))
                else:
                    annotation('line',m_array([xw1,xw2]).reshape(1,-1),m_array([yw1,yw2]).reshape(1,-1),'LineStyle',':','UserData','showslopedashedline')
        if any(strcmpi(varargin,'fix')):
            delete(hl)
            x=linspace(xv[int(1-1)],xv[int(2-1)],200)
            if isequal(icg.XScale,'log') and isequal(icg.YScale,'log'):
                y=yv[int(1-1)]*(x/xv[int(1-1)])**n
            else:
                if isequal(icg.XScale,'linear') and isequal(icg.YScale,'linear'):
                    y=yv[int(1-1)]+n*(x-xv[int(1-1)])
                else:
                    if isequal(icg.XScale,'linear') and isequal(icg.YScale,'log'):
                        y=yv[int(1-1)]*exp(n*(x-xv[int(1-1)]))
                    else:
                        if isequal(icg.XScale,'log') and isequal(icg.YScale,'linear'):
                            y=yv[int(1-1)]+n*log(x/xv[int(1-1)])
            hl=plot(x,y,'k-','UserData','showslopeline')
        else:
            set(hl,'UserData','showslopeline')
            set(hl,'LineStyle','-')
        if  not any(strncmpi(varargin,'nolabel',5)):
            textlocation=m_array([(xw1+xw2)/2,(yw1+yw2)/2-0.075-sign(n)*0.025,0.1,0.1]).reshape(1,-1)
            annotation('textbox',textlocation,'LineStyle','none','UserData','showslopetextbox','String',strn)
    hold('off')
    set(fig,'Pointer',initial_pointer)
    uirestore(uistate)
    if nargout()==0:
        clear('hl')
    return hl
def sw(**kwargs):
    swx()
    swy()
    return 
def swx(**kwargs):
    if strcmp(get(gca(),'XScale'),'log'):
        linx()
    else:
        logx()
    return 
def swy(**kwargs):
    if strcmp(get(gca(),'YScale'),'log'):
        liny()
    else:
        logy()
    return 
def undofit(**kwargs):
    rmfit('last')
    return 
